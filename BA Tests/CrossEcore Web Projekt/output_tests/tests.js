/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./tests/tests.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/assertion-error/index.js":
/*!***********************************************!*\
  !*** ./node_modules/assertion-error/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */
/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */
function exclude() {
    var excludes = [].slice.call(arguments);
    function excludeProps(res, obj) {
        Object.keys(obj).forEach(function (key) {
            if (!~excludes.indexOf(key))
                res[key] = obj[key];
        });
    }
    return function extendExclude() {
        var args = [].slice.call(arguments), i = 0, res = {};
        for (; i < args.length; i++) {
            excludeProps(res, args[i]);
        }
        return res;
    };
}
;
/*!
 * Primary Exports
 */
module.exports = AssertionError;
/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */
function AssertionError(message, _props, ssf) {
    var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'), props = extend(_props || {});
    // default values
    this.message = message || 'Unspecified AssertionError';
    this.showDiff = false;
    // copy from properties
    for (var key in props) {
        this[key] = props[key];
    }
    // capture stack trace
    ssf = ssf || AssertionError;
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ssf);
    }
    else {
        try {
            throw new Error();
        }
        catch (e) {
            this.stack = e.stack;
        }
    }
}
/*!
 * Inherit from Error.prototype
 */
AssertionError.prototype = Object.create(Error.prototype);
/*!
 * Statically set name
 */
AssertionError.prototype.name = 'AssertionError';
/*!
 * Ensure correct constructor
 */
AssertionError.prototype.constructor = AssertionError;
/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */
AssertionError.prototype.toJSON = function (stack) {
    var extend = exclude('constructor', 'toJSON', 'stack'), props = extend({ name: this.name }, this);
    // include stack if exists and not turned off
    if (false !== stack && this.stack) {
        props.stack = this.stack;
    }
    return props;
};


/***/ }),

/***/ "./node_modules/chai/index.js":
/*!************************************!*\
  !*** ./node_modules/chai/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/chai */ "./node_modules/chai/lib/chai.js");


/***/ }),

/***/ "./node_modules/chai/lib/chai.js":
/*!***************************************!*\
  !*** ./node_modules/chai/lib/chai.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var used = [];
/*!
 * Chai version
 */
exports.version = '4.2.0';
/*!
 * Assertion Error
 */
exports.AssertionError = __webpack_require__(/*! assertion-error */ "./node_modules/assertion-error/index.js");
/*!
 * Utils for plugins (not exported)
 */
var util = __webpack_require__(/*! ./chai/utils */ "./node_modules/chai/lib/chai/utils/index.js");
/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai.
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */
exports.use = function (fn) {
    if (!~used.indexOf(fn)) {
        fn(exports, util);
        used.push(fn);
    }
    return exports;
};
/*!
 * Utility Functions
 */
exports.util = util;
/*!
 * Configuration
 */
var config = __webpack_require__(/*! ./chai/config */ "./node_modules/chai/lib/chai/config.js");
exports.config = config;
/*!
 * Primary `Assertion` prototype
 */
var assertion = __webpack_require__(/*! ./chai/assertion */ "./node_modules/chai/lib/chai/assertion.js");
exports.use(assertion);
/*!
 * Core Assertions
 */
var core = __webpack_require__(/*! ./chai/core/assertions */ "./node_modules/chai/lib/chai/core/assertions.js");
exports.use(core);
/*!
 * Expect interface
 */
var expect = __webpack_require__(/*! ./chai/interface/expect */ "./node_modules/chai/lib/chai/interface/expect.js");
exports.use(expect);
/*!
 * Should interface
 */
var should = __webpack_require__(/*! ./chai/interface/should */ "./node_modules/chai/lib/chai/interface/should.js");
exports.use(should);
/*!
 * Assert interface
 */
var assert = __webpack_require__(/*! ./chai/interface/assert */ "./node_modules/chai/lib/chai/interface/assert.js");
exports.use(assert);


/***/ }),

/***/ "./node_modules/chai/lib/chai/assertion.js":
/*!*************************************************!*\
  !*** ./node_modules/chai/lib/chai/assertion.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var config = __webpack_require__(/*! ./config */ "./node_modules/chai/lib/chai/config.js");
module.exports = function (_chai, util) {
    /*!
     * Module dependencies.
     */
    var AssertionError = _chai.AssertionError, flag = util.flag;
    /*!
     * Module export.
     */
    _chai.Assertion = Assertion;
    /*!
     * Assertion Constructor
     *
     * Creates object for chaining.
     *
     * `Assertion` objects contain metadata in the form of flags. Three flags can
     * be assigned during instantiation by passing arguments to this constructor:
     *
     * - `object`: This flag contains the target of the assertion. For example, in
     *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
     *   contain `numKittens` so that the `equal` assertion can reference it when
     *   needed.
     *
     * - `message`: This flag contains an optional custom error message to be
     *   prepended to the error message that's generated by the assertion when it
     *   fails.
     *
     * - `ssfi`: This flag stands for "start stack function indicator". It
     *   contains a function reference that serves as the starting point for
     *   removing frames from the stack trace of the error that's created by the
     *   assertion when it fails. The goal is to provide a cleaner stack trace to
     *   end users by removing Chai's internal functions. Note that it only works
     *   in environments that support `Error.captureStackTrace`, and only when
     *   `Chai.config.includeStack` hasn't been set to `false`.
     *
     * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
     *   should retain its current value, even as assertions are chained off of
     *   this object. This is usually set to `true` when creating a new assertion
     *   from within another assertion. It's also temporarily set to `true` before
     *   an overwritten assertion gets called by the overwriting assertion.
     *
     * @param {Mixed} obj target of the assertion
     * @param {String} msg (optional) custom error message
     * @param {Function} ssfi (optional) starting point for removing stack frames
     * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
     * @api private
     */
    function Assertion(obj, msg, ssfi, lockSsfi) {
        flag(this, 'ssfi', ssfi || Assertion);
        flag(this, 'lockSsfi', lockSsfi);
        flag(this, 'object', obj);
        flag(this, 'message', msg);
        return util.proxify(this);
    }
    Object.defineProperty(Assertion, 'includeStack', {
        get: function () {
            console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
            return config.includeStack;
        },
        set: function (value) {
            console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
            config.includeStack = value;
        }
    });
    Object.defineProperty(Assertion, 'showDiff', {
        get: function () {
            console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
            return config.showDiff;
        },
        set: function (value) {
            console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
            config.showDiff = value;
        }
    });
    Assertion.addProperty = function (name, fn) {
        util.addProperty(this.prototype, name, fn);
    };
    Assertion.addMethod = function (name, fn) {
        util.addMethod(this.prototype, name, fn);
    };
    Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
        util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
    Assertion.overwriteProperty = function (name, fn) {
        util.overwriteProperty(this.prototype, name, fn);
    };
    Assertion.overwriteMethod = function (name, fn) {
        util.overwriteMethod(this.prototype, name, fn);
    };
    Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
        util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
    /**
     * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
     *
     * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
     *
     * @name assert
     * @param {Philosophical} expression to be tested
     * @param {String|Function} message or function that returns message to display if expression fails
     * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
     * @param {Mixed} expected value (remember to check for negation)
     * @param {Mixed} actual (optional) will default to `this.obj`
     * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
     * @api private
     */
    Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
        var ok = util.test(this, arguments);
        if (false !== showDiff)
            showDiff = true;
        if (undefined === expected && undefined === _actual)
            showDiff = false;
        if (true !== config.showDiff)
            showDiff = false;
        if (!ok) {
            msg = util.getMessage(this, arguments);
            var actual = util.getActual(this, arguments);
            throw new AssertionError(msg, {
                actual: actual,
                expected: expected,
                showDiff: showDiff
            }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
        }
    };
    /*!
     * ### ._obj
     *
     * Quick reference to stored `actual` value for plugin developers.
     *
     * @api private
     */
    Object.defineProperty(Assertion.prototype, '_obj', { get: function () {
            return flag(this, 'object');
        },
        set: function (val) {
            flag(this, 'object', val);
        }
    });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/config.js":
/*!**********************************************!*\
  !*** ./node_modules/chai/lib/chai/config.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
    /**
     * ### config.includeStack
     *
     * User configurable property, influences whether stack trace
     * is included in Assertion error message. Default of false
     * suppresses stack trace in the error message.
     *
     *     chai.config.includeStack = true;  // enable stack on error
     *
     * @param {Boolean}
     * @api public
     */
    includeStack: false,
    /**
     * ### config.showDiff
     *
     * User configurable property, influences whether or not
     * the `showDiff` flag should be included in the thrown
     * AssertionErrors. `false` will always be `false`; `true`
     * will be true when the assertion has requested a diff
     * be shown.
     *
     * @param {Boolean}
     * @api public
     */
    showDiff: true,
    /**
     * ### config.truncateThreshold
     *
     * User configurable property, sets length threshold for actual and
     * expected values in assertion errors. If this threshold is exceeded, for
     * example for large data structures, the value is replaced with something
     * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
     *
     * Set it to zero if you want to disable truncating altogether.
     *
     * This is especially userful when doing assertions on arrays: having this
     * set to a reasonable large value makes the failure messages readily
     * inspectable.
     *
     *     chai.config.truncateThreshold = 0;  // disable truncating
     *
     * @param {Number}
     * @api public
     */
    truncateThreshold: 40,
    /**
     * ### config.useProxy
     *
     * User configurable property, defines if chai will use a Proxy to throw
     * an error when a non-existent property is read, which protects users
     * from typos when using property-based assertions.
     *
     * Set it to false if you want to disable this feature.
     *
     *     chai.config.useProxy = false;  // disable use of Proxy
     *
     * This feature is automatically disabled regardless of this config value
     * in environments that don't support proxies.
     *
     * @param {Boolean}
     * @api public
     */
    useProxy: true,
    /**
     * ### config.proxyExcludedKeys
     *
     * User configurable property, defines which properties should be ignored
     * instead of throwing an error if they do not exist on the assertion.
     * This is only applied if the environment Chai is running in supports proxies and
     * if the `useProxy` configuration setting is enabled.
     * By default, `then` and `inspect` will not throw an error if they do not exist on the
     * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
     * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
     *
     *     // By default these keys will not throw an error if they do not exist on the assertion object
     *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
     *
     * @param {Array}
     * @api public
     */
    proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/core/assertions.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/core/assertions.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
module.exports = function (chai, _) {
    var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
    /**
     * ### Language Chains
     *
     * The following are provided as chainable getters to improve the readability
     * of your assertions.
     *
     * **Chains**
     *
     * - to
     * - be
     * - been
     * - is
     * - that
     * - which
     * - and
     * - has
     * - have
     * - with
     * - at
     * - of
     * - same
     * - but
     * - does
     * - still
     *
     * @name language chains
     * @namespace BDD
     * @api public
     */
    ['to', 'be', 'been', 'is',
        'and', 'has', 'have', 'with',
        'that', 'which', 'at', 'of',
        'same', 'but', 'does', 'still'].forEach(function (chain) {
        Assertion.addProperty(chain);
    });
    /**
     * ### .not
     *
     * Negates all assertions that follow in the chain.
     *
     *     expect(function () {}).to.not.throw();
     *     expect({a: 1}).to.not.have.property('b');
     *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
     *
     * Just because you can negate any assertion with `.not` doesn't mean you
     * should. With great power comes great responsibility. It's often best to
     * assert that the one expected output was produced, rather than asserting
     * that one of countless unexpected outputs wasn't produced. See individual
     * assertions for specific guidance.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.equal(1); // Not recommended
     *
     * @name not
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('not', function () {
        flag(this, 'negate', true);
    });
    /**
     * ### .deep
     *
     * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
     * assertions that follow in the chain to use deep equality instead of strict
     * (`===`) equality. See the `deep-eql` project page for info on the deep
     * equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) equals `{a: 1}`
     *     expect({a: 1}).to.deep.equal({a: 1});
     *     expect({a: 1}).to.not.equal({a: 1});
     *
     *     // Target array deeply (but not strictly) includes `{a: 1}`
     *     expect([{a: 1}]).to.deep.include({a: 1});
     *     expect([{a: 1}]).to.not.include({a: 1});
     *
     *     // Target object deeply (but not strictly) includes `x: {a: 1}`
     *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
     *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
     *
     *     // Target array deeply (but not strictly) has member `{a: 1}`
     *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
     *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
     *
     *     // Target set deeply (but not strictly) has key `{a: 1}`
     *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
     *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
     *
     *     // Target object deeply (but not strictly) has property `x: {a: 1}`
     *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
     *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
     *
     * @name deep
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('deep', function () {
        flag(this, 'deep', true);
    });
    /**
     * ### .nested
     *
     * Enables dot- and bracket-notation in all `.property` and `.include`
     * assertions that follow in the chain.
     *
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
     *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
     *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
     *
     * `.nested` cannot be combined with `.own`.
     *
     * @name nested
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('nested', function () {
        flag(this, 'nested', true);
    });
    /**
     * ### .own
     *
     * Causes all `.property` and `.include` assertions that follow in the chain
     * to ignore inherited properties.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.have.own.property('a');
     *     expect({a: 1}).to.have.property('b');
     *     expect({a: 1}).to.not.have.own.property('b');
     *
     *     expect({a: 1}).to.own.include({a: 1});
     *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
     *
     * `.own` cannot be combined with `.nested`.
     *
     * @name own
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('own', function () {
        flag(this, 'own', true);
    });
    /**
     * ### .ordered
     *
     * Causes all `.members` assertions that follow in the chain to require that
     * members be in the same order.
     *
     *     expect([1, 2]).to.have.ordered.members([1, 2])
     *       .but.not.have.ordered.members([2, 1]);
     *
     * When `.include` and `.ordered` are combined, the ordering begins at the
     * start of both arrays.
     *
     *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
     *       .but.not.include.ordered.members([2, 3]);
     *
     * @name ordered
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('ordered', function () {
        flag(this, 'ordered', true);
    });
    /**
     * ### .any
     *
     * Causes all `.keys` assertions that follow in the chain to only require that
     * the target have at least one of the given keys. This is the opposite of
     * `.all`, which requires that the target have all of the given keys.
     *
     *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
     *
     * See the `.keys` doc for guidance on when to use `.any` or `.all`.
     *
     * @name any
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('any', function () {
        flag(this, 'any', true);
        flag(this, 'all', false);
    });
    /**
     * ### .all
     *
     * Causes all `.keys` assertions that follow in the chain to require that the
     * target have all of the given keys. This is the opposite of `.any`, which
     * only requires that the target have at least one of the given keys.
     *
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *
     * Note that `.all` is used by default when neither `.all` nor `.any` are
     * added earlier in the chain. However, it's often best to add `.all` anyway
     * because it improves readability.
     *
     * See the `.keys` doc for guidance on when to use `.any` or `.all`.
     *
     * @name all
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('all', function () {
        flag(this, 'all', true);
        flag(this, 'any', false);
    });
    /**
     * ### .a(type[, msg])
     *
     * Asserts that the target's type is equal to the given string `type`. Types
     * are case insensitive. See the `type-detect` project page for info on the
     * type detection algorithm: https://github.com/chaijs/type-detect.
     *
     *     expect('foo').to.be.a('string');
     *     expect({a: 1}).to.be.an('object');
     *     expect(null).to.be.a('null');
     *     expect(undefined).to.be.an('undefined');
     *     expect(new Error).to.be.an('error');
     *     expect(Promise.resolve()).to.be.a('promise');
     *     expect(new Float32Array).to.be.a('float32array');
     *     expect(Symbol()).to.be.a('symbol');
     *
     * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
     *
     *     var myObj = {
     *       [Symbol.toStringTag]: 'myCustomType'
     *     };
     *
     *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
     *
     * It's often best to use `.a` to check a target's type before making more
     * assertions on the same target. That way, you avoid unexpected behavior from
     * any assertion that does different things based on the target's type.
     *
     *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
     *     expect([]).to.be.an('array').that.is.empty;
     *
     * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
     * assert that the target is the expected type, rather than asserting that it
     * isn't one of many unexpected types.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.an('array'); // Not recommended
     *
     * `.a` accepts an optional `msg` argument which is a custom error message to
     * show when the assertion fails. The message can also be given as the second
     * argument to `expect`.
     *
     *     expect(1).to.be.a('string', 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.a('string');
     *
     * `.a` can also be used as a language chain to improve the readability of
     * your assertions.
     *
     *     expect({b: 2}).to.have.a.property('b');
     *
     * The alias `.an` can be used interchangeably with `.a`.
     *
     * @name a
     * @alias an
     * @param {String} type
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function an(type, msg) {
        if (msg)
            flag(this, 'message', msg);
        type = type.toLowerCase();
        var obj = flag(this, 'object'), article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
        this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
    }
    Assertion.addChainableMethod('an', an);
    Assertion.addChainableMethod('a', an);
    /**
     * ### .include(val[, msg])
     *
     * When the target is a string, `.include` asserts that the given string `val`
     * is a substring of the target.
     *
     *     expect('foobar').to.include('foo');
     *
     * When the target is an array, `.include` asserts that the given `val` is a
     * member of the target.
     *
     *     expect([1, 2, 3]).to.include(2);
     *
     * When the target is an object, `.include` asserts that the given object
     * `val`'s properties are a subset of the target's properties.
     *
     *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
     *
     * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
     * member of the target. SameValueZero equality algorithm is used.
     *
     *     expect(new Set([1, 2])).to.include(2);
     *
     * When the target is a Map, `.include` asserts that the given `val` is one of
     * the values of the target. SameValueZero equality algorithm is used.
     *
     *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
     *
     * Because `.include` does different things based on the target's type, it's
     * important to check the target's type before using `.include`. See the `.a`
     * doc for info on testing a target's type.
     *
     *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
     *
     * By default, strict (`===`) equality is used to compare array members and
     * object properties. Add `.deep` earlier in the chain to use deep equality
     * instead (WeakSet targets are not supported). See the `deep-eql` project
     * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target array deeply (but not strictly) includes `{a: 1}`
     *     expect([{a: 1}]).to.deep.include({a: 1});
     *     expect([{a: 1}]).to.not.include({a: 1});
     *
     *     // Target object deeply (but not strictly) includes `x: {a: 1}`
     *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
     *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
     *
     * By default, all of the target's properties are searched when working with
     * objects. This includes properties that are inherited and/or non-enumerable.
     * Add `.own` earlier in the chain to exclude the target's inherited
     * properties from the search.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.own.include({a: 1});
     *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
     *
     * Note that a target object is always only searched for `val`'s own
     * enumerable properties.
     *
     * `.deep` and `.own` can be combined.
     *
     *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
     *
     * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
     * referencing nested properties.
     *
     *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
     *
     * `.deep` and `.nested` can be combined.
     *
     *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
     *
     * `.own` and `.nested` cannot be combined.
     *
     * Add `.not` earlier in the chain to negate `.include`.
     *
     *     expect('foobar').to.not.include('taco');
     *     expect([1, 2, 3]).to.not.include(4);
     *
     * However, it's dangerous to negate `.include` when the target is an object.
     * The problem is that it creates uncertain expectations by asserting that the
     * target object doesn't have all of `val`'s key/value pairs but may or may
     * not have some of them. It's often best to identify the exact output that's
     * expected, and then write an assertion that only accepts that exact output.
     *
     * When the target object isn't even expected to have `val`'s keys, it's
     * often best to assert exactly that.
     *
     *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
     *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
     *
     * When the target object is expected to have `val`'s keys, it's often best to
     * assert that each of the properties has its expected value, rather than
     * asserting that each property doesn't have one of many unexpected values.
     *
     *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
     *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
     *
     * `.include` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
     *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
     *
     * `.include` can also be used as a language chain, causing all `.members` and
     * `.keys` assertions that follow in the chain to require the target to be a
     * superset of the expected set, rather than an identical set. Note that
     * `.members` ignores duplicates in the subset when `.include` is added.
     *
     *     // Target object's keys are a superset of ['a', 'b'] but not identical
     *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
     *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
     *
     *     // Target array is a superset of [1, 2] but not identical
     *     expect([1, 2, 3]).to.include.members([1, 2]);
     *     expect([1, 2, 3]).to.not.have.members([1, 2]);
     *
     *     // Duplicates in the subset are ignored
     *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
     *
     * Note that adding `.any` earlier in the chain causes the `.keys` assertion
     * to ignore `.include`.
     *
     *     // Both assertions are identical
     *     expect({a: 1}).to.include.any.keys('a', 'b');
     *     expect({a: 1}).to.have.any.keys('a', 'b');
     *
     * The aliases `.includes`, `.contain`, and `.contains` can be used
     * interchangeably with `.include`.
     *
     * @name include
     * @alias contain
     * @alias includes
     * @alias contains
     * @param {Mixed} val
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function SameValueZero(a, b) {
        return (_.isNaN(a) && _.isNaN(b)) || a === b;
    }
    function includeChainingBehavior() {
        flag(this, 'contains', true);
    }
    function include(val, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), negate = flag(this, 'negate'), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), descriptor = isDeep ? 'deep ' : '';
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        var included = false;
        switch (objType) {
            case 'string':
                included = obj.indexOf(val) !== -1;
                break;
            case 'weakset':
                if (isDeep) {
                    throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
                }
                included = obj.has(val);
                break;
            case 'map':
                var isEql = isDeep ? _.eql : SameValueZero;
                obj.forEach(function (item) {
                    included = included || isEql(item, val);
                });
                break;
            case 'set':
                if (isDeep) {
                    obj.forEach(function (item) {
                        included = included || _.eql(item, val);
                    });
                }
                else {
                    included = obj.has(val);
                }
                break;
            case 'array':
                if (isDeep) {
                    included = obj.some(function (item) {
                        return _.eql(item, val);
                    });
                }
                else {
                    included = obj.indexOf(val) !== -1;
                }
                break;
            default:
                // This block is for asserting a subset of properties in an object.
                // `_.expectTypes` isn't used here because `.include` should work with
                // objects with a custom `@@toStringTag`.
                if (val !== Object(val)) {
                    throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,'
                        + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
                }
                var props = Object.keys(val), firstErr = null, numErrs = 0;
                props.forEach(function (prop) {
                    var propAssertion = new Assertion(obj);
                    _.transferFlags(this, propAssertion, true);
                    flag(propAssertion, 'lockSsfi', true);
                    if (!negate || props.length === 1) {
                        propAssertion.property(prop, val[prop]);
                        return;
                    }
                    try {
                        propAssertion.property(prop, val[prop]);
                    }
                    catch (err) {
                        if (!_.checkError.compatibleConstructor(err, AssertionError)) {
                            throw err;
                        }
                        if (firstErr === null)
                            firstErr = err;
                        numErrs++;
                    }
                }, this);
                // When validating .not.include with multiple properties, we only want
                // to throw an assertion error if all of the properties are included,
                // in which case we throw the first property assertion error that we
                // encountered.
                if (negate && props.length > 1 && numErrs === props.length) {
                    throw firstErr;
                }
                return;
        }
        // Assert inclusion in collection or substring in a string.
        this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
    }
    Assertion.addChainableMethod('include', include, includeChainingBehavior);
    Assertion.addChainableMethod('contain', include, includeChainingBehavior);
    Assertion.addChainableMethod('contains', include, includeChainingBehavior);
    Assertion.addChainableMethod('includes', include, includeChainingBehavior);
    /**
     * ### .ok
     *
     * Asserts that the target is a truthy value (considered `true` in boolean context).
     * However, it's often best to assert that the target is strictly (`===`) or
     * deeply equal to its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.ok; // Not recommended
     *
     *     expect(true).to.be.true; // Recommended
     *     expect(true).to.be.ok; // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.ok`.
     *
     *     expect(0).to.equal(0); // Recommended
     *     expect(0).to.not.be.ok; // Not recommended
     *
     *     expect(false).to.be.false; // Recommended
     *     expect(false).to.not.be.ok; // Not recommended
     *
     *     expect(null).to.be.null; // Recommended
     *     expect(null).to.not.be.ok; // Not recommended
     *
     *     expect(undefined).to.be.undefined; // Recommended
     *     expect(undefined).to.not.be.ok; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(false, 'nooo why fail??').to.be.ok;
     *
     * @name ok
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('ok', function () {
        this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
    });
    /**
     * ### .true
     *
     * Asserts that the target is strictly (`===`) equal to `true`.
     *
     *     expect(true).to.be.true;
     *
     * Add `.not` earlier in the chain to negate `.true`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `true`.
     *
     *     expect(false).to.be.false; // Recommended
     *     expect(false).to.not.be.true; // Not recommended
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.true; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(false, 'nooo why fail??').to.be.true;
     *
     * @name true
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('true', function () {
        this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
    });
    /**
     * ### .false
     *
     * Asserts that the target is strictly (`===`) equal to `false`.
     *
     *     expect(false).to.be.false;
     *
     * Add `.not` earlier in the chain to negate `.false`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to `false`.
     *
     *     expect(true).to.be.true; // Recommended
     *     expect(true).to.not.be.false; // Not recommended
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.false; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(true, 'nooo why fail??').to.be.false;
     *
     * @name false
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('false', function () {
        this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
    });
    /**
     * ### .null
     *
     * Asserts that the target is strictly (`===`) equal to `null`.
     *
     *     expect(null).to.be.null;
     *
     * Add `.not` earlier in the chain to negate `.null`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `null`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.null; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.null;
     *
     * @name null
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('null', function () {
        this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
    });
    /**
     * ### .undefined
     *
     * Asserts that the target is strictly (`===`) equal to `undefined`.
     *
     *     expect(undefined).to.be.undefined;
     *
     * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to `undefined`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.undefined; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.undefined;
     *
     * @name undefined
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('undefined', function () {
        this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
    });
    /**
     * ### .NaN
     *
     * Asserts that the target is exactly `NaN`.
     *
     *     expect(NaN).to.be.NaN;
     *
     * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
     * to assert that the target is equal to its expected value, rather than not
     * equal to `NaN`.
     *
     *     expect('foo').to.equal('foo'); // Recommended
     *     expect('foo').to.not.be.NaN; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(42, 'nooo why fail??').to.be.NaN;
     *
     * @name NaN
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('NaN', function () {
        this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
    });
    /**
     * ### .exist
     *
     * Asserts that the target is not strictly (`===`) equal to either `null` or
     * `undefined`. However, it's often best to assert that the target is equal to
     * its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.exist; // Not recommended
     *
     *     expect(0).to.equal(0); // Recommended
     *     expect(0).to.exist; // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.exist`.
     *
     *     expect(null).to.be.null; // Recommended
     *     expect(null).to.not.exist; // Not recommended
     *
     *     expect(undefined).to.be.undefined; // Recommended
     *     expect(undefined).to.not.exist; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(null, 'nooo why fail??').to.exist;
     *
     * @name exist
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('exist', function () {
        var val = flag(this, 'object');
        this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
    });
    /**
     * ### .empty
     *
     * When the target is a string or array, `.empty` asserts that the target's
     * `length` property is strictly (`===`) equal to `0`.
     *
     *     expect([]).to.be.empty;
     *     expect('').to.be.empty;
     *
     * When the target is a map or set, `.empty` asserts that the target's `size`
     * property is strictly equal to `0`.
     *
     *     expect(new Set()).to.be.empty;
     *     expect(new Map()).to.be.empty;
     *
     * When the target is a non-function object, `.empty` asserts that the target
     * doesn't have any own enumerable properties. Properties with Symbol-based
     * keys are excluded from the count.
     *
     *     expect({}).to.be.empty;
     *
     * Because `.empty` does different things based on the target's type, it's
     * important to check the target's type before using `.empty`. See the `.a`
     * doc for info on testing a target's type.
     *
     *     expect([]).to.be.an('array').that.is.empty;
     *
     * Add `.not` earlier in the chain to negate `.empty`. However, it's often
     * best to assert that the target contains its expected number of values,
     * rather than asserting that it's not empty.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
     *
     *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
     *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
     *
     *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
     *     expect({a: 1}).to.not.be.empty; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
     *
     * @name empty
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('empty', function () {
        var val = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), itemsCount;
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        switch (_.type(val).toLowerCase()) {
            case 'array':
            case 'string':
                itemsCount = val.length;
                break;
            case 'map':
            case 'set':
                itemsCount = val.size;
                break;
            case 'weakmap':
            case 'weakset':
                throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);
            case 'function':
                var msg = flagMsg + '.empty was passed a function ' + _.getName(val);
                throw new AssertionError(msg.trim(), undefined, ssfi);
            default:
                if (val !== Object(val)) {
                    throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
                }
                itemsCount = Object.keys(val).length;
        }
        this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
    });
    /**
     * ### .arguments
     *
     * Asserts that the target is an `arguments` object.
     *
     *     function test () {
     *       expect(arguments).to.be.arguments;
     *     }
     *
     *     test();
     *
     * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
     * best to assert which type the target is expected to be, rather than
     * asserting that its not an `arguments` object.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.arguments; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({}, 'nooo why fail??').to.be.arguments;
     *
     * The alias `.Arguments` can be used interchangeably with `.arguments`.
     *
     * @name arguments
     * @alias Arguments
     * @namespace BDD
     * @api public
     */
    function checkArguments() {
        var obj = flag(this, 'object'), type = _.type(obj);
        this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
    }
    Assertion.addProperty('arguments', checkArguments);
    Assertion.addProperty('Arguments', checkArguments);
    /**
     * ### .equal(val[, msg])
     *
     * Asserts that the target is strictly (`===`) equal to the given `val`.
     *
     *     expect(1).to.equal(1);
     *     expect('foo').to.equal('foo');
     *
     * Add `.deep` earlier in the chain to use deep equality instead. See the
     * `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) equals `{a: 1}`
     *     expect({a: 1}).to.deep.equal({a: 1});
     *     expect({a: 1}).to.not.equal({a: 1});
     *
     *     // Target array deeply (but not strictly) equals `[1, 2]`
     *     expect([1, 2]).to.deep.equal([1, 2]);
     *     expect([1, 2]).to.not.equal([1, 2]);
     *
     * Add `.not` earlier in the chain to negate `.equal`. However, it's often
     * best to assert that the target is equal to its expected value, rather than
     * not equal to one of countless unexpected values.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.equal(2); // Not recommended
     *
     * `.equal` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.equal(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.equal(2);
     *
     * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
     *
     * @name equal
     * @alias equals
     * @alias eq
     * @param {Mixed} val
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertEqual(val, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object');
        if (flag(this, 'deep')) {
            var prevLockSsfi = flag(this, 'lockSsfi');
            flag(this, 'lockSsfi', true);
            this.eql(val);
            flag(this, 'lockSsfi', prevLockSsfi);
        }
        else {
            this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
        }
    }
    Assertion.addMethod('equal', assertEqual);
    Assertion.addMethod('equals', assertEqual);
    Assertion.addMethod('eq', assertEqual);
    /**
     * ### .eql(obj[, msg])
     *
     * Asserts that the target is deeply equal to the given `obj`. See the
     * `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target object is deeply (but not strictly) equal to {a: 1}
     *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
     *
     *     // Target array is deeply (but not strictly) equal to [1, 2]
     *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
     *
     * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
     * to assert that the target is deeply equal to its expected value, rather
     * than not deeply equal to one of countless unexpected values.
     *
     *     expect({a: 1}).to.eql({a: 1}); // Recommended
     *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
     *
     * `.eql` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
     *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
     *
     * The alias `.eqls` can be used interchangeably with `.eql`.
     *
     * The `.deep.equal` assertion is almost identical to `.eql` but with one
     * difference: `.deep.equal` causes deep equality comparisons to also be used
     * for any other assertions that follow in the chain.
     *
     * @name eql
     * @alias eqls
     * @param {Mixed} obj
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertEql(obj, msg) {
        if (msg)
            flag(this, 'message', msg);
        this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
    }
    Assertion.addMethod('eql', assertEql);
    Assertion.addMethod('eqls', assertEql);
    /**
     * ### .above(n[, msg])
     *
     * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.above(1); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the target's `length`
     * or `size` is greater than the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.above(2); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.above`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(1).to.not.be.above(2); // Not recommended
     *
     * `.above` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.above(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.above(2);
     *
     * The aliases `.gt` and `.greaterThan` can be used interchangeably with
     * `.above`.
     *
     * @name above
     * @alias gt
     * @alias greaterThan
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertAbove(n, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = ((flagMsg) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== 'map' && objType !== 'set') {
            new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        }
        if (!doLength && (objType === 'date' && nType !== 'date')) {
            errorMessage = msgPrefix + 'the argument to above must be a date';
        }
        else if (nType !== 'number' && (doLength || objType === 'number')) {
            errorMessage = msgPrefix + 'the argument to above must be a number';
        }
        else if (!doLength && (objType !== 'date' && objType !== 'number')) {
            var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
        }
        else {
            shouldThrow = false;
        }
        if (shouldThrow) {
            throw new AssertionError(errorMessage, undefined, ssfi);
        }
        if (doLength) {
            var descriptor = 'length', itemsCount;
            if (objType === 'map' || objType === 'set') {
                descriptor = 'size';
                itemsCount = obj.size;
            }
            else {
                itemsCount = obj.length;
            }
            this.assert(itemsCount > n, 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' above #{exp}', n, itemsCount);
        }
        else {
            this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
        }
    }
    Assertion.addMethod('above', assertAbove);
    Assertion.addMethod('gt', assertAbove);
    Assertion.addMethod('greaterThan', assertAbove);
    /**
     * ### .least(n[, msg])
     *
     * Asserts that the target is a number or a date greater than or equal to the given
     * number or date `n` respectively. However, it's often best to assert that the target is equal to
     * its expected value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.at.least(1); // Not recommended
     *     expect(2).to.be.at.least(2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the target's `length`
     * or `size` is greater than or equal to the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.least`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.at.least(2); // Not recommended
     *
     * `.least` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.at.least(2, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.at.least(2);
     *
     * The alias `.gte` can be used interchangeably with `.least`.
     *
     * @name least
     * @alias gte
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertLeast(n, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = ((flagMsg) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== 'map' && objType !== 'set') {
            new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        }
        if (!doLength && (objType === 'date' && nType !== 'date')) {
            errorMessage = msgPrefix + 'the argument to least must be a date';
        }
        else if (nType !== 'number' && (doLength || objType === 'number')) {
            errorMessage = msgPrefix + 'the argument to least must be a number';
        }
        else if (!doLength && (objType !== 'date' && objType !== 'number')) {
            var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
        }
        else {
            shouldThrow = false;
        }
        if (shouldThrow) {
            throw new AssertionError(errorMessage, undefined, ssfi);
        }
        if (doLength) {
            var descriptor = 'length', itemsCount;
            if (objType === 'map' || objType === 'set') {
                descriptor = 'size';
                itemsCount = obj.size;
            }
            else {
                itemsCount = obj.length;
            }
            this.assert(itemsCount >= n, 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' below #{exp}', n, itemsCount);
        }
        else {
            this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
        }
    }
    Assertion.addMethod('least', assertLeast);
    Assertion.addMethod('gte', assertLeast);
    /**
     * ### .below(n[, msg])
     *
     * Asserts that the target is a number or a date less than the given number or date `n` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.below(2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the target's `length`
     * or `size` is less than the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.below(4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.length(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.below`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.be.below(1); // Not recommended
     *
     * `.below` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(2).to.be.below(1, 'nooo why fail??');
     *     expect(2, 'nooo why fail??').to.be.below(1);
     *
     * The aliases `.lt` and `.lessThan` can be used interchangeably with
     * `.below`.
     *
     * @name below
     * @alias lt
     * @alias lessThan
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertBelow(n, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = ((flagMsg) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== 'map' && objType !== 'set') {
            new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        }
        if (!doLength && (objType === 'date' && nType !== 'date')) {
            errorMessage = msgPrefix + 'the argument to below must be a date';
        }
        else if (nType !== 'number' && (doLength || objType === 'number')) {
            errorMessage = msgPrefix + 'the argument to below must be a number';
        }
        else if (!doLength && (objType !== 'date' && objType !== 'number')) {
            var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
        }
        else {
            shouldThrow = false;
        }
        if (shouldThrow) {
            throw new AssertionError(errorMessage, undefined, ssfi);
        }
        if (doLength) {
            var descriptor = 'length', itemsCount;
            if (objType === 'map' || objType === 'set') {
                descriptor = 'size';
                itemsCount = obj.size;
            }
            else {
                itemsCount = obj.length;
            }
            this.assert(itemsCount < n, 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' below #{exp}', n, itemsCount);
        }
        else {
            this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
        }
    }
    Assertion.addMethod('below', assertBelow);
    Assertion.addMethod('lt', assertBelow);
    Assertion.addMethod('lessThan', assertBelow);
    /**
     * ### .most(n[, msg])
     *
     * Asserts that the target is a number or a date less than or equal to the given number
     * or date `n` respectively. However, it's often best to assert that the target is equal to its
     * expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.at.most(2); // Not recommended
     *     expect(1).to.be.at.most(1); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the target's `length`
     * or `size` is less than or equal to the given number `n`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.most`.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.not.be.at.most(1); // Not recommended
     *
     * `.most` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(2).to.be.at.most(1, 'nooo why fail??');
     *     expect(2, 'nooo why fail??').to.be.at.most(1);
     *
     * The alias `.lte` can be used interchangeably with `.most`.
     *
     * @name most
     * @alias lte
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertMost(n, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = ((flagMsg) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== 'map' && objType !== 'set') {
            new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        }
        if (!doLength && (objType === 'date' && nType !== 'date')) {
            errorMessage = msgPrefix + 'the argument to most must be a date';
        }
        else if (nType !== 'number' && (doLength || objType === 'number')) {
            errorMessage = msgPrefix + 'the argument to most must be a number';
        }
        else if (!doLength && (objType !== 'date' && objType !== 'number')) {
            var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
        }
        else {
            shouldThrow = false;
        }
        if (shouldThrow) {
            throw new AssertionError(errorMessage, undefined, ssfi);
        }
        if (doLength) {
            var descriptor = 'length', itemsCount;
            if (objType === 'map' || objType === 'set') {
                descriptor = 'size';
                itemsCount = obj.size;
            }
            else {
                itemsCount = obj.length;
            }
            this.assert(itemsCount <= n, 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' above #{exp}', n, itemsCount);
        }
        else {
            this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
        }
    }
    Assertion.addMethod('most', assertMost);
    Assertion.addMethod('lte', assertMost);
    /**
     * ### .within(start, finish[, msg])
     *
     * Asserts that the target is a number or a date greater than or equal to the given
     * number or date `start`, and less than or equal to the given number or date `finish` respectively.
     * However, it's often best to assert that the target is equal to its expected
     * value.
     *
     *     expect(2).to.equal(2); // Recommended
     *     expect(2).to.be.within(1, 3); // Not recommended
     *     expect(2).to.be.within(2, 3); // Not recommended
     *     expect(2).to.be.within(1, 2); // Not recommended
     *
     * Add `.lengthOf` earlier in the chain to assert that the target's `length`
     * or `size` is greater than or equal to the given number `start`, and less
     * than or equal to the given number `finish`.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.within`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.within(2, 4); // Not recommended
     *
     * `.within` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(4).to.be.within(1, 3, 'nooo why fail??');
     *     expect(4, 'nooo why fail??').to.be.within(1, 3);
     *
     * @name within
     * @param {Number} start lower bound inclusive
     * @param {Number} finish upper bound inclusive
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    Assertion.addMethod('within', function (start, finish, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), doLength = flag(this, 'doLength'), flagMsg = flag(this, 'message'), msgPrefix = ((flagMsg) ? flagMsg + ': ' : ''), ssfi = flag(this, 'ssfi'), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), errorMessage, shouldThrow = true, range = (startType === 'date' && finishType === 'date')
            ? start.toUTCString() + '..' + finish.toUTCString()
            : start + '..' + finish;
        if (doLength && objType !== 'map' && objType !== 'set') {
            new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        }
        if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {
            errorMessage = msgPrefix + 'the arguments to within must be dates';
        }
        else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
            errorMessage = msgPrefix + 'the arguments to within must be numbers';
        }
        else if (!doLength && (objType !== 'date' && objType !== 'number')) {
            var printObj = (objType === 'string') ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
        }
        else {
            shouldThrow = false;
        }
        if (shouldThrow) {
            throw new AssertionError(errorMessage, undefined, ssfi);
        }
        if (doLength) {
            var descriptor = 'length', itemsCount;
            if (objType === 'map' || objType === 'set') {
                descriptor = 'size';
                itemsCount = obj.size;
            }
            else {
                itemsCount = obj.length;
            }
            this.assert(itemsCount >= start && itemsCount <= finish, 'expected #{this} to have a ' + descriptor + ' within ' + range, 'expected #{this} to not have a ' + descriptor + ' within ' + range);
        }
        else {
            this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
        }
    });
    /**
     * ### .instanceof(constructor[, msg])
     *
     * Asserts that the target is an instance of the given `constructor`.
     *
     *     function Cat () { }
     *
     *     expect(new Cat()).to.be.an.instanceof(Cat);
     *     expect([1, 2]).to.be.an.instanceof(Array);
     *
     * Add `.not` earlier in the chain to negate `.instanceof`.
     *
     *     expect({a: 1}).to.not.be.an.instanceof(Array);
     *
     * `.instanceof` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
     *
     * Due to limitations in ES5, `.instanceof` may not always work as expected
     * when using a transpiler such as Babel or TypeScript. In particular, it may
     * produce unexpected results when subclassing built-in object such as
     * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
     *
     * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
     * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
     *
     * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
     *
     * @name instanceof
     * @param {Constructor} constructor
     * @param {String} msg _optional_
     * @alias instanceOf
     * @namespace BDD
     * @api public
     */
    function assertInstanceOf(constructor, msg) {
        if (msg)
            flag(this, 'message', msg);
        var target = flag(this, 'object');
        var ssfi = flag(this, 'ssfi');
        var flagMsg = flag(this, 'message');
        try {
            var isInstanceOf = target instanceof constructor;
        }
        catch (err) {
            if (err instanceof TypeError) {
                flagMsg = flagMsg ? flagMsg + ': ' : '';
                throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but '
                    + _.type(constructor) + ' was given.', undefined, ssfi);
            }
            throw err;
        }
        var name = _.getName(constructor);
        if (name === null) {
            name = 'an unnamed constructor';
        }
        this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
    }
    ;
    Assertion.addMethod('instanceof', assertInstanceOf);
    Assertion.addMethod('instanceOf', assertInstanceOf);
    /**
     * ### .property(name[, val[, msg]])
     *
     * Asserts that the target has a property with the given key `name`.
     *
     *     expect({a: 1}).to.have.property('a');
     *
     * When `val` is provided, `.property` also asserts that the property's value
     * is equal to the given `val`.
     *
     *     expect({a: 1}).to.have.property('a', 1);
     *
     * By default, strict (`===`) equality is used. Add `.deep` earlier in the
     * chain to use deep equality instead. See the `deep-eql` project page for
     * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
     *
     *     // Target object deeply (but not strictly) has property `x: {a: 1}`
     *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
     *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
     *
     * The target's enumerable and non-enumerable properties are always included
     * in the search. By default, both own and inherited properties are included.
     * Add `.own` earlier in the chain to exclude inherited properties from the
     * search.
     *
     *     Object.prototype.b = 2;
     *
     *     expect({a: 1}).to.have.own.property('a');
     *     expect({a: 1}).to.have.own.property('a', 1);
     *     expect({a: 1}).to.have.property('b');
     *     expect({a: 1}).to.not.have.own.property('b');
     *
     * `.deep` and `.own` can be combined.
     *
     *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
     *
     * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
     * referencing nested properties.
     *
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
     *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
     *
     * If `.` or `[]` are part of an actual property name, they can be escaped by
     * adding two backslashes before them.
     *
     *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
     *
     * `.deep` and `.nested` can be combined.
     *
     *     expect({a: {b: [{c: 3}]}})
     *       .to.have.deep.nested.property('a.b[0]', {c: 3});
     *
     * `.own` and `.nested` cannot be combined.
     *
     * Add `.not` earlier in the chain to negate `.property`.
     *
     *     expect({a: 1}).to.not.have.property('b');
     *
     * However, it's dangerous to negate `.property` when providing `val`. The
     * problem is that it creates uncertain expectations by asserting that the
     * target either doesn't have a property with the given key `name`, or that it
     * does have a property with the given key `name` but its value isn't equal to
     * the given `val`. It's often best to identify the exact output that's
     * expected, and then write an assertion that only accepts that exact output.
     *
     * When the target isn't expected to have a property with the given key
     * `name`, it's often best to assert exactly that.
     *
     *     expect({b: 2}).to.not.have.property('a'); // Recommended
     *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
     *
     * When the target is expected to have a property with the given key `name`,
     * it's often best to assert that the property has its expected value, rather
     * than asserting that it doesn't have one of many unexpected values.
     *
     *     expect({a: 3}).to.have.property('a', 3); // Recommended
     *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
     *
     * `.property` changes the target of any assertions that follow in the chain
     * to be the value of the property from the original target object.
     *
     *     expect({a: 1}).to.have.property('a').that.is.a('number');
     *
     * `.property` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing `val`, only use the
     * second form.
     *
     *     // Recommended
     *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
     *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
     *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
     *
     *     // Not recommended
     *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
     *
     * The above assertion isn't the same thing as not providing `val`. Instead,
     * it's asserting that the target object has a `b` property that's equal to
     * `undefined`.
     *
     * The assertions `.ownProperty` and `.haveOwnProperty` can be used
     * interchangeably with `.own.property`.
     *
     * @name property
     * @param {String} name
     * @param {Mixed} val (optional)
     * @param {String} msg _optional_
     * @returns value of property for chaining
     * @namespace BDD
     * @api public
     */
    function assertProperty(name, val, msg) {
        if (msg)
            flag(this, 'message', msg);
        var isNested = flag(this, 'nested'), isOwn = flag(this, 'own'), flagMsg = flag(this, 'message'), obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), nameType = typeof name;
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        if (isNested) {
            if (nameType !== 'string') {
                throw new AssertionError(flagMsg + 'the argument to property must be a string when using nested syntax', undefined, ssfi);
            }
        }
        else {
            if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {
                throw new AssertionError(flagMsg + 'the argument to property must be a string, number, or symbol', undefined, ssfi);
            }
        }
        if (isNested && isOwn) {
            throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
        }
        if (obj === null || obj === undefined) {
            throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
        }
        var isDeep = flag(this, 'deep'), negate = flag(this, 'negate'), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
        var descriptor = '';
        if (isDeep)
            descriptor += 'deep ';
        if (isOwn)
            descriptor += 'own ';
        if (isNested)
            descriptor += 'nested ';
        descriptor += 'property ';
        var hasProperty;
        if (isOwn)
            hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
        else if (isNested)
            hasProperty = pathInfo.exists;
        else
            hasProperty = _.hasProperty(obj, name);
        // When performing a negated assertion for both name and val, merely having
        // a property with the given name isn't enough to cause the assertion to
        // fail. It must both have a property with the given name, and the value of
        // that property must equal the given val. Therefore, skip this assertion in
        // favor of the next.
        if (!negate || arguments.length === 1) {
            this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
        }
        if (arguments.length > 1) {
            this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
        }
        flag(this, 'object', value);
    }
    Assertion.addMethod('property', assertProperty);
    function assertOwnProperty(name, value, msg) {
        flag(this, 'own', true);
        assertProperty.apply(this, arguments);
    }
    Assertion.addMethod('ownProperty', assertOwnProperty);
    Assertion.addMethod('haveOwnProperty', assertOwnProperty);
    /**
     * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
     *
     * Asserts that the target has its own property descriptor with the given key
     * `name`. Enumerable and non-enumerable properties are included in the
     * search.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
     *
     * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
     * the property's descriptor is deeply equal to the given `descriptor`. See
     * the `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
     *
     *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
     *
     * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
     * a `descriptor`. The problem is that it creates uncertain expectations by
     * asserting that the target either doesn't have a property descriptor with
     * the given key `name`, or that it does have a property descriptor with the
     * given key `name` but its not deeply equal to the given `descriptor`. It's
     * often best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to have a property descriptor with the given
     * key `name`, it's often best to assert exactly that.
     *
     *     // Recommended
     *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
     *
     *     // Not recommended
     *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * When the target is expected to have a property descriptor with the given
     * key `name`, it's often best to assert that the property has its expected
     * descriptor, rather than asserting that it doesn't have one of many
     * unexpected descriptors.
     *
     *     // Recommended
     *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 3,
     *     });
     *
     *     // Not recommended
     *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 1,
     *     });
     *
     * `.ownPropertyDescriptor` changes the target of any assertions that follow
     * in the chain to be the value of the property descriptor from the original
     * target object.
     *
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
     *       .that.has.property('enumerable', true);
     *
     * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
     * custom error message to show when the assertion fails. The message can also
     * be given as the second argument to `expect`. When not providing
     * `descriptor`, only use the second form.
     *
     *     // Recommended
     *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 2,
     *     }, 'nooo why fail??');
     *
     *     // Recommended
     *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
     *       configurable: true,
     *       enumerable: true,
     *       writable: true,
     *       value: 2,
     *     });
     *
     *     // Recommended
     *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
     *
     *     // Not recommended
     *     expect({a: 1})
     *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
     *
     * The above assertion isn't the same thing as not providing `descriptor`.
     * Instead, it's asserting that the target object has a `b` property
     * descriptor that's deeply equal to `undefined`.
     *
     * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
     * `.ownPropertyDescriptor`.
     *
     * @name ownPropertyDescriptor
     * @alias haveOwnPropertyDescriptor
     * @param {String} name
     * @param {Object} descriptor _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertOwnPropertyDescriptor(name, descriptor, msg) {
        if (typeof descriptor === 'string') {
            msg = descriptor;
            descriptor = null;
        }
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object');
        var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
        if (actualDescriptor && descriptor) {
            this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
        }
        else {
            this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
        }
        flag(this, 'object', actualDescriptor);
    }
    Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
    Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
    /**
     * ### .lengthOf(n[, msg])
     *
     * Asserts that the target's `length` or `size` is equal to the given number
     * `n`.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(3);
     *     expect('foo').to.have.lengthOf(3);
     *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);
     *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);
     *
     * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
     * best to assert that the target's `length` property is equal to its expected
     * value, rather than not equal to one of many unexpected values.
     *
     *     expect('foo').to.have.lengthOf(3); // Recommended
     *     expect('foo').to.not.have.lengthOf(4); // Not recommended
     *
     * `.lengthOf` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
     *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
     *
     * `.lengthOf` can also be used as a language chain, causing all `.above`,
     * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
     * chain to use the target's `length` property as the target. However, it's
     * often best to assert that the target's `length` property is equal to its
     * expected length, rather than asserting that its `length` property falls
     * within some range of values.
     *
     *     // Recommended
     *     expect([1, 2, 3]).to.have.lengthOf(3);
     *
     *     // Not recommended
     *     expect([1, 2, 3]).to.have.lengthOf.above(2);
     *     expect([1, 2, 3]).to.have.lengthOf.below(4);
     *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
     *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
     *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
     *
     * Due to a compatibility issue, the alias `.length` can't be chained directly
     * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
     * interchangeably with `.lengthOf` in every situation. It's recommended to
     * always use `.lengthOf` instead of `.length`.
     *
     *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
     *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
     *
     * @name lengthOf
     * @alias length
     * @param {Number} n
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertLengthChain() {
        flag(this, 'doLength', true);
    }
    function assertLength(n, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi'), descriptor = 'length', itemsCount;
        switch (objType) {
            case 'map':
            case 'set':
                descriptor = 'size';
                itemsCount = obj.size;
                break;
            default:
                new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
                itemsCount = obj.length;
        }
        this.assert(itemsCount == n, 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' of #{act}', n, itemsCount);
    }
    Assertion.addChainableMethod('length', assertLength, assertLengthChain);
    Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
    /**
     * ### .match(re[, msg])
     *
     * Asserts that the target matches the given regular expression `re`.
     *
     *     expect('foobar').to.match(/^foo/);
     *
     * Add `.not` earlier in the chain to negate `.match`.
     *
     *     expect('foobar').to.not.match(/taco/);
     *
     * `.match` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect('foobar').to.match(/taco/, 'nooo why fail??');
     *     expect('foobar', 'nooo why fail??').to.match(/taco/);
     *
     * The alias `.matches` can be used interchangeably with `.match`.
     *
     * @name match
     * @alias matches
     * @param {RegExp} re
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertMatch(re, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object');
        this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
    }
    Assertion.addMethod('match', assertMatch);
    Assertion.addMethod('matches', assertMatch);
    /**
     * ### .string(str[, msg])
     *
     * Asserts that the target string contains the given substring `str`.
     *
     *     expect('foobar').to.have.string('bar');
     *
     * Add `.not` earlier in the chain to negate `.string`.
     *
     *     expect('foobar').to.not.have.string('taco');
     *
     * `.string` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect('foobar').to.have.string('taco', 'nooo why fail??');
     *     expect('foobar', 'nooo why fail??').to.have.string('taco');
     *
     * @name string
     * @param {String} str
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    Assertion.addMethod('string', function (str, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(obj, flagMsg, ssfi, true).is.a('string');
        this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
    });
    /**
     * ### .keys(key1[, key2[, ...]])
     *
     * Asserts that the target object, array, map, or set has the given keys. Only
     * the target's own inherited properties are included in the search.
     *
     * When the target is an object or array, keys can be provided as one or more
     * string arguments, a single array argument, or a single object argument. In
     * the latter case, only the keys in the given object matter; the values are
     * ignored.
     *
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *     expect(['x', 'y']).to.have.all.keys(0, 1);
     *
     *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
     *     expect(['x', 'y']).to.have.all.keys([0, 1]);
     *
     *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
     *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
     *
     * When the target is a map or set, each key must be provided as a separate
     * argument.
     *
     *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
     *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
     *
     * Because `.keys` does different things based on the target's type, it's
     * important to check the target's type before using `.keys`. See the `.a` doc
     * for info on testing a target's type.
     *
     *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
     *
     * By default, strict (`===`) equality is used to compare keys of maps and
     * sets. Add `.deep` earlier in the chain to use deep equality instead. See
     * the `deep-eql` project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target set deeply (but not strictly) has key `{a: 1}`
     *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
     *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
     *
     * By default, the target must have all of the given keys and no more. Add
     * `.any` earlier in the chain to only require that the target have at least
     * one of the given keys. Also, add `.not` earlier in the chain to negate
     * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
     * `.all` when asserting `.keys` without negation.
     *
     * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
     * exactly what's expected of the output, whereas `.not.all.keys` creates
     * uncertain expectations.
     *
     *     // Recommended; asserts that target doesn't have any of the given keys
     *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
     *
     *     // Not recommended; asserts that target doesn't have all of the given
     *     // keys but may or may not have some of them
     *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
     *
     * When asserting `.keys` without negation, `.all` is preferred because
     * `.all.keys` asserts exactly what's expected of the output, whereas
     * `.any.keys` creates uncertain expectations.
     *
     *     // Recommended; asserts that target has all the given keys
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
     *
     *     // Not recommended; asserts that target has at least one of the given
     *     // keys but may or may not have more of them
     *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
     *
     * Note that `.all` is used by default when neither `.all` nor `.any` appear
     * earlier in the chain. However, it's often best to add `.all` anyway because
     * it improves readability.
     *
     *     // Both assertions are identical
     *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
     *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
     *
     * Add `.include` earlier in the chain to require that the target's keys be a
     * superset of the expected keys, rather than identical sets.
     *
     *     // Target object's keys are a superset of ['a', 'b'] but not identical
     *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
     *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
     *
     * However, if `.any` and `.include` are combined, only the `.any` takes
     * effect. The `.include` is ignored in this case.
     *
     *     // Both assertions are identical
     *     expect({a: 1}).to.have.any.keys('a', 'b');
     *     expect({a: 1}).to.include.any.keys('a', 'b');
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
     *
     * The alias `.key` can be used interchangeably with `.keys`.
     *
     * @name keys
     * @alias key
     * @param {...String|Array|Object} keys
     * @namespace BDD
     * @api public
     */
    function assertKeys(keys) {
        var obj = flag(this, 'object'), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, 'ssfi'), isDeep = flag(this, 'deep'), str, deepStr = '', actual, ok = true, flagMsg = flag(this, 'message');
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';
        if (objType === 'Map' || objType === 'Set') {
            deepStr = isDeep ? 'deeply ' : '';
            actual = [];
            // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
            obj.forEach(function (val, key) { actual.push(key); });
            if (keysType !== 'Array') {
                keys = Array.prototype.slice.call(arguments);
            }
        }
        else {
            actual = _.getOwnEnumerableProperties(obj);
            switch (keysType) {
                case 'Array':
                    if (arguments.length > 1) {
                        throw new AssertionError(mixedArgsMsg, undefined, ssfi);
                    }
                    break;
                case 'Object':
                    if (arguments.length > 1) {
                        throw new AssertionError(mixedArgsMsg, undefined, ssfi);
                    }
                    keys = Object.keys(keys);
                    break;
                default:
                    keys = Array.prototype.slice.call(arguments);
            }
            // Only stringify non-Symbols because Symbols would become "Symbol()"
            keys = keys.map(function (val) {
                return typeof val === 'symbol' ? val : String(val);
            });
        }
        if (!keys.length) {
            throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
        }
        var len = keys.length, any = flag(this, 'any'), all = flag(this, 'all'), expected = keys;
        if (!any && !all) {
            all = true;
        }
        // Has any
        if (any) {
            ok = expected.some(function (expectedKey) {
                return actual.some(function (actualKey) {
                    if (isDeep) {
                        return _.eql(expectedKey, actualKey);
                    }
                    else {
                        return expectedKey === actualKey;
                    }
                });
            });
        }
        // Has all
        if (all) {
            ok = expected.every(function (expectedKey) {
                return actual.some(function (actualKey) {
                    if (isDeep) {
                        return _.eql(expectedKey, actualKey);
                    }
                    else {
                        return expectedKey === actualKey;
                    }
                });
            });
            if (!flag(this, 'contains')) {
                ok = ok && keys.length == actual.length;
            }
        }
        // Key string
        if (len > 1) {
            keys = keys.map(function (key) {
                return _.inspect(key);
            });
            var last = keys.pop();
            if (all) {
                str = keys.join(', ') + ', and ' + last;
            }
            if (any) {
                str = keys.join(', ') + ', or ' + last;
            }
        }
        else {
            str = _.inspect(keys[0]);
        }
        // Form
        str = (len > 1 ? 'keys ' : 'key ') + str;
        // Have / include
        str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
        // Assertion
        this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
    }
    Assertion.addMethod('keys', assertKeys);
    Assertion.addMethod('key', assertKeys);
    /**
     * ### .throw([errorLike], [errMsgMatcher], [msg])
     *
     * When no arguments are provided, `.throw` invokes the target function and
     * asserts that an error is thrown.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw();
     *
     * When one argument is provided, and it's an error constructor, `.throw`
     * invokes the target function and asserts that an error is thrown that's an
     * instance of that error constructor.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(TypeError);
     *
     * When one argument is provided, and it's an error instance, `.throw` invokes
     * the target function and asserts that an error is thrown that's strictly
     * (`===`) equal to that error instance.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(err);
     *
     * When one argument is provided, and it's a string, `.throw` invokes the
     * target function and asserts that an error is thrown with a message that
     * contains that string.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw('salmon');
     *
     * When one argument is provided, and it's a regular expression, `.throw`
     * invokes the target function and asserts that an error is thrown with a
     * message that matches that regular expression.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(/salmon/);
     *
     * When two arguments are provided, and the first is an error instance or
     * constructor, and the second is a string or regular expression, `.throw`
     * invokes the function and asserts that an error is thrown that fulfills both
     * conditions as described above.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(TypeError, 'salmon');
     *     expect(badFn).to.throw(TypeError, /salmon/);
     *     expect(badFn).to.throw(err, 'salmon');
     *     expect(badFn).to.throw(err, /salmon/);
     *
     * Add `.not` earlier in the chain to negate `.throw`.
     *
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.not.throw();
     *
     * However, it's dangerous to negate `.throw` when providing any arguments.
     * The problem is that it creates uncertain expectations by asserting that the
     * target either doesn't throw an error, or that it throws an error but of a
     * different type than the given type, or that it throws an error of the given
     * type but with a message that doesn't include the given string. It's often
     * best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to throw an error, it's often best to assert
     * exactly that.
     *
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.not.throw(); // Recommended
     *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
     *
     * When the target is expected to throw an error, it's often best to assert
     * that the error is of its expected type, and has a message that includes an
     * expected string, rather than asserting that it doesn't have one of many
     * unexpected types, and doesn't have a message that includes some string.
     *
     *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
     *
     *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
     *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
     *
     * `.throw` changes the target of any assertions that follow in the chain to
     * be the error object that's thrown.
     *
     *     var err = new TypeError('Illegal salmon!');
     *     err.code = 42;
     *     var badFn = function () { throw err; };
     *
     *     expect(badFn).to.throw(TypeError).with.property('code', 42);
     *
     * `.throw` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`. When not providing two arguments, always use
     * the second form.
     *
     *     var goodFn = function () {};
     *
     *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
     *     expect(goodFn, 'nooo why fail??').to.throw();
     *
     * Due to limitations in ES5, `.throw` may not always work as expected when
     * using a transpiler such as Babel or TypeScript. In particular, it may
     * produce unexpected results when subclassing the built-in `Error` object and
     * then passing the subclassed constructor to `.throw`. See your transpiler's
     * docs for details:
     *
     * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
     * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
     *
     * Beware of some common mistakes when using the `throw` assertion. One common
     * mistake is to accidentally invoke the function yourself instead of letting
     * the `throw` assertion invoke the function for you. For example, when
     * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
     * the target for the assertion.
     *
     *     expect(fn).to.throw();     // Good! Tests `fn` as desired
     *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
     *
     * If you need to assert that your function `fn` throws when passed certain
     * arguments, then wrap a call to `fn` inside of another function.
     *
     *     expect(function () { fn(42); }).to.throw();  // Function expression
     *     expect(() => fn(42)).to.throw();             // ES6 arrow function
     *
     * Another common mistake is to provide an object method (or any stand-alone
     * function that relies on `this`) as the target of the assertion. Doing so is
     * problematic because the `this` context will be lost when the function is
     * invoked by `.throw`; there's no way for it to know what `this` is supposed
     * to be. There are two ways around this problem. One solution is to wrap the
     * method or function call inside of another function. Another solution is to
     * use `bind`.
     *
     *     expect(function () { cat.meow(); }).to.throw();  // Function expression
     *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
     *     expect(cat.meow.bind(cat)).to.throw();           // Bind
     *
     * Finally, it's worth mentioning that it's a best practice in JavaScript to
     * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
     * `TypeError`, and user-defined objects that extend `Error`. No other type of
     * value will generate a stack trace when initialized. With that said, the
     * `throw` assertion does technically support any type of value being thrown,
     * not just `Error` and its derivatives.
     *
     * The aliases `.throws` and `.Throw` can be used interchangeably with
     * `.throw`.
     *
     * @name throw
     * @alias throws
     * @alias Throw
     * @param {Error|ErrorConstructor} errorLike
     * @param {String|RegExp} errMsgMatcher error message
     * @param {String} msg _optional_
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @returns error for chaining (null if no error)
     * @namespace BDD
     * @api public
     */
    function assertThrows(errorLike, errMsgMatcher, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), ssfi = flag(this, 'ssfi'), flagMsg = flag(this, 'message'), negate = flag(this, 'negate') || false;
        new Assertion(obj, flagMsg, ssfi, true).is.a('function');
        if (errorLike instanceof RegExp || typeof errorLike === 'string') {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        var caughtErr;
        try {
            obj();
        }
        catch (err) {
            caughtErr = err;
        }
        // If we have the negate flag enabled and at least one valid argument it means we do expect an error
        // but we want it to match a given set of criteria
        var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
        // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
        // See Issue #551 and PR #683@GitHub
        var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
        var errorLikeFail = false;
        var errMsgMatcherFail = false;
        // Checking if error was thrown
        if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
            // We need this to display results correctly according to their types
            var errorLikeString = 'an error';
            if (errorLike instanceof Error) {
                errorLikeString = '#{exp}';
            }
            else if (errorLike) {
                errorLikeString = _.checkError.getConstructorName(errorLike);
            }
            this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), (caughtErr instanceof Error ?
                caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&
                _.checkError.getConstructorName(caughtErr))));
        }
        if (errorLike && caughtErr) {
            // We should compare instances only if `errorLike` is an instance of `Error`
            if (errorLike instanceof Error) {
                var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
                if (isCompatibleInstance === negate) {
                    // These checks were created to ensure we won't fail too soon when we've got both args and a negate
                    // See Issue #551 and PR #683@GitHub
                    if (everyArgIsDefined && negate) {
                        errorLikeFail = true;
                    }
                    else {
                        this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
                    }
                }
            }
            var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
            if (isCompatibleConstructor === negate) {
                if (everyArgIsDefined && negate) {
                    errorLikeFail = true;
                }
                else {
                    this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
                }
            }
        }
        if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
            // Here we check compatible messages
            var placeholder = 'including';
            if (errMsgMatcher instanceof RegExp) {
                placeholder = 'matching';
            }
            var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
            if (isCompatibleMessage === negate) {
                if (everyArgIsDefined && negate) {
                    errMsgMatcherFail = true;
                }
                else {
                    this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
                }
            }
        }
        // If both assertions failed and both should've matched we throw an error
        if (errorLikeFail && errMsgMatcherFail) {
            this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike)), (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr)));
        }
        flag(this, 'object', caughtErr);
    }
    ;
    Assertion.addMethod('throw', assertThrows);
    Assertion.addMethod('throws', assertThrows);
    Assertion.addMethod('Throw', assertThrows);
    /**
     * ### .respondTo(method[, msg])
     *
     * When the target is a non-function object, `.respondTo` asserts that the
     * target has a method with the given name `method`. The method can be own or
     * inherited, and it can be enumerable or non-enumerable.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(new Cat()).to.respondTo('meow');
     *
     * When the target is a function, `.respondTo` asserts that the target's
     * `prototype` property has a method with the given name `method`. Again, the
     * method can be own or inherited, and it can be enumerable or non-enumerable.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(Cat).to.respondTo('meow');
     *
     * Add `.itself` earlier in the chain to force `.respondTo` to treat the
     * target as a non-function object, even if it's a function. Thus, it asserts
     * that the target has a method with the given name `method`, rather than
     * asserting that the target's `prototype` property has a method with the
     * given name `method`.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *     Cat.hiss = function () {};
     *
     *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
     *
     * When not adding `.itself`, it's important to check the target's type before
     * using `.respondTo`. See the `.a` doc for info on checking a target's type.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *
     *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
     *
     * Add `.not` earlier in the chain to negate `.respondTo`.
     *
     *     function Dog () {}
     *     Dog.prototype.bark = function () {};
     *
     *     expect(new Dog()).to.not.respondTo('meow');
     *
     * `.respondTo` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect({}).to.respondTo('meow', 'nooo why fail??');
     *     expect({}, 'nooo why fail??').to.respondTo('meow');
     *
     * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
     *
     * @name respondTo
     * @alias respondsTo
     * @param {String} method
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function respondTo(method, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), itself = flag(this, 'itself'), context = ('function' === typeof obj && !itself)
            ? obj.prototype[method]
            : obj[method];
        this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
    }
    Assertion.addMethod('respondTo', respondTo);
    Assertion.addMethod('respondsTo', respondTo);
    /**
     * ### .itself
     *
     * Forces all `.respondTo` assertions that follow in the chain to behave as if
     * the target is a non-function object, even if it's a function. Thus, it
     * causes `.respondTo` to assert that the target has a method with the given
     * name, rather than asserting that the target's `prototype` property has a
     * method with the given name.
     *
     *     function Cat () {}
     *     Cat.prototype.meow = function () {};
     *     Cat.hiss = function () {};
     *
     *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
     *
     * @name itself
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('itself', function () {
        flag(this, 'itself', true);
    });
    /**
     * ### .satisfy(matcher[, msg])
     *
     * Invokes the given `matcher` function with the target being passed as the
     * first argument, and asserts that the value returned is truthy.
     *
     *     expect(1).to.satisfy(function(num) {
     *       return num > 0;
     *     });
     *
     * Add `.not` earlier in the chain to negate `.satisfy`.
     *
     *     expect(1).to.not.satisfy(function(num) {
     *       return num > 2;
     *     });
     *
     * `.satisfy` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1).to.satisfy(function(num) {
     *       return num > 2;
     *     }, 'nooo why fail??');
     *
     *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
     *       return num > 2;
     *     });
     *
     * The alias `.satisfies` can be used interchangeably with `.satisfy`.
     *
     * @name satisfy
     * @alias satisfies
     * @param {Function} matcher
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function satisfy(matcher, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object');
        var result = matcher(obj);
        this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
    }
    Assertion.addMethod('satisfy', satisfy);
    Assertion.addMethod('satisfies', satisfy);
    /**
     * ### .closeTo(expected, delta[, msg])
     *
     * Asserts that the target is a number that's within a given +/- `delta` range
     * of the given number `expected`. However, it's often best to assert that the
     * target is equal to its expected value.
     *
     *     // Recommended
     *     expect(1.5).to.equal(1.5);
     *
     *     // Not recommended
     *     expect(1.5).to.be.closeTo(1, 0.5);
     *     expect(1.5).to.be.closeTo(2, 0.5);
     *     expect(1.5).to.be.closeTo(1, 1);
     *
     * Add `.not` earlier in the chain to negate `.closeTo`.
     *
     *     expect(1.5).to.equal(1.5); // Recommended
     *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
     *
     * `.closeTo` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
     *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
     *
     * The alias `.approximately` can be used interchangeably with `.closeTo`.
     *
     * @name closeTo
     * @alias approximately
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function closeTo(expected, delta, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(obj, flagMsg, ssfi, true).is.a('number');
        if (typeof expected !== 'number' || typeof delta !== 'number') {
            flagMsg = flagMsg ? flagMsg + ': ' : '';
            throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
        }
        this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
    }
    Assertion.addMethod('closeTo', closeTo);
    Assertion.addMethod('approximately', closeTo);
    // Note: Duplicates are ignored if testing for inclusion instead of sameness.
    function isSubsetOf(subset, superset, cmp, contains, ordered) {
        if (!contains) {
            if (subset.length !== superset.length)
                return false;
            superset = superset.slice();
        }
        return subset.every(function (elem, idx) {
            if (ordered)
                return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
            if (!cmp) {
                var matchIdx = superset.indexOf(elem);
                if (matchIdx === -1)
                    return false;
                // Remove match from superset so not counted twice if duplicate in subset.
                if (!contains)
                    superset.splice(matchIdx, 1);
                return true;
            }
            return superset.some(function (elem2, matchIdx) {
                if (!cmp(elem, elem2))
                    return false;
                // Remove match from superset so not counted twice if duplicate in subset.
                if (!contains)
                    superset.splice(matchIdx, 1);
                return true;
            });
        });
    }
    /**
     * ### .members(set[, msg])
     *
     * Asserts that the target array has the same members as the given array
     * `set`.
     *
     *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
     *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
     *
     * By default, members are compared using strict (`===`) equality. Add `.deep`
     * earlier in the chain to use deep equality instead. See the `deep-eql`
     * project page for info on the deep equality algorithm:
     * https://github.com/chaijs/deep-eql.
     *
     *     // Target array deeply (but not strictly) has member `{a: 1}`
     *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
     *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
     *
     * By default, order doesn't matter. Add `.ordered` earlier in the chain to
     * require that members appear in the same order.
     *
     *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
     *     expect([1, 2, 3]).to.have.members([2, 1, 3])
     *       .but.not.ordered.members([2, 1, 3]);
     *
     * By default, both arrays must be the same size. Add `.include` earlier in
     * the chain to require that the target's members be a superset of the
     * expected members. Note that duplicates are ignored in the subset when
     * `.include` is added.
     *
     *     // Target array is a superset of [1, 2] but not identical
     *     expect([1, 2, 3]).to.include.members([1, 2]);
     *     expect([1, 2, 3]).to.not.have.members([1, 2]);
     *
     *     // Duplicates in the subset are ignored
     *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
     *
     * `.deep`, `.ordered`, and `.include` can all be combined. However, if
     * `.include` and `.ordered` are combined, the ordering begins at the start of
     * both arrays.
     *
     *     expect([{a: 1}, {b: 2}, {c: 3}])
     *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
     *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
     *
     * Add `.not` earlier in the chain to negate `.members`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the target array doesn't have all of the same members as
     * the given array `set` but may or may not have some of them. It's often best
     * to identify the exact output that's expected, and then write an assertion
     * that only accepts that exact output.
     *
     *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
     *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
     *
     * `.members` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`.
     *
     *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
     *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
     *
     * @name members
     * @param {Array} set
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    Assertion.addMethod('members', function (subset, msg) {
        if (msg)
            flag(this, 'message', msg);
        var obj = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
        new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
        var contains = flag(this, 'contains');
        var ordered = flag(this, 'ordered');
        var subject, failMsg, failNegateMsg;
        if (contains) {
            subject = ordered ? 'an ordered superset' : 'a superset';
            failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
            failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
        }
        else {
            subject = ordered ? 'ordered members' : 'members';
            failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
            failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
        }
        var cmp = flag(this, 'deep') ? _.eql : undefined;
        this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
    });
    /**
     * ### .oneOf(list[, msg])
     *
     * Asserts that the target is a member of the given array `list`. However,
     * it's often best to assert that the target is equal to its expected value.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
     *
     * Comparisons are performed using strict (`===`) equality.
     *
     * Add `.not` earlier in the chain to negate `.oneOf`.
     *
     *     expect(1).to.equal(1); // Recommended
     *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
     *
     * `.oneOf` accepts an optional `msg` argument which is a custom error message
     * to show when the assertion fails. The message can also be given as the
     * second argument to `expect`.
     *
     *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
     *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
     *
     * @name oneOf
     * @param {Array<*>} list
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function oneOf(list, msg) {
        if (msg)
            flag(this, 'message', msg);
        var expected = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
        this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
    }
    Assertion.addMethod('oneOf', oneOf);
    /**
     * ### .change(subject[, prop[, msg]])
     *
     * When one argument is provided, `.change` asserts that the given function
     * `subject` returns a different value when it's invoked before the target
     * function compared to when it's invoked afterward. However, it's often best
     * to assert that `subject` is equal to its expected value.
     *
     *     var dots = ''
     *       , addDot = function () { dots += '.'; }
     *       , getDots = function () { return dots; };
     *
     *     // Recommended
     *     expect(getDots()).to.equal('');
     *     addDot();
     *     expect(getDots()).to.equal('.');
     *
     *     // Not recommended
     *     expect(addDot).to.change(getDots);
     *
     * When two arguments are provided, `.change` asserts that the value of the
     * given object `subject`'s `prop` property is different before invoking the
     * target function compared to afterward.
     *
     *     var myObj = {dots: ''}
     *       , addDot = function () { myObj.dots += '.'; };
     *
     *     // Recommended
     *     expect(myObj).to.have.property('dots', '');
     *     addDot();
     *     expect(myObj).to.have.property('dots', '.');
     *
     *     // Not recommended
     *     expect(addDot).to.change(myObj, 'dots');
     *
     * Strict (`===`) equality is used to compare before and after values.
     *
     * Add `.not` earlier in the chain to negate `.change`.
     *
     *     var dots = ''
     *       , noop = function () {}
     *       , getDots = function () { return dots; };
     *
     *     expect(noop).to.not.change(getDots);
     *
     *     var myObj = {dots: ''}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'dots');
     *
     * `.change` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {dots: ''}
     *       , addDot = function () { myObj.dots += '.'; };
     *
     *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
     *
     *     var dots = ''
     *       , addDot = function () { dots += '.'; }
     *       , getDots = function () { return dots; };
     *
     *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
     *
     * `.change` also causes all `.by` assertions that follow in the chain to
     * assert how much a numeric subject was increased or decreased by. However,
     * it's dangerous to use `.change.by`. The problem is that it creates
     * uncertain expectations by asserting that the subject either increases by
     * the given delta, or that it decreases by the given delta. It's often best
     * to identify the exact output that's expected, and then write an assertion
     * that only accepts that exact output.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; }
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     * The alias `.changes` can be used interchangeably with `.change`.
     *
     * @name change
     * @alias changes
     * @param {String} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertChanges(subject, prop, msg) {
        if (msg)
            flag(this, 'message', msg);
        var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(fn, flagMsg, ssfi, true).is.a('function');
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a('function');
            initial = subject();
        }
        else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
        // This gets flagged because of the .by(delta) assertion
        flag(this, 'deltaMsgObj', msgObj);
        flag(this, 'initialDeltaValue', initial);
        flag(this, 'finalDeltaValue', final);
        flag(this, 'deltaBehavior', 'change');
        flag(this, 'realDelta', final !== initial);
        this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
    }
    Assertion.addMethod('change', assertChanges);
    Assertion.addMethod('changes', assertChanges);
    /**
     * ### .increase(subject[, prop[, msg]])
     *
     * When one argument is provided, `.increase` asserts that the given function
     * `subject` returns a greater number when it's invoked after invoking the
     * target function compared to when it's invoked beforehand. `.increase` also
     * causes all `.by` assertions that follow in the chain to assert how much
     * greater of a number is returned. It's often best to assert that the return
     * value increased by the expected amount, rather than asserting it increased
     * by any amount.
     *
     *     var val = 1
     *       , addTwo = function () { val += 2; }
     *       , getVal = function () { return val; };
     *
     *     expect(addTwo).to.increase(getVal).by(2); // Recommended
     *     expect(addTwo).to.increase(getVal); // Not recommended
     *
     * When two arguments are provided, `.increase` asserts that the value of the
     * given object `subject`'s `prop` property is greater after invoking the
     * target function compared to beforehand.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.increase`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either decreases, or that it stays the same.
     * It's often best to identify the exact output that's expected, and then
     * write an assertion that only accepts that exact output.
     *
     * When the subject is expected to decrease, it's often best to assert that it
     * decreased by the expected amount.
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
     *
     * When the subject is expected to stay the same, it's often best to assert
     * exactly that.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'val'); // Recommended
     *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
     *
     * `.increase` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
     *
     *     var val = 1
     *       , noop = function () {}
     *       , getVal = function () { return val; };
     *
     *     expect(noop, 'nooo why fail??').to.increase(getVal);
     *
     * The alias `.increases` can be used interchangeably with `.increase`.
     *
     * @name increase
     * @alias increases
     * @param {String|Function} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertIncreases(subject, prop, msg) {
        if (msg)
            flag(this, 'message', msg);
        var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(fn, flagMsg, ssfi, true).is.a('function');
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a('function');
            initial = subject();
        }
        else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        // Make sure that the target is a number
        new Assertion(initial, flagMsg, ssfi, true).is.a('number');
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
        flag(this, 'deltaMsgObj', msgObj);
        flag(this, 'initialDeltaValue', initial);
        flag(this, 'finalDeltaValue', final);
        flag(this, 'deltaBehavior', 'increase');
        flag(this, 'realDelta', final - initial);
        this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
    }
    Assertion.addMethod('increase', assertIncreases);
    Assertion.addMethod('increases', assertIncreases);
    /**
     * ### .decrease(subject[, prop[, msg]])
     *
     * When one argument is provided, `.decrease` asserts that the given function
     * `subject` returns a lesser number when it's invoked after invoking the
     * target function compared to when it's invoked beforehand. `.decrease` also
     * causes all `.by` assertions that follow in the chain to assert how much
     * lesser of a number is returned. It's often best to assert that the return
     * value decreased by the expected amount, rather than asserting it decreased
     * by any amount.
     *
     *     var val = 1
     *       , subtractTwo = function () { val -= 2; }
     *       , getVal = function () { return val; };
     *
     *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
     *     expect(subtractTwo).to.decrease(getVal); // Not recommended
     *
     * When two arguments are provided, `.decrease` asserts that the value of the
     * given object `subject`'s `prop` property is lesser after invoking the
     * target function compared to beforehand.
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.decrease`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either increases, or that it stays the same.
     * It's often best to identify the exact output that's expected, and then
     * write an assertion that only accepts that exact output.
     *
     * When the subject is expected to increase, it's often best to assert that it
     * increased by the expected amount.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
     *
     * When the subject is expected to stay the same, it's often best to assert
     * exactly that.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.not.change(myObj, 'val'); // Recommended
     *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
     *
     * `.decrease` accepts an optional `msg` argument which is a custom error
     * message to show when the assertion fails. The message can also be given as
     * the second argument to `expect`. When not providing two arguments, always
     * use the second form.
     *
     *     var myObj = {val: 1}
     *       , noop = function () {};
     *
     *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
     *
     *     var val = 1
     *       , noop = function () {}
     *       , getVal = function () { return val; };
     *
     *     expect(noop, 'nooo why fail??').to.decrease(getVal);
     *
     * The alias `.decreases` can be used interchangeably with `.decrease`.
     *
     * @name decrease
     * @alias decreases
     * @param {String|Function} subject
     * @param {String} prop name _optional_
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertDecreases(subject, prop, msg) {
        if (msg)
            flag(this, 'message', msg);
        var fn = flag(this, 'object'), flagMsg = flag(this, 'message'), ssfi = flag(this, 'ssfi');
        new Assertion(fn, flagMsg, ssfi, true).is.a('function');
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a('function');
            initial = subject();
        }
        else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        // Make sure that the target is a number
        new Assertion(initial, flagMsg, ssfi, true).is.a('number');
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
        flag(this, 'deltaMsgObj', msgObj);
        flag(this, 'initialDeltaValue', initial);
        flag(this, 'finalDeltaValue', final);
        flag(this, 'deltaBehavior', 'decrease');
        flag(this, 'realDelta', initial - final);
        this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
    }
    Assertion.addMethod('decrease', assertDecreases);
    Assertion.addMethod('decreases', assertDecreases);
    /**
     * ### .by(delta[, msg])
     *
     * When following an `.increase` assertion in the chain, `.by` asserts that
     * the subject of the `.increase` assertion increased by the given `delta`.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2);
     *
     * When following a `.decrease` assertion in the chain, `.by` asserts that the
     * subject of the `.decrease` assertion decreased by the given `delta`.
     *
     *     var myObj = {val: 1}
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
     *
     * When following a `.change` assertion in the chain, `.by` asserts that the
     * subject of the `.change` assertion either increased or decreased by the
     * given `delta`. However, it's dangerous to use `.change.by`. The problem is
     * that it creates uncertain expectations. It's often best to identify the
     * exact output that's expected, and then write an assertion that only accepts
     * that exact output.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; }
     *       , subtractTwo = function () { myObj.val -= 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
     *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
     *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
     *
     * Add `.not` earlier in the chain to negate `.by`. However, it's often best
     * to assert that the subject changed by its expected delta, rather than
     * asserting that it didn't change by one of countless unexpected deltas.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     // Recommended
     *     expect(addTwo).to.increase(myObj, 'val').by(2);
     *
     *     // Not recommended
     *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
     *
     * `.by` accepts an optional `msg` argument which is a custom error message to
     * show when the assertion fails. The message can also be given as the second
     * argument to `expect`.
     *
     *     var myObj = {val: 1}
     *       , addTwo = function () { myObj.val += 2; };
     *
     *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
     *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
     *
     * @name by
     * @param {Number} delta
     * @param {String} msg _optional_
     * @namespace BDD
     * @api public
     */
    function assertDelta(delta, msg) {
        if (msg)
            flag(this, 'message', msg);
        var msgObj = flag(this, 'deltaMsgObj');
        var initial = flag(this, 'initialDeltaValue');
        var final = flag(this, 'finalDeltaValue');
        var behavior = flag(this, 'deltaBehavior');
        var realDelta = flag(this, 'realDelta');
        var expression;
        if (behavior === 'change') {
            expression = Math.abs(final - initial) === Math.abs(delta);
        }
        else {
            expression = realDelta === Math.abs(delta);
        }
        this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
    }
    Assertion.addMethod('by', assertDelta);
    /**
     * ### .extensible
     *
     * Asserts that the target is extensible, which means that new properties can
     * be added to it. Primitives are never extensible.
     *
     *     expect({a: 1}).to.be.extensible;
     *
     * Add `.not` earlier in the chain to negate `.extensible`.
     *
     *     var nonExtensibleObject = Object.preventExtensions({})
     *       , sealedObject = Object.seal({})
     *       , frozenObject = Object.freeze({});
     *
     *     expect(nonExtensibleObject).to.not.be.extensible;
     *     expect(sealedObject).to.not.be.extensible;
     *     expect(frozenObject).to.not.be.extensible;
     *     expect(1).to.not.be.extensible;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect(1, 'nooo why fail??').to.be.extensible;
     *
     * @name extensible
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('extensible', function () {
        var obj = flag(this, 'object');
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
        // The following provides ES6 behavior for ES5 environments.
        var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
        this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
    });
    /**
     * ### .sealed
     *
     * Asserts that the target is sealed, which means that new properties can't be
     * added to it, and its existing properties can't be reconfigured or deleted.
     * However, it's possible that its existing properties can still be reassigned
     * to different values. Primitives are always sealed.
     *
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.freeze({});
     *
     *     expect(sealedObject).to.be.sealed;
     *     expect(frozenObject).to.be.sealed;
     *     expect(1).to.be.sealed;
     *
     * Add `.not` earlier in the chain to negate `.sealed`.
     *
     *     expect({a: 1}).to.not.be.sealed;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
     *
     * @name sealed
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('sealed', function () {
        var obj = flag(this, 'object');
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
        // The following provides ES6 behavior for ES5 environments.
        var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
        this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
    });
    /**
     * ### .frozen
     *
     * Asserts that the target is frozen, which means that new properties can't be
     * added to it, and its existing properties can't be reassigned to different
     * values, reconfigured, or deleted. Primitives are always frozen.
     *
     *     var frozenObject = Object.freeze({});
     *
     *     expect(frozenObject).to.be.frozen;
     *     expect(1).to.be.frozen;
     *
     * Add `.not` earlier in the chain to negate `.frozen`.
     *
     *     expect({a: 1}).to.not.be.frozen;
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
     *
     * @name frozen
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('frozen', function () {
        var obj = flag(this, 'object');
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
        // The following provides ES6 behavior for ES5 environments.
        var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
        this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
    });
    /**
     * ### .finite
     *
     * Asserts that the target is a number, and isn't `NaN` or positive/negative
     * `Infinity`.
     *
     *     expect(1).to.be.finite;
     *
     * Add `.not` earlier in the chain to negate `.finite`. However, it's
     * dangerous to do so. The problem is that it creates uncertain expectations
     * by asserting that the subject either isn't a number, or that it's `NaN`, or
     * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
     * best to identify the exact output that's expected, and then write an
     * assertion that only accepts that exact output.
     *
     * When the target isn't expected to be a number, it's often best to assert
     * that it's the expected type, rather than asserting that it isn't one of
     * many unexpected types.
     *
     *     expect('foo').to.be.a('string'); // Recommended
     *     expect('foo').to.not.be.finite; // Not recommended
     *
     * When the target is expected to be `NaN`, it's often best to assert exactly
     * that.
     *
     *     expect(NaN).to.be.NaN; // Recommended
     *     expect(NaN).to.not.be.finite; // Not recommended
     *
     * When the target is expected to be positive infinity, it's often best to
     * assert exactly that.
     *
     *     expect(Infinity).to.equal(Infinity); // Recommended
     *     expect(Infinity).to.not.be.finite; // Not recommended
     *
     * When the target is expected to be negative infinity, it's often best to
     * assert exactly that.
     *
     *     expect(-Infinity).to.equal(-Infinity); // Recommended
     *     expect(-Infinity).to.not.be.finite; // Not recommended
     *
     * A custom error message can be given as the second argument to `expect`.
     *
     *     expect('foo', 'nooo why fail??').to.be.finite;
     *
     * @name finite
     * @namespace BDD
     * @api public
     */
    Assertion.addProperty('finite', function (msg) {
        var obj = flag(this, 'object');
        this.assert(typeof obj === 'number' && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
    });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/assert.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/assert.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
module.exports = function (chai, util) {
    /*!
     * Chai dependencies.
     */
    var Assertion = chai.Assertion, flag = util.flag;
    /*!
     * Module export.
     */
    /**
     * ### assert(expression, message)
     *
     * Write your own test expressions.
     *
     *     assert('foo' !== 'bar', 'foo is not bar');
     *     assert(Array.isArray([]), 'empty arrays are arrays');
     *
     * @param {Mixed} expression to test for truthiness
     * @param {String} message to display on error
     * @name assert
     * @namespace Assert
     * @api public
     */
    var assert = chai.assert = function (express, errmsg) {
        var test = new Assertion(null, null, chai.assert, true);
        test.assert(express, errmsg, '[ negation message unavailable ]');
    };
    /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure. Node.js `assert` module-compatible.
     *
     *     assert.fail();
     *     assert.fail("custom error message");
     *     assert.fail(1, 2);
     *     assert.fail(1, 2, "custom error message");
     *     assert.fail(1, 2, "custom error message", ">");
     *     assert.fail(1, 2, undefined, ">");
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace Assert
     * @api public
     */
    assert.fail = function (actual, expected, message, operator) {
        if (arguments.length < 2) {
            // Comply with Node's fail([message]) interface
            message = actual;
            actual = undefined;
        }
        message = message || 'assert.fail()';
        throw new chai.AssertionError(message, {
            actual: actual,
            expected: expected,
            operator: operator
        }, assert.fail);
    };
    /**
     * ### .isOk(object, [message])
     *
     * Asserts that `object` is truthy.
     *
     *     assert.isOk('everything', 'everything is ok');
     *     assert.isOk(false, 'this will fail');
     *
     * @name isOk
     * @alias ok
     * @param {Mixed} object to test
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isOk = function (val, msg) {
        new Assertion(val, msg, assert.isOk, true).is.ok;
    };
    /**
     * ### .isNotOk(object, [message])
     *
     * Asserts that `object` is falsy.
     *
     *     assert.isNotOk('everything', 'this will fail');
     *     assert.isNotOk(false, 'this will pass');
     *
     * @name isNotOk
     * @alias notOk
     * @param {Mixed} object to test
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotOk = function (val, msg) {
        new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
    };
    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     assert.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.equal = function (act, exp, msg) {
        var test = new Assertion(act, msg, assert.equal, true);
        test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
    };
    /**
     * ### .notEqual(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     assert.notEqual(3, 4, 'these numbers are not equal');
     *
     * @name notEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notEqual = function (act, exp, msg) {
        var test = new Assertion(act, msg, assert.notEqual, true);
        test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
    };
    /**
     * ### .strictEqual(actual, expected, [message])
     *
     * Asserts strict equality (`===`) of `actual` and `expected`.
     *
     *     assert.strictEqual(true, true, 'these booleans are strictly equal');
     *
     * @name strictEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.strictEqual = function (act, exp, msg) {
        new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
    };
    /**
     * ### .notStrictEqual(actual, expected, [message])
     *
     * Asserts strict inequality (`!==`) of `actual` and `expected`.
     *
     *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
     *
     * @name notStrictEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notStrictEqual = function (act, exp, msg) {
        new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
    };
    /**
     * ### .deepEqual(actual, expected, [message])
     *
     * Asserts that `actual` is deeply equal to `expected`.
     *
     *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
     *
     * @name deepEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @alias deepStrictEqual
     * @namespace Assert
     * @api public
     */
    assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
        new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
    };
    /**
     * ### .notDeepEqual(actual, expected, [message])
     *
     * Assert that `actual` is not deeply equal to `expected`.
     *
     *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
     *
     * @name notDeepEqual
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notDeepEqual = function (act, exp, msg) {
        new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
    };
    /**
    * ### .isAbove(valueToCheck, valueToBeAbove, [message])
    *
    * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
    *
    *     assert.isAbove(5, 2, '5 is strictly greater than 2');
    *
    * @name isAbove
    * @param {Mixed} valueToCheck
    * @param {Mixed} valueToBeAbove
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.isAbove = function (val, abv, msg) {
        new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
    };
    /**
    * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
    *
    * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
    *
    *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
    *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
    *
    * @name isAtLeast
    * @param {Mixed} valueToCheck
    * @param {Mixed} valueToBeAtLeast
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.isAtLeast = function (val, atlst, msg) {
        new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
    };
    /**
    * ### .isBelow(valueToCheck, valueToBeBelow, [message])
    *
    * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
    *
    *     assert.isBelow(3, 6, '3 is strictly less than 6');
    *
    * @name isBelow
    * @param {Mixed} valueToCheck
    * @param {Mixed} valueToBeBelow
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.isBelow = function (val, blw, msg) {
        new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
    };
    /**
    * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
    *
    * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
    *
    *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
    *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
    *
    * @name isAtMost
    * @param {Mixed} valueToCheck
    * @param {Mixed} valueToBeAtMost
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.isAtMost = function (val, atmst, msg) {
        new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
    };
    /**
     * ### .isTrue(value, [message])
     *
     * Asserts that `value` is true.
     *
     *     var teaServed = true;
     *     assert.isTrue(teaServed, 'the tea has been served');
     *
     * @name isTrue
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isTrue = function (val, msg) {
        new Assertion(val, msg, assert.isTrue, true).is['true'];
    };
    /**
     * ### .isNotTrue(value, [message])
     *
     * Asserts that `value` is not true.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotTrue(tea, 'great, time for tea!');
     *
     * @name isNotTrue
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotTrue = function (val, msg) {
        new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
    };
    /**
     * ### .isFalse(value, [message])
     *
     * Asserts that `value` is false.
     *
     *     var teaServed = false;
     *     assert.isFalse(teaServed, 'no tea yet? hmm...');
     *
     * @name isFalse
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isFalse = function (val, msg) {
        new Assertion(val, msg, assert.isFalse, true).is['false'];
    };
    /**
     * ### .isNotFalse(value, [message])
     *
     * Asserts that `value` is not false.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotFalse(tea, 'great, time for tea!');
     *
     * @name isNotFalse
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotFalse = function (val, msg) {
        new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
    };
    /**
     * ### .isNull(value, [message])
     *
     * Asserts that `value` is null.
     *
     *     assert.isNull(err, 'there was no error');
     *
     * @name isNull
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNull = function (val, msg) {
        new Assertion(val, msg, assert.isNull, true).to.equal(null);
    };
    /**
     * ### .isNotNull(value, [message])
     *
     * Asserts that `value` is not null.
     *
     *     var tea = 'tasty chai';
     *     assert.isNotNull(tea, 'great, time for tea!');
     *
     * @name isNotNull
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotNull = function (val, msg) {
        new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
    };
    /**
     * ### .isNaN
     *
     * Asserts that value is NaN.
     *
     *     assert.isNaN(NaN, 'NaN is NaN');
     *
     * @name isNaN
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNaN = function (val, msg) {
        new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
    };
    /**
     * ### .isNotNaN
     *
     * Asserts that value is not NaN.
     *
     *     assert.isNotNaN(4, '4 is not NaN');
     *
     * @name isNotNaN
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotNaN = function (val, msg) {
        new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
    };
    /**
     * ### .exists
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
     *
     * @name exists
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.exists = function (val, msg) {
        new Assertion(val, msg, assert.exists, true).to.exist;
    };
    /**
     * ### .notExists
     *
     * Asserts that the target is either `null` or `undefined`.
     *
     *     var bar = null
     *       , baz;
     *
     *     assert.notExists(bar);
     *     assert.notExists(baz, 'baz is either null or undefined');
     *
     * @name notExists
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notExists = function (val, msg) {
        new Assertion(val, msg, assert.notExists, true).to.not.exist;
    };
    /**
     * ### .isUndefined(value, [message])
     *
     * Asserts that `value` is `undefined`.
     *
     *     var tea;
     *     assert.isUndefined(tea, 'no tea defined');
     *
     * @name isUndefined
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isUndefined = function (val, msg) {
        new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
    };
    /**
     * ### .isDefined(value, [message])
     *
     * Asserts that `value` is not `undefined`.
     *
     *     var tea = 'cup of chai';
     *     assert.isDefined(tea, 'tea has been defined');
     *
     * @name isDefined
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isDefined = function (val, msg) {
        new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
    };
    /**
     * ### .isFunction(value, [message])
     *
     * Asserts that `value` is a function.
     *
     *     function serveTea() { return 'cup of tea'; };
     *     assert.isFunction(serveTea, 'great, we can have tea now');
     *
     * @name isFunction
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isFunction = function (val, msg) {
        new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
    };
    /**
     * ### .isNotFunction(value, [message])
     *
     * Asserts that `value` is _not_ a function.
     *
     *     var serveTea = [ 'heat', 'pour', 'sip' ];
     *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
     *
     * @name isNotFunction
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotFunction = function (val, msg) {
        new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
    };
    /**
     * ### .isObject(value, [message])
     *
     * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
     * _The assertion does not match subclassed objects._
     *
     *     var selection = { name: 'Chai', serve: 'with spices' };
     *     assert.isObject(selection, 'tea selection is an object');
     *
     * @name isObject
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isObject = function (val, msg) {
        new Assertion(val, msg, assert.isObject, true).to.be.a('object');
    };
    /**
     * ### .isNotObject(value, [message])
     *
     * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
     *
     *     var selection = 'chai'
     *     assert.isNotObject(selection, 'tea selection is not an object');
     *     assert.isNotObject(null, 'null is not an object');
     *
     * @name isNotObject
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotObject = function (val, msg) {
        new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
    };
    /**
     * ### .isArray(value, [message])
     *
     * Asserts that `value` is an array.
     *
     *     var menu = [ 'green', 'chai', 'oolong' ];
     *     assert.isArray(menu, 'what kind of tea do we want?');
     *
     * @name isArray
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isArray = function (val, msg) {
        new Assertion(val, msg, assert.isArray, true).to.be.an('array');
    };
    /**
     * ### .isNotArray(value, [message])
     *
     * Asserts that `value` is _not_ an array.
     *
     *     var menu = 'green|chai|oolong';
     *     assert.isNotArray(menu, 'what kind of tea do we want?');
     *
     * @name isNotArray
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotArray = function (val, msg) {
        new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
    };
    /**
     * ### .isString(value, [message])
     *
     * Asserts that `value` is a string.
     *
     *     var teaOrder = 'chai';
     *     assert.isString(teaOrder, 'order placed');
     *
     * @name isString
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isString = function (val, msg) {
        new Assertion(val, msg, assert.isString, true).to.be.a('string');
    };
    /**
     * ### .isNotString(value, [message])
     *
     * Asserts that `value` is _not_ a string.
     *
     *     var teaOrder = 4;
     *     assert.isNotString(teaOrder, 'order placed');
     *
     * @name isNotString
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotString = function (val, msg) {
        new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
    };
    /**
     * ### .isNumber(value, [message])
     *
     * Asserts that `value` is a number.
     *
     *     var cups = 2;
     *     assert.isNumber(cups, 'how many cups');
     *
     * @name isNumber
     * @param {Number} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNumber = function (val, msg) {
        new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
    };
    /**
     * ### .isNotNumber(value, [message])
     *
     * Asserts that `value` is _not_ a number.
     *
     *     var cups = '2 cups please';
     *     assert.isNotNumber(cups, 'how many cups');
     *
     * @name isNotNumber
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotNumber = function (val, msg) {
        new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
    };
    /**
    * ### .isFinite(value, [message])
    *
    * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
    *
    *     var cups = 2;
    *     assert.isFinite(cups, 'how many cups');
    *
    *     assert.isFinite(NaN); // throws
    *
    * @name isFinite
    * @param {Number} value
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.isFinite = function (val, msg) {
        new Assertion(val, msg, assert.isFinite, true).to.be.finite;
    };
    /**
     * ### .isBoolean(value, [message])
     *
     * Asserts that `value` is a boolean.
     *
     *     var teaReady = true
     *       , teaServed = false;
     *
     *     assert.isBoolean(teaReady, 'is the tea ready');
     *     assert.isBoolean(teaServed, 'has tea been served');
     *
     * @name isBoolean
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isBoolean = function (val, msg) {
        new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
    };
    /**
     * ### .isNotBoolean(value, [message])
     *
     * Asserts that `value` is _not_ a boolean.
     *
     *     var teaReady = 'yep'
     *       , teaServed = 'nope';
     *
     *     assert.isNotBoolean(teaReady, 'is the tea ready');
     *     assert.isNotBoolean(teaServed, 'has tea been served');
     *
     * @name isNotBoolean
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.isNotBoolean = function (val, msg) {
        new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
    };
    /**
     * ### .typeOf(value, name, [message])
     *
     * Asserts that `value`'s type is `name`, as determined by
     * `Object.prototype.toString`.
     *
     *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
     *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
     *     assert.typeOf('tea', 'string', 'we have a string');
     *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
     *     assert.typeOf(null, 'null', 'we have a null');
     *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
     *
     * @name typeOf
     * @param {Mixed} value
     * @param {String} name
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.typeOf = function (val, type, msg) {
        new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
    };
    /**
     * ### .notTypeOf(value, name, [message])
     *
     * Asserts that `value`'s type is _not_ `name`, as determined by
     * `Object.prototype.toString`.
     *
     *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
     *
     * @name notTypeOf
     * @param {Mixed} value
     * @param {String} typeof name
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notTypeOf = function (val, type, msg) {
        new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
    };
    /**
     * ### .instanceOf(object, constructor, [message])
     *
     * Asserts that `value` is an instance of `constructor`.
     *
     *     var Tea = function (name) { this.name = name; }
     *       , chai = new Tea('chai');
     *
     *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
     *
     * @name instanceOf
     * @param {Object} object
     * @param {Constructor} constructor
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.instanceOf = function (val, type, msg) {
        new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
    };
    /**
     * ### .notInstanceOf(object, constructor, [message])
     *
     * Asserts `value` is not an instance of `constructor`.
     *
     *     var Tea = function (name) { this.name = name; }
     *       , chai = new String('chai');
     *
     *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
     *
     * @name notInstanceOf
     * @param {Object} object
     * @param {Constructor} constructor
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notInstanceOf = function (val, type, msg) {
        new Assertion(val, msg, assert.notInstanceOf, true)
            .to.not.be.instanceOf(type);
    };
    /**
     * ### .include(haystack, needle, [message])
     *
     * Asserts that `haystack` includes `needle`. Can be used to assert the
     * inclusion of a value in an array, a substring in a string, or a subset of
     * properties in an object.
     *
     *     assert.include([1,2,3], 2, 'array contains value');
     *     assert.include('foobar', 'foo', 'string contains substring');
     *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
     *
     * Strict equality (===) is used. When asserting the inclusion of a value in
     * an array, the array is searched for an element that's strictly equal to the
     * given value. When asserting a subset of properties in an object, the object
     * is searched for the given property keys, checking that each one is present
     * and strictly equal to the given property value. For instance:
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.include([obj1, obj2], obj1);
     *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
     *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
     *
     * @name include
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.include = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.include, true).include(inc);
    };
    /**
     * ### .notInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` does not include `needle`. Can be used to assert
     * the absence of a value in an array, a substring in a string, or a subset of
     * properties in an object.
     *
     *     assert.notInclude([1,2,3], 4, "array doesn't contain value");
     *     assert.notInclude('foobar', 'baz', "string doesn't contain substring");
     *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
     *
     * Strict equality (===) is used. When asserting the absence of a value in an
     * array, the array is searched to confirm the absence of an element that's
     * strictly equal to the given value. When asserting a subset of properties in
     * an object, the object is searched to confirm that at least one of the given
     * property keys is either not present or not strictly equal to the given
     * property value. For instance:
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.notInclude([obj1, obj2], {a: 1});
     *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
     *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
     *
     * @name notInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
    };
    /**
     * ### .deepInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` includes `needle`. Can be used to assert the
     * inclusion of a value in an array or a subset of properties in an object.
     * Deep equality is used.
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.deepInclude([obj1, obj2], {a: 1});
     *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
     *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
     *
     * @name deepInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.deepInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
    };
    /**
     * ### .notDeepInclude(haystack, needle, [message])
     *
     * Asserts that `haystack` does not include `needle`. Can be used to assert
     * the absence of a value in an array or a subset of properties in an object.
     * Deep equality is used.
     *
     *     var obj1 = {a: 1}
     *       , obj2 = {b: 2};
     *     assert.notDeepInclude([obj1, obj2], {a: 9});
     *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
     *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
     *
     * @name notDeepInclude
     * @param {Array|String} haystack
     * @param {Mixed} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notDeepInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
    };
    /**
     * ### .nestedInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an
     * object.
     * Enables the use of dot- and bracket-notation for referencing nested
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     *
     *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
     *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
     *
     * @name nestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.nestedInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
    };
    /**
     * ### .notNestedInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' does not include 'needle'.
     * Can be used to assert the absence of a subset of properties in an
     * object.
     * Enables the use of dot- and bracket-notation for referencing nested
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     *
     *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
     *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
     *
     * @name notNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notNestedInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notNestedInclude, true)
            .not.nested.include(inc);
    };
    /**
     * ### .deepNestedInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an
     * object while checking for deep equality.
     * Enables the use of dot- and bracket-notation for referencing nested
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     *
     *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
     *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
     *
     * @name deepNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.deepNestedInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.deepNestedInclude, true)
            .deep.nested.include(inc);
    };
    /**
     * ### .notDeepNestedInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' does not include 'needle'.
     * Can be used to assert the absence of a subset of properties in an
     * object while checking for deep equality.
     * Enables the use of dot- and bracket-notation for referencing nested
     * properties.
     * '[]' and '.' in property names can be escaped using double backslashes.
     *
     *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
     *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
     *
     * @name notDeepNestedInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notDeepNestedInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepNestedInclude, true)
            .not.deep.nested.include(inc);
    };
    /**
     * ### .ownInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an
     * object while ignoring inherited properties.
     *
     *     assert.ownInclude({ a: 1 }, { a: 1 });
     *
     * @name ownInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.ownInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
    };
    /**
     * ### .notOwnInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the absence of a subset of properties in an
     * object while ignoring inherited properties.
     *
     *     Object.prototype.b = 2;
     *
     *     assert.notOwnInclude({ a: 1 }, { b: 2 });
     *
     * @name notOwnInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notOwnInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
    };
    /**
     * ### .deepOwnInclude(haystack, needle, [message])
     *
     * Asserts that 'haystack' includes 'needle'.
     * Can be used to assert the inclusion of a subset of properties in an
     * object while ignoring inherited properties and checking for deep equality.
     *
     *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
     *
     * @name deepOwnInclude
     * @param {Object} haystack
     * @param {Object} needle
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.deepOwnInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.deepOwnInclude, true)
            .deep.own.include(inc);
    };
    /**
    * ### .notDeepOwnInclude(haystack, needle, [message])
    *
    * Asserts that 'haystack' includes 'needle'.
    * Can be used to assert the absence of a subset of properties in an
    * object while ignoring inherited properties and checking for deep equality.
    *
    *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
    *
    * @name notDeepOwnInclude
    * @param {Object} haystack
    * @param {Object} needle
    * @param {String} message
    * @namespace Assert
    * @api public
    */
    assert.notDeepOwnInclude = function (exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepOwnInclude, true)
            .not.deep.own.include(inc);
    };
    /**
     * ### .match(value, regexp, [message])
     *
     * Asserts that `value` matches the regular expression `regexp`.
     *
     *     assert.match('foobar', /^foo/, 'regexp matches');
     *
     * @name match
     * @param {Mixed} value
     * @param {RegExp} regexp
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.match = function (exp, re, msg) {
        new Assertion(exp, msg, assert.match, true).to.match(re);
    };
    /**
     * ### .notMatch(value, regexp, [message])
     *
     * Asserts that `value` does not match the regular expression `regexp`.
     *
     *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
     *
     * @name notMatch
     * @param {Mixed} value
     * @param {RegExp} regexp
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notMatch = function (exp, re, msg) {
        new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
    };
    /**
     * ### .property(object, property, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property`.
     *
     *     assert.property({ tea: { green: 'matcha' }}, 'tea');
     *     assert.property({ tea: { green: 'matcha' }}, 'toString');
     *
     * @name property
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.property = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.property, true).to.have.property(prop);
    };
    /**
     * ### .notProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property`.
     *
     *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
     *
     * @name notProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notProperty = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.notProperty, true)
            .to.not.have.property(prop);
    };
    /**
     * ### .propertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property` with a value given by `value`. Uses a strict equality check
     * (===).
     *
     *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
     *
     * @name propertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.propertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.propertyVal, true)
            .to.have.property(prop, val);
    };
    /**
     * ### .notPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property` with value given by `value`. Uses a strict equality check
     * (===).
     *
     *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
     *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
     *
     * @name notPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notPropertyVal, true)
            .to.not.have.property(prop, val);
    };
    /**
     * ### .deepPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property` with a value given by `value`. Uses a deep equality check.
     *
     *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
     *
     * @name deepPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.deepPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.deepPropertyVal, true)
            .to.have.deep.property(prop, val);
    };
    /**
     * ### .notDeepPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct or inherited property named
     * by `property` with value given by `value`. Uses a deep equality check.
     *
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
     *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
     *
     * @name notDeepPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notDeepPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notDeepPropertyVal, true)
            .to.not.have.deep.property(prop, val);
    };
    /**
     * ### .ownProperty(object, property, [message])
     *
     * Asserts that `object` has a direct property named by `property`. Inherited
     * properties aren't checked.
     *
     *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
     *
     * @name ownProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @api public
     */
    assert.ownProperty = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.ownProperty, true)
            .to.have.own.property(prop);
    };
    /**
     * ### .notOwnProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by
     * `property`. Inherited properties aren't checked.
     *
     *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
     *     assert.notOwnProperty({}, 'toString');
     *
     * @name notOwnProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @api public
     */
    assert.notOwnProperty = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.notOwnProperty, true)
            .to.not.have.own.property(prop);
    };
    /**
     * ### .ownPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct property named by `property` and a value
     * equal to the provided `value`. Uses a strict equality check (===).
     * Inherited properties aren't checked.
     *
     *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
     *
     * @name ownPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
    assert.ownPropertyVal = function (obj, prop, value, msg) {
        new Assertion(obj, msg, assert.ownPropertyVal, true)
            .to.have.own.property(prop, value);
    };
    /**
     * ### .notOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by `property`
     * with a value equal to the provided `value`. Uses a strict equality check
     * (===). Inherited properties aren't checked.
     *
     *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
     *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
     *
     * @name notOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
    assert.notOwnPropertyVal = function (obj, prop, value, msg) {
        new Assertion(obj, msg, assert.notOwnPropertyVal, true)
            .to.not.have.own.property(prop, value);
    };
    /**
     * ### .deepOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a direct property named by `property` and a value
     * equal to the provided `value`. Uses a deep equality check. Inherited
     * properties aren't checked.
     *
     *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
     *
     * @name deepOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
    assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
        new Assertion(obj, msg, assert.deepOwnPropertyVal, true)
            .to.have.deep.own.property(prop, value);
    };
    /**
     * ### .notDeepOwnPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a direct property named by `property`
     * with a value equal to the provided `value`. Uses a deep equality check.
     * Inherited properties aren't checked.
     *
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
     *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
     *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
     *
     * @name notDeepOwnPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @api public
     */
    assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
        new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)
            .to.not.have.deep.own.property(prop, value);
    };
    /**
     * ### .nestedProperty(object, property, [message])
     *
     * Asserts that `object` has a direct or inherited property named by
     * `property`, which can be a string using dot- and bracket-notation for
     * nested reference.
     *
     *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
     *
     * @name nestedProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.nestedProperty = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.nestedProperty, true)
            .to.have.nested.property(prop);
    };
    /**
     * ### .notNestedProperty(object, property, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property`, which
     * can be a string using dot- and bracket-notation for nested reference. The
     * property cannot exist on the object nor anywhere in its prototype chain.
     *
     *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
     *
     * @name notNestedProperty
     * @param {Object} object
     * @param {String} property
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notNestedProperty = function (obj, prop, msg) {
        new Assertion(obj, msg, assert.notNestedProperty, true)
            .to.not.have.nested.property(prop);
    };
    /**
     * ### .nestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a property named by `property` with value given
     * by `value`. `property` can use dot- and bracket-notation for nested
     * reference. Uses a strict equality check (===).
     *
     *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
     *
     * @name nestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.nestedPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.nestedPropertyVal, true)
            .to.have.nested.property(prop, val);
    };
    /**
     * ### .notNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property` with
     * value given by `value`. `property` can use dot- and bracket-notation for
     * nested reference. Uses a strict equality check (===).
     *
     *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
     *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
     *
     * @name notNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notNestedPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notNestedPropertyVal, true)
            .to.not.have.nested.property(prop, val);
    };
    /**
     * ### .deepNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` has a property named by `property` with a value given
     * by `value`. `property` can use dot- and bracket-notation for nested
     * reference. Uses a deep equality check.
     *
     *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
     *
     * @name deepNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.deepNestedPropertyVal, true)
            .to.have.deep.nested.property(prop, val);
    };
    /**
     * ### .notDeepNestedPropertyVal(object, property, value, [message])
     *
     * Asserts that `object` does _not_ have a property named by `property` with
     * value given by `value`. `property` can use dot- and bracket-notation for
     * nested reference. Uses a deep equality check.
     *
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
     *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
     *
     * @name notDeepNestedPropertyVal
     * @param {Object} object
     * @param {String} property
     * @param {Mixed} value
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)
            .to.not.have.deep.nested.property(prop, val);
    };
    /**
     * ### .lengthOf(object, length, [message])
     *
     * Asserts that `object` has a `length` or `size` with the expected value.
     *
     *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
     *     assert.lengthOf('foobar', 6, 'string has length of 6');
     *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');
     *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');
     *
     * @name lengthOf
     * @param {Mixed} object
     * @param {Number} length
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.lengthOf = function (exp, len, msg) {
        new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
    };
    /**
     * ### .hasAnyKeys(object, [keys], [message])
     *
     * Asserts that `object` has at least one of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
     *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
     *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
     *
     * @name hasAnyKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.hasAnyKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
    };
    /**
     * ### .hasAllKeys(object, [keys], [message])
     *
     * Asserts that `object` has all and only all of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
     *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
     *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
     *
     * @name hasAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.hasAllKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
    };
    /**
     * ### .containsAllKeys(object, [keys], [message])
     *
     * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
     *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
     *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
     *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
     *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
     *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
     *
     * @name containsAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.containsAllKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.containsAllKeys, true)
            .to.contain.all.keys(keys);
    };
    /**
     * ### .doesNotHaveAnyKeys(object, [keys], [message])
     *
     * Asserts that `object` has none of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
     *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
     *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
     *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
     *
     * @name doesNotHaveAnyKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)
            .to.not.have.any.keys(keys);
    };
    /**
     * ### .doesNotHaveAllKeys(object, [keys], [message])
     *
     * Asserts that `object` does not have at least one of the `keys` provided.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
     *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
     *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
     *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
     *
     * @name doesNotHaveAllKeys
     * @param {Mixed} object
     * @param {String[]} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.doesNotHaveAllKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)
            .to.not.have.all.keys(keys);
    };
    /**
     * ### .hasAnyDeepKeys(object, [keys], [message])
     *
     * Asserts that `object` has at least one of the `keys` provided.
     * Since Sets and Maps can have objects as keys you can use this assertion to perform
     * a deep comparison.
     * You can also provide a single object instead of a `keys` array and its keys
     * will be used as the expected set of keys.
     *
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
     *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
     *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
     *
     * @name doesNotHaveAllKeys
     * @param {Mixed} object
     * @param {Array|Object} keys
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.hasAnyDeepKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAnyDeepKeys, true)
            .to.have.any.deep.keys(keys);
    };
    /**
      * ### .hasAllDeepKeys(object, [keys], [message])
      *
      * Asserts that `object` has all and only all of the `keys` provided.
      * Since Sets and Maps can have objects as keys you can use this assertion to perform
      * a deep comparison.
      * You can also provide a single object instead of a `keys` array and its keys
      * will be used as the expected set of keys.
      *
      *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
      *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
      *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
      *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
      *
      * @name hasAllDeepKeys
      * @param {Mixed} object
      * @param {Array|Object} keys
      * @param {String} message
      * @namespace Assert
      * @api public
      */
    assert.hasAllDeepKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAllDeepKeys, true)
            .to.have.all.deep.keys(keys);
    };
    /**
      * ### .containsAllDeepKeys(object, [keys], [message])
      *
      * Asserts that `object` contains all of the `keys` provided.
      * Since Sets and Maps can have objects as keys you can use this assertion to perform
      * a deep comparison.
      * You can also provide a single object instead of a `keys` array and its keys
      * will be used as the expected set of keys.
      *
      *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
      *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
      *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
      *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
      *
      * @name containsAllDeepKeys
      * @param {Mixed} object
      * @param {Array|Object} keys
      * @param {String} message
      * @namespace Assert
      * @api public
      */
    assert.containsAllDeepKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.containsAllDeepKeys, true)
            .to.contain.all.deep.keys(keys);
    };
    /**
      * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
      *
      * Asserts that `object` has none of the `keys` provided.
      * Since Sets and Maps can have objects as keys you can use this assertion to perform
      * a deep comparison.
      * You can also provide a single object instead of a `keys` array and its keys
      * will be used as the expected set of keys.
      *
      *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
      *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
      *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
      *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
      *
      * @name doesNotHaveAnyDeepKeys
      * @param {Mixed} object
      * @param {Array|Object} keys
      * @param {String} message
      * @namespace Assert
      * @api public
      */
    assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)
            .to.not.have.any.deep.keys(keys);
    };
    /**
      * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
      *
      * Asserts that `object` does not have at least one of the `keys` provided.
      * Since Sets and Maps can have objects as keys you can use this assertion to perform
      * a deep comparison.
      * You can also provide a single object instead of a `keys` array and its keys
      * will be used as the expected set of keys.
      *
      *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
      *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
      *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
      *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
      *
      * @name doesNotHaveAllDeepKeys
      * @param {Mixed} object
      * @param {Array|Object} keys
      * @param {String} message
      * @namespace Assert
      * @api public
      */
    assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)
            .to.not.have.all.deep.keys(keys);
    };
    /**
      * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
      *
      * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
      * instance of `errorLike`.
      * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
      * instance as `errorLike`.
      * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
      * message matching `errMsgMatcher`.
      *
      *     assert.throws(fn, 'Error thrown must have this msg');
      *     assert.throws(fn, /Error thrown must have a msg that matches this/);
      *     assert.throws(fn, ReferenceError);
      *     assert.throws(fn, errorInstance);
      *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
      *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
      *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
      *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
      *
      * @name throws
      * @alias throw
      * @alias Throw
      * @param {Function} fn
      * @param {ErrorConstructor|Error} errorLike
      * @param {RegExp|String} errMsgMatcher
      * @param {String} message
      * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
      * @namespace Assert
      * @api public
      */
    assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
        if ('string' === typeof errorLike || errorLike instanceof RegExp) {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        var assertErr = new Assertion(fn, msg, assert.throws, true)
            .to.throw(errorLike, errMsgMatcher);
        return flag(assertErr, 'object');
    };
    /**
     * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
     *
     * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
     * instance of `errorLike`.
     * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
     * instance as `errorLike`.
     * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
     * message matching `errMsgMatcher`.
     *
     *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
     *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
     *     assert.doesNotThrow(fn, Error);
     *     assert.doesNotThrow(fn, errorInstance);
     *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
     *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
     *     assert.doesNotThrow(fn, Error, /Error must not match this/);
     *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
     *
     * @name doesNotThrow
     * @param {Function} fn
     * @param {ErrorConstructor} errorLike
     * @param {RegExp|String} errMsgMatcher
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Assert
     * @api public
     */
    assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
        if ('string' === typeof errorLike || errorLike instanceof RegExp) {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        new Assertion(fn, msg, assert.doesNotThrow, true)
            .to.not.throw(errorLike, errMsgMatcher);
    };
    /**
     * ### .operator(val1, operator, val2, [message])
     *
     * Compares two values using `operator`.
     *
     *     assert.operator(1, '<', 2, 'everything is ok');
     *     assert.operator(1, '>', 2, 'this will fail');
     *
     * @name operator
     * @param {Mixed} val1
     * @param {String} operator
     * @param {Mixed} val2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.operator = function (val, operator, val2, msg) {
        var ok;
        switch (operator) {
            case '==':
                ok = val == val2;
                break;
            case '===':
                ok = val === val2;
                break;
            case '>':
                ok = val > val2;
                break;
            case '>=':
                ok = val >= val2;
                break;
            case '<':
                ok = val < val2;
                break;
            case '<=':
                ok = val <= val2;
                break;
            case '!=':
                ok = val != val2;
                break;
            case '!==':
                ok = val !== val2;
                break;
            default:
                msg = msg ? msg + ': ' : msg;
                throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
        }
        var test = new Assertion(ok, msg, assert.operator, true);
        test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
    };
    /**
     * ### .closeTo(actual, expected, delta, [message])
     *
     * Asserts that the target is equal `expected`, to within a +/- `delta` range.
     *
     *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
     *
     * @name closeTo
     * @param {Number} actual
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.closeTo = function (act, exp, delta, msg) {
        new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
    };
    /**
     * ### .approximately(actual, expected, delta, [message])
     *
     * Asserts that the target is equal `expected`, to within a +/- `delta` range.
     *
     *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
     *
     * @name approximately
     * @param {Number} actual
     * @param {Number} expected
     * @param {Number} delta
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.approximately = function (act, exp, delta, msg) {
        new Assertion(act, msg, assert.approximately, true)
            .to.be.approximately(exp, delta);
    };
    /**
     * ### .sameMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in any order. Uses a
     * strict equality check (===).
     *
     *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
     *
     * @name sameMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.sameMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.sameMembers, true)
            .to.have.same.members(set2);
    };
    /**
     * ### .notSameMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in any order.
     * Uses a strict equality check (===).
     *
     *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
     *
     * @name notSameMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notSameMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameMembers, true)
            .to.not.have.same.members(set2);
    };
    /**
     * ### .sameDeepMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in any order. Uses a
     * deep equality check.
     *
     *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
     *
     * @name sameDeepMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.sameDeepMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.sameDeepMembers, true)
            .to.have.same.deep.members(set2);
    };
    /**
     * ### .notSameDeepMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in any order.
     * Uses a deep equality check.
     *
     *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
     *
     * @name notSameDeepMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notSameDeepMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameDeepMembers, true)
            .to.not.have.same.deep.members(set2);
    };
    /**
     * ### .sameOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in the same order.
     * Uses a strict equality check (===).
     *
     *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
     *
     * @name sameOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.sameOrderedMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.sameOrderedMembers, true)
            .to.have.same.ordered.members(set2);
    };
    /**
     * ### .notSameOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in the same
     * order. Uses a strict equality check (===).
     *
     *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
     *
     * @name notSameOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notSameOrderedMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameOrderedMembers, true)
            .to.not.have.same.ordered.members(set2);
    };
    /**
     * ### .sameDeepOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` have the same members in the same order.
     * Uses a deep equality check.
     *
     * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
     *
     * @name sameDeepOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.sameDeepOrderedMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)
            .to.have.same.deep.ordered.members(set2);
    };
    /**
     * ### .notSameDeepOrderedMembers(set1, set2, [message])
     *
     * Asserts that `set1` and `set2` don't have the same members in the same
     * order. Uses a deep equality check.
     *
     * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
     * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
     *
     * @name notSameDeepOrderedMembers
     * @param {Array} set1
     * @param {Array} set2
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)
            .to.not.have.same.deep.ordered.members(set2);
    };
    /**
     * ### .includeMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in any order. Uses a
     * strict equality check (===). Duplicates are ignored.
     *
     *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
     *
     * @name includeMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.includeMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.includeMembers, true)
            .to.include.members(subset);
    };
    /**
     * ### .notIncludeMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in any order. Uses a
     * strict equality check (===). Duplicates are ignored.
     *
     *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
     *
     * @name notIncludeMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notIncludeMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeMembers, true)
            .to.not.include.members(subset);
    };
    /**
     * ### .includeDeepMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in any order. Uses a deep
     * equality check. Duplicates are ignored.
     *
     *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
     *
     * @name includeDeepMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.includeDeepMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.includeDeepMembers, true)
            .to.include.deep.members(subset);
    };
    /**
     * ### .notIncludeDeepMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in any order. Uses a
     * deep equality check. Duplicates are ignored.
     *
     *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
     *
     * @name notIncludeDeepMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notIncludeDeepMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeDeepMembers, true)
            .to.not.include.deep.members(subset);
    };
    /**
     * ### .includeOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a strict equality
     * check (===).
     *
     *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
     *
     * @name includeOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.includeOrderedMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.includeOrderedMembers, true)
            .to.include.ordered.members(subset);
    };
    /**
     * ### .notIncludeOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a strict equality
     * check (===).
     *
     *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
     *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
     *
     * @name notIncludeOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notIncludeOrderedMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)
            .to.not.include.ordered.members(subset);
    };
    /**
     * ### .includeDeepOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` is included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a deep equality
     * check.
     *
     *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
     *
     * @name includeDeepOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.includeDeepOrderedMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)
            .to.include.deep.ordered.members(subset);
    };
    /**
     * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
     *
     * Asserts that `subset` isn't included in `superset` in the same order
     * beginning with the first element in `superset`. Uses a deep equality
     * check.
     *
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
     *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
     *
     * @name notIncludeDeepOrderedMembers
     * @param {Array} superset
     * @param {Array} subset
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)
            .to.not.include.deep.ordered.members(subset);
    };
    /**
     * ### .oneOf(inList, list, [message])
     *
     * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
     *
     *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
     *
     * @name oneOf
     * @param {*} inList
     * @param {Array<*>} list
     * @param {String} message
     * @namespace Assert
     * @api public
     */
    assert.oneOf = function (inList, list, msg) {
        new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
    };
    /**
     * ### .changes(function, object, property, [message])
     *
     * Asserts that a function changes the value of a property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 22 };
     *     assert.changes(fn, obj, 'val');
     *
     * @name changes
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.changes = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
    };
    /**
    * ### .changesBy(function, object, property, delta, [message])
    *
    * Asserts that a function changes the value of a property by an amount (delta).
    *
    *     var obj = { val: 10 };
    *     var fn = function() { obj.val += 2 };
    *     assert.changesBy(fn, obj, 'val', 2);
    *
    * @name changesBy
    * @param {Function} modifier function
    * @param {Object} object or getter function
    * @param {String} property name _optional_
    * @param {Number} change amount (delta)
    * @param {String} message _optional_
    * @namespace Assert
    * @api public
    */
    assert.changesBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changesBy, true)
            .to.change(obj, prop).by(delta);
    };
    /**
    * ### .doesNotChange(function, object, property, [message])
    *
    * Asserts that a function does not change the value of a property.
    *
    *     var obj = { val: 10 };
    *     var fn = function() { console.log('foo'); };
    *     assert.doesNotChange(fn, obj, 'val');
    *
    * @name doesNotChange
    * @param {Function} modifier function
    * @param {Object} object or getter function
    * @param {String} property name _optional_
    * @param {String} message _optional_
    * @namespace Assert
    * @api public
    */
    assert.doesNotChange = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotChange, true)
            .to.not.change(obj, prop);
    };
    /**
     * ### .changesButNotBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val += 10 };
     *     assert.changesButNotBy(fn, obj, 'val', 5);
     *
     * @name changesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changesButNotBy, true)
            .to.change(obj, prop).but.not.by(delta);
    };
    /**
     * ### .increases(function, object, property, [message])
     *
     * Asserts that a function increases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 13 };
     *     assert.increases(fn, obj, 'val');
     *
     * @name increases
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.increases = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.increases, true)
            .to.increase(obj, prop);
    };
    /**
     * ### .increasesBy(function, object, property, delta, [message])
     *
     * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val += 10 };
     *     assert.increasesBy(fn, obj, 'val', 10);
     *
     * @name increasesBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.increasesBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.increasesBy, true)
            .to.increase(obj, prop).by(delta);
    };
    /**
     * ### .doesNotIncrease(function, object, property, [message])
     *
     * Asserts that a function does not increase a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 8 };
     *     assert.doesNotIncrease(fn, obj, 'val');
     *
     * @name doesNotIncrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.doesNotIncrease = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotIncrease, true)
            .to.not.increase(obj, prop);
    };
    /**
     * ### .increasesButNotBy(function, object, property, [message])
     *
     * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 15 };
     *     assert.increasesButNotBy(fn, obj, 'val', 10);
     *
     * @name increasesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.increasesButNotBy, true)
            .to.increase(obj, prop).but.not.by(delta);
    };
    /**
     * ### .decreases(function, object, property, [message])
     *
     * Asserts that a function decreases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.decreases(fn, obj, 'val');
     *
     * @name decreases
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.decreases = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.decreases, true)
            .to.decrease(obj, prop);
    };
    /**
     * ### .decreasesBy(function, object, property, delta, [message])
     *
     * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val -= 5 };
     *     assert.decreasesBy(fn, obj, 'val', 5);
     *
     * @name decreasesBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.decreasesBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.decreasesBy, true)
            .to.decrease(obj, prop).by(delta);
    };
    /**
     * ### .doesNotDecrease(function, object, property, [message])
     *
     * Asserts that a function does not decreases a numeric object property.
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 15 };
     *     assert.doesNotDecrease(fn, obj, 'val');
     *
     * @name doesNotDecrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.doesNotDecrease = function (fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === 'function') {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotDecrease, true)
            .to.not.decrease(obj, prop);
    };
    /**
     * ### .doesNotDecreaseBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
     *
     * @name doesNotDecrease
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)
            .to.not.decrease(obj, prop).by(delta);
    };
    /**
     * ### .decreasesButNotBy(function, object, property, delta, [message])
     *
     * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
     *
     *     var obj = { val: 10 };
     *     var fn = function() { obj.val = 5 };
     *     assert.decreasesButNotBy(fn, obj, 'val', 1);
     *
     * @name decreasesButNotBy
     * @param {Function} modifier function
     * @param {Object} object or getter function
     * @param {String} property name _optional_
     * @param {Number} change amount (delta)
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === 'function') {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        }
        else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.decreasesButNotBy, true)
            .to.decrease(obj, prop).but.not.by(delta);
    };
    /*!
     * ### .ifError(object)
     *
     * Asserts if value is not a false value, and throws if it is a true value.
     * This is added to allow for chai to be a drop-in replacement for Node's
     * assert class.
     *
     *     var err = new Error('I am a custom error');
     *     assert.ifError(err); // Rethrows err!
     *
     * @name ifError
     * @param {Object} object
     * @namespace Assert
     * @api public
     */
    assert.ifError = function (val) {
        if (val) {
            throw (val);
        }
    };
    /**
     * ### .isExtensible(object)
     *
     * Asserts that `object` is extensible (can have new properties added to it).
     *
     *     assert.isExtensible({});
     *
     * @name isExtensible
     * @alias extensible
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isExtensible = function (obj, msg) {
        new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
    };
    /**
     * ### .isNotExtensible(object)
     *
     * Asserts that `object` is _not_ extensible.
     *
     *     var nonExtensibleObject = Object.preventExtensions({});
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.freeze({});
     *
     *     assert.isNotExtensible(nonExtensibleObject);
     *     assert.isNotExtensible(sealedObject);
     *     assert.isNotExtensible(frozenObject);
     *
     * @name isNotExtensible
     * @alias notExtensible
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isNotExtensible = function (obj, msg) {
        new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
    };
    /**
     * ### .isSealed(object)
     *
     * Asserts that `object` is sealed (cannot have new properties added to it
     * and its existing properties cannot be removed).
     *
     *     var sealedObject = Object.seal({});
     *     var frozenObject = Object.seal({});
     *
     *     assert.isSealed(sealedObject);
     *     assert.isSealed(frozenObject);
     *
     * @name isSealed
     * @alias sealed
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isSealed = function (obj, msg) {
        new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
    };
    /**
     * ### .isNotSealed(object)
     *
     * Asserts that `object` is _not_ sealed.
     *
     *     assert.isNotSealed({});
     *
     * @name isNotSealed
     * @alias notSealed
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isNotSealed = function (obj, msg) {
        new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
    };
    /**
     * ### .isFrozen(object)
     *
     * Asserts that `object` is frozen (cannot have new properties added to it
     * and its existing properties cannot be modified).
     *
     *     var frozenObject = Object.freeze({});
     *     assert.frozen(frozenObject);
     *
     * @name isFrozen
     * @alias frozen
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isFrozen = function (obj, msg) {
        new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
    };
    /**
     * ### .isNotFrozen(object)
     *
     * Asserts that `object` is _not_ frozen.
     *
     *     assert.isNotFrozen({});
     *
     * @name isNotFrozen
     * @alias notFrozen
     * @param {Object} object
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isNotFrozen = function (obj, msg) {
        new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
    };
    /**
     * ### .isEmpty(target)
     *
     * Asserts that the target does not contain any values.
     * For arrays and strings, it checks the `length` property.
     * For `Map` and `Set` instances, it checks the `size` property.
     * For non-function objects, it gets the count of own
     * enumerable string keys.
     *
     *     assert.isEmpty([]);
     *     assert.isEmpty('');
     *     assert.isEmpty(new Map);
     *     assert.isEmpty({});
     *
     * @name isEmpty
     * @alias empty
     * @param {Object|Array|String|Map|Set} target
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isEmpty = function (val, msg) {
        new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
    };
    /**
     * ### .isNotEmpty(target)
     *
     * Asserts that the target contains values.
     * For arrays and strings, it checks the `length` property.
     * For `Map` and `Set` instances, it checks the `size` property.
     * For non-function objects, it gets the count of own
     * enumerable string keys.
     *
     *     assert.isNotEmpty([1, 2]);
     *     assert.isNotEmpty('34');
     *     assert.isNotEmpty(new Set([5, 6]));
     *     assert.isNotEmpty({ key: 7 });
     *
     * @name isNotEmpty
     * @alias notEmpty
     * @param {Object|Array|String|Map|Set} target
     * @param {String} message _optional_
     * @namespace Assert
     * @api public
     */
    assert.isNotEmpty = function (val, msg) {
        new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
    };
    /*!
     * Aliases.
     */
    (function alias(name, as) {
        assert[as] = assert[name];
        return alias;
    })('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/expect.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/expect.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
module.exports = function (chai, util) {
    chai.expect = function (val, message) {
        return new chai.Assertion(val, message);
    };
    /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     *     expect.fail();
     *     expect.fail("custom error message");
     *     expect.fail(1, 2);
     *     expect.fail(1, 2, "custom error message");
     *     expect.fail(1, 2, "custom error message", ">");
     *     expect.fail(1, 2, undefined, ">");
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */
    chai.expect.fail = function (actual, expected, message, operator) {
        if (arguments.length < 2) {
            message = actual;
            actual = undefined;
        }
        message = message || 'expect.fail()';
        throw new chai.AssertionError(message, {
            actual: actual,
            expected: expected,
            operator: operator
        }, chai.expect.fail);
    };
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/should.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/should.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
module.exports = function (chai, util) {
    var Assertion = chai.Assertion;
    function loadShould() {
        // explicitly define this method as function as to have it's name to include as `ssfi`
        function shouldGetter() {
            if (this instanceof String
                || this instanceof Number
                || this instanceof Boolean
                || typeof Symbol === 'function' && this instanceof Symbol) {
                return new Assertion(this.valueOf(), null, shouldGetter);
            }
            return new Assertion(this, null, shouldGetter);
        }
        function shouldSetter(value) {
            // See https://github.com/chaijs/chai/issues/86: this makes
            // `whatever.should = someValue` actually set `someValue`, which is
            // especially useful for `global.should = require('chai').should()`.
            //
            // Note that we have to use [[DefineProperty]] instead of [[Put]]
            // since otherwise we would trigger this very setter!
            Object.defineProperty(this, 'should', {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        // modify Object.prototype to have `should`
        Object.defineProperty(Object.prototype, 'should', {
            set: shouldSetter,
            get: shouldGetter,
            configurable: true
        });
        var should = {};
        /**
         * ### .fail([message])
         * ### .fail(actual, expected, [message], [operator])
         *
         * Throw a failure.
         *
         *     should.fail();
         *     should.fail("custom error message");
         *     should.fail(1, 2);
         *     should.fail(1, 2, "custom error message");
         *     should.fail(1, 2, "custom error message", ">");
         *     should.fail(1, 2, undefined, ">");
         *
         *
         * @name fail
         * @param {Mixed} actual
         * @param {Mixed} expected
         * @param {String} message
         * @param {String} operator
         * @namespace BDD
         * @api public
         */
        should.fail = function (actual, expected, message, operator) {
            if (arguments.length < 2) {
                message = actual;
                actual = undefined;
            }
            message = message || 'should.fail()';
            throw new chai.AssertionError(message, {
                actual: actual,
                expected: expected,
                operator: operator
            }, should.fail);
        };
        /**
         * ### .equal(actual, expected, [message])
         *
         * Asserts non-strict equality (`==`) of `actual` and `expected`.
         *
         *     should.equal(3, '3', '== coerces values to strings');
         *
         * @name equal
         * @param {Mixed} actual
         * @param {Mixed} expected
         * @param {String} message
         * @namespace Should
         * @api public
         */
        should.equal = function (val1, val2, msg) {
            new Assertion(val1, msg).to.equal(val2);
        };
        /**
         * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
         *
         * Asserts that `function` will throw an error that is an instance of
         * `constructor`, or alternately that it will throw an error with message
         * matching `regexp`.
         *
         *     should.throw(fn, 'function throws a reference error');
         *     should.throw(fn, /function throws a reference error/);
         *     should.throw(fn, ReferenceError);
         *     should.throw(fn, ReferenceError, 'function throws a reference error');
         *     should.throw(fn, ReferenceError, /function throws a reference error/);
         *
         * @name throw
         * @alias Throw
         * @param {Function} function
         * @param {ErrorConstructor} constructor
         * @param {RegExp} regexp
         * @param {String} message
         * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
         * @namespace Should
         * @api public
         */
        should.Throw = function (fn, errt, errs, msg) {
            new Assertion(fn, msg).to.Throw(errt, errs);
        };
        /**
         * ### .exist
         *
         * Asserts that the target is neither `null` nor `undefined`.
         *
         *     var foo = 'hi';
         *
         *     should.exist(foo, 'foo exists');
         *
         * @name exist
         * @namespace Should
         * @api public
         */
        should.exist = function (val, msg) {
            new Assertion(val, msg).to.exist;
        };
        // negation
        should.not = {};
        /**
         * ### .not.equal(actual, expected, [message])
         *
         * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
         *
         *     should.not.equal(3, 4, 'these numbers are not equal');
         *
         * @name not.equal
         * @param {Mixed} actual
         * @param {Mixed} expected
         * @param {String} message
         * @namespace Should
         * @api public
         */
        should.not.equal = function (val1, val2, msg) {
            new Assertion(val1, msg).to.not.equal(val2);
        };
        /**
         * ### .throw(function, [constructor/regexp], [message])
         *
         * Asserts that `function` will _not_ throw an error that is an instance of
         * `constructor`, or alternately that it will not throw an error with message
         * matching `regexp`.
         *
         *     should.not.throw(fn, Error, 'function does not throw');
         *
         * @name not.throw
         * @alias not.Throw
         * @param {Function} function
         * @param {ErrorConstructor} constructor
         * @param {RegExp} regexp
         * @param {String} message
         * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
         * @namespace Should
         * @api public
         */
        should.not.Throw = function (fn, errt, errs, msg) {
            new Assertion(fn, msg).to.not.Throw(errt, errs);
        };
        /**
         * ### .not.exist
         *
         * Asserts that the target is neither `null` nor `undefined`.
         *
         *     var bar = null;
         *
         *     should.not.exist(bar, 'bar does not exist');
         *
         * @name not.exist
         * @namespace Should
         * @api public
         */
        should.not.exist = function (val, msg) {
            new Assertion(val, msg).to.not.exist;
        };
        should['throw'] = should['Throw'];
        should.not['throw'] = should.not['Throw'];
        return should;
    }
    ;
    chai.should = loadShould;
    chai.Should = loadShould;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addChainableMethod.js":
/*!****************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addChainableMethod.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/*!
 * Module variables
 */
// Check whether `Object.setPrototypeOf` is supported
var canSetPrototype = typeof Object.setPrototypeOf === 'function';
// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.
var testFn = function () { };
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
    var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
    // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
    // but then returns `undefined` as the property descriptor for `callee`. As a
    // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
    // and then filter it out if it's not an object as it should be.
    if (typeof propDesc !== 'object')
        return true;
    return !propDesc.configurable;
});
// Cache `Function` properties
var call = Function.prototype.call, apply = Function.prototype.apply;
/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */
module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
    if (typeof chainingBehavior !== 'function') {
        chainingBehavior = function () { };
    }
    var chainableBehavior = {
        method: method,
        chainingBehavior: chainingBehavior
    };
    // save the methods so we can overwrite them later, if we need to.
    if (!ctx.__methods) {
        ctx.__methods = {};
    }
    ctx.__methods[name] = chainableBehavior;
    Object.defineProperty(ctx, name, { get: function chainableMethodGetter() {
            chainableBehavior.chainingBehavior.call(this);
            var chainableMethodWrapper = function () {
                // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
                // function to be the starting point for removing implementation
                // frames from the stack trace of a failed assertion.
                //
                // However, we only want to use this function as the starting point if
                // the `lockSsfi` flag isn't set.
                //
                // If the `lockSsfi` flag is set, then this assertion is being
                // invoked from inside of another assertion. In this case, the `ssfi`
                // flag has already been set by the outer assertion.
                //
                // Note that overwriting a chainable method merely replaces the saved
                // methods in `ctx.__methods` instead of completely replacing the
                // overwritten assertion. Therefore, an overwriting assertion won't
                // set the `ssfi` or `lockSsfi` flags.
                if (!flag(this, 'lockSsfi')) {
                    flag(this, 'ssfi', chainableMethodWrapper);
                }
                var result = chainableBehavior.method.apply(this, arguments);
                if (result !== undefined) {
                    return result;
                }
                var newAssertion = new chai.Assertion();
                transferFlags(this, newAssertion);
                return newAssertion;
            };
            addLengthGuard(chainableMethodWrapper, name, true);
            // Use `Object.setPrototypeOf` if available
            if (canSetPrototype) {
                // Inherit all properties from the object by replacing the `Function` prototype
                var prototype = Object.create(this);
                // Restore the `call` and `apply` methods from `Function`
                prototype.call = call;
                prototype.apply = apply;
                Object.setPrototypeOf(chainableMethodWrapper, prototype);
            }
            // Otherwise, redefine all properties (slow!)
            else {
                var asserterNames = Object.getOwnPropertyNames(ctx);
                asserterNames.forEach(function (asserterName) {
                    if (excludeNames.indexOf(asserterName) !== -1) {
                        return;
                    }
                    var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
                    Object.defineProperty(chainableMethodWrapper, asserterName, pd);
                });
            }
            transferFlags(this, chainableMethodWrapper);
            return proxify(chainableMethodWrapper);
        }, configurable: true });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addLengthGuard.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addLengthGuard.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var fnLengthDesc = Object.getOwnPropertyDescriptor(function () { }, 'length');
/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */
module.exports = function addLengthGuard(fn, assertionName, isChainable) {
    if (!fnLengthDesc.configurable)
        return fn;
    Object.defineProperty(fn, 'length', {
        get: function () {
            if (isChainable) {
                throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +
                    ' to a compatibility issue, "length" cannot directly follow "' +
                    assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
            }
            throw Error('Invalid Chai property: ' + assertionName + '.length. See' +
                ' docs for proper usage of "' + assertionName + '".');
        }
    });
    return fn;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addMethod.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addMethod.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */
module.exports = function addMethod(ctx, name, method) {
    var methodWrapper = function () {
        // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
        // starting point for removing implementation frames from the stack trace of
        // a failed assertion.
        //
        // However, we only want to use this function as the starting point if the
        // `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked from
        // inside of another assertion. In the first case, the `ssfi` flag has
        // already been set by the overwriting assertion. In the second case, the
        // `ssfi` flag has already been set by the outer assertion.
        if (!flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', methodWrapper);
        }
        var result = method.apply(this, arguments);
        if (result !== undefined)
            return result;
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    addLengthGuard(methodWrapper, name, false);
    ctx[name] = proxify(methodWrapper, name);
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addProperty.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addProperty.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */
module.exports = function addProperty(ctx, name, getter) {
    getter = getter === undefined ? function () { } : getter;
    Object.defineProperty(ctx, name, { get: function propertyGetter() {
            // Setting the `ssfi` flag to `propertyGetter` causes this function to
            // be the starting point for removing implementation frames from the
            // stack trace of a failed assertion.
            //
            // However, we only want to use this function as the starting point if
            // the `lockSsfi` flag isn't set and proxy protection is disabled.
            //
            // If the `lockSsfi` flag is set, then either this assertion has been
            // overwritten by another assertion, or this assertion is being invoked
            // from inside of another assertion. In the first case, the `ssfi` flag
            // has already been set by the overwriting assertion. In the second
            // case, the `ssfi` flag has already been set by the outer assertion.
            //
            // If proxy protection is enabled, then the `ssfi` flag has already been
            // set by the proxy getter.
            if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
                flag(this, 'ssfi', propertyGetter);
            }
            var result = getter.call(this);
            if (result !== undefined)
                return result;
            var newAssertion = new chai.Assertion();
            transferFlags(this, newAssertion);
            return newAssertion;
        }, configurable: true });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/compareByInspect.js":
/*!**************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/compareByInspect.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");
/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */
module.exports = function compareByInspect(a, b) {
    return inspect(a) < inspect(b) ? -1 : 1;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/expectTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/expectTypes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */
var AssertionError = __webpack_require__(/*! assertion-error */ "./node_modules/assertion-error/index.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");
module.exports = function expectTypes(obj, types) {
    var flagMsg = flag(obj, 'message');
    var ssfi = flag(obj, 'ssfi');
    flagMsg = flagMsg ? flagMsg + ': ' : '';
    obj = flag(obj, 'object');
    types = types.map(function (t) { return t.toLowerCase(); });
    types.sort();
    // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
    var str = types.map(function (t, index) {
        var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
        var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
        return or + art + ' ' + t;
    }).join(', ');
    var objType = type(obj).toLowerCase();
    if (!types.some(function (expected) { return objType === expected; })) {
        throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
    }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/flag.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/flag.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */
module.exports = function flag(obj, key, value) {
    var flags = obj.__flags || (obj.__flags = Object.create(null));
    if (arguments.length === 3) {
        flags[key] = value;
    }
    else {
        return flags[key];
    }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getActual.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getActual.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */
module.exports = function getActual(obj, args) {
    return args.length > 4 ? args[4] : obj._obj;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getEnumerableProperties.js":
/*!*********************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getEnumerableProperties.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */
module.exports = function getEnumerableProperties(object) {
    var result = [];
    for (var name in object) {
        result.push(name);
    }
    return result;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getMessage.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js"), getActual = __webpack_require__(/*! ./getActual */ "./node_modules/chai/lib/chai/utils/getActual.js"), objDisplay = __webpack_require__(/*! ./objDisplay */ "./node_modules/chai/lib/chai/utils/objDisplay.js");
/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */
module.exports = function getMessage(obj, args) {
    var negate = flag(obj, 'negate'), val = flag(obj, 'object'), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, 'message');
    if (typeof msg === "function")
        msg = msg();
    msg = msg || '';
    msg = msg
        .replace(/#\{this\}/g, function () { return objDisplay(val); })
        .replace(/#\{act\}/g, function () { return objDisplay(actual); })
        .replace(/#\{exp\}/g, function () { return objDisplay(expected); });
    return flagMsg ? flagMsg + ': ' + msg : msg;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */
module.exports = function getOwnEnumerableProperties(obj) {
    return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */
module.exports = function getOwnEnumerablePropertySymbols(obj) {
    if (typeof Object.getOwnPropertySymbols !== 'function')
        return [];
    return Object.getOwnPropertySymbols(obj).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
    });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getProperties.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getProperties.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */
module.exports = function getProperties(object) {
    var result = Object.getOwnPropertyNames(object);
    function addProperty(property) {
        if (result.indexOf(property) === -1) {
            result.push(property);
        }
    }
    var proto = Object.getPrototypeOf(object);
    while (proto !== null) {
        Object.getOwnPropertyNames(proto).forEach(addProperty);
        proto = Object.getPrototypeOf(proto);
    }
    return result;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/index.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Dependencies that are used for multiple exports are required here only once
 */
var pathval = __webpack_require__(/*! pathval */ "./node_modules/pathval/index.js");
/*!
 * test utility
 */
exports.test = __webpack_require__(/*! ./test */ "./node_modules/chai/lib/chai/utils/test.js");
/*!
 * type utility
 */
exports.type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");
/*!
 * expectTypes utility
 */
exports.expectTypes = __webpack_require__(/*! ./expectTypes */ "./node_modules/chai/lib/chai/utils/expectTypes.js");
/*!
 * message utility
 */
exports.getMessage = __webpack_require__(/*! ./getMessage */ "./node_modules/chai/lib/chai/utils/getMessage.js");
/*!
 * actual utility
 */
exports.getActual = __webpack_require__(/*! ./getActual */ "./node_modules/chai/lib/chai/utils/getActual.js");
/*!
 * Inspect util
 */
exports.inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");
/*!
 * Object Display util
 */
exports.objDisplay = __webpack_require__(/*! ./objDisplay */ "./node_modules/chai/lib/chai/utils/objDisplay.js");
/*!
 * Flag utility
 */
exports.flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
/*!
 * Flag transferring utility
 */
exports.transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/*!
 * Deep equal utility
 */
exports.eql = __webpack_require__(/*! deep-eql */ "./node_modules/deep-eql/index.js");
/*!
 * Deep path info
 */
exports.getPathInfo = pathval.getPathInfo;
/*!
 * Check if a property exists
 */
exports.hasProperty = pathval.hasProperty;
/*!
 * Function name
 */
exports.getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");
/*!
 * add Property
 */
exports.addProperty = __webpack_require__(/*! ./addProperty */ "./node_modules/chai/lib/chai/utils/addProperty.js");
/*!
 * add Method
 */
exports.addMethod = __webpack_require__(/*! ./addMethod */ "./node_modules/chai/lib/chai/utils/addMethod.js");
/*!
 * overwrite Property
 */
exports.overwriteProperty = __webpack_require__(/*! ./overwriteProperty */ "./node_modules/chai/lib/chai/utils/overwriteProperty.js");
/*!
 * overwrite Method
 */
exports.overwriteMethod = __webpack_require__(/*! ./overwriteMethod */ "./node_modules/chai/lib/chai/utils/overwriteMethod.js");
/*!
 * Add a chainable method
 */
exports.addChainableMethod = __webpack_require__(/*! ./addChainableMethod */ "./node_modules/chai/lib/chai/utils/addChainableMethod.js");
/*!
 * Overwrite chainable method
 */
exports.overwriteChainableMethod = __webpack_require__(/*! ./overwriteChainableMethod */ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");
/*!
 * Compare by inspect method
 */
exports.compareByInspect = __webpack_require__(/*! ./compareByInspect */ "./node_modules/chai/lib/chai/utils/compareByInspect.js");
/*!
 * Get own enumerable property symbols method
 */
exports.getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");
/*!
 * Get own enumerable properties method
 */
exports.getOwnEnumerableProperties = __webpack_require__(/*! ./getOwnEnumerableProperties */ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");
/*!
 * Checks error against a given set of criteria
 */
exports.checkError = __webpack_require__(/*! check-error */ "./node_modules/check-error/index.js");
/*!
 * Proxify util
 */
exports.proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
/*!
 * addLengthGuard util
 */
exports.addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
/*!
 * isProxyEnabled helper
 */
exports.isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
/*!
 * isNaN method
 */
exports.isNaN = __webpack_require__(/*! ./isNaN */ "./node_modules/chai/lib/chai/utils/isNaN.js");


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/inspect.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/inspect.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
var getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "./node_modules/chai/lib/chai/utils/getProperties.js");
var getEnumerableProperties = __webpack_require__(/*! ./getEnumerableProperties */ "./node_modules/chai/lib/chai/utils/getEnumerableProperties.js");
var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");
module.exports = inspect;
/**
 * ### .inspect(obj, [showHidden], [depth], [colors])
 *
 * Echoes the value of a value. Tries to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects. Default is false.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */
function inspect(obj, showHidden, depth, colors) {
    var ctx = {
        showHidden: showHidden,
        seen: [],
        stylize: function (str) { return str; }
    };
    return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}
// Returns true if object is a DOM element.
var isDOMElement = function (object) {
    if (typeof HTMLElement === 'object') {
        return object instanceof HTMLElement;
    }
    else {
        return object &&
            typeof object === 'object' &&
            'nodeType' in object &&
            object.nodeType === 1 &&
            typeof object.nodeName === 'string';
    }
};
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (typeof ret !== 'string') {
            ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
        return primitive;
    }
    // If this is a DOM element, try to get the outer HTML.
    if (isDOMElement(value)) {
        if ('outerHTML' in value) {
            return value.outerHTML;
            // This value does not have an outerHTML attribute,
            //   it could still be an XML element
        }
        else {
            // Attempt to serialize it
            try {
                if (document.xmlVersion) {
                    var xmlSerializer = new XMLSerializer();
                    return xmlSerializer.serializeToString(value);
                }
                else {
                    // Firefox 11- do not support outerHTML
                    //   It does, however, support innerHTML
                    //   Use the following to render the element
                    var ns = "http://www.w3.org/1999/xhtml";
                    var container = document.createElementNS(ns, '_');
                    container.appendChild(value.cloneNode(false));
                    var html = container.innerHTML
                        .replace('><', '>' + value.innerHTML + '<');
                    container.innerHTML = '';
                    return html;
                }
            }
            catch (err) {
                // This could be a non-native DOM implementation,
                //   continue with the normal flow:
                //   printing the element as if it is an object.
            }
        }
    }
    // Look up the keys of the object.
    var visibleKeys = getEnumerableProperties(value);
    var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
    var name, nameSuffix;
    // Some type of object without properties can be shortcut.
    // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
    // a `stack` plus `description` property; ignore those for consistency.
    if (keys.length === 0 || (isError(value) && ((keys.length === 1 && keys[0] === 'stack') ||
        (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')))) {
        if (typeof value === 'function') {
            name = getName(value);
            nameSuffix = name ? ': ' + name : '';
            return ctx.stylize('[Function' + nameSuffix + ']', 'special');
        }
        if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
            return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
        }
        if (isError(value)) {
            return formatError(value);
        }
    }
    var base = '', array = false, typedArray = false, braces = ['{', '}'];
    if (isTypedArray(value)) {
        typedArray = true;
        braces = ['[', ']'];
    }
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
    }
    // Make functions say that they are functions
    if (typeof value === 'function') {
        name = getName(value);
        nameSuffix = name ? ': ' + name : '';
        base = ' [Function' + nameSuffix + ']';
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
    }
    // Make dates with properties first say the date
    if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
    }
    // Make error with message first say the error
    if (isError(value)) {
        return formatError(value);
    }
    if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
    }
    if (recurseTimes < 0) {
        if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        else {
            return ctx.stylize('[Object]', 'special');
        }
    }
    ctx.seen.push(value);
    var output;
    if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    }
    else if (typedArray) {
        return formatTypedArray(value);
    }
    else {
        output = keys.map(function (key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
    }
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    switch (typeof value) {
        case 'undefined':
            return ctx.stylize('undefined', 'undefined');
        case 'string':
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                .replace(/'/g, "\\'")
                .replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
        case 'number':
            if (value === 0 && (1 / value) === -Infinity) {
                return ctx.stylize('-0', 'number');
            }
            return ctx.stylize('' + value, 'number');
        case 'boolean':
            return ctx.stylize('' + value, 'boolean');
        case 'symbol':
            return ctx.stylize(value.toString(), 'symbol');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
        return ctx.stylize('null', 'null');
    }
}
function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
        if (Object.prototype.hasOwnProperty.call(value, String(i))) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        }
        else {
            output.push('');
        }
    }
    keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
    });
    return output;
}
function formatTypedArray(value) {
    var str = '[ ';
    for (var i = 0; i < value.length; ++i) {
        if (str.length >= config.truncateThreshold - 7) {
            str += '...';
            break;
        }
        str += value[i] + ', ';
    }
    str += ' ]';
    // Removing trailing `, ` if the array was not truncated
    if (str.indexOf(',  ]') !== -1) {
        str = str.replace(',  ]', ' ]');
    }
    return str;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name;
    var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
    var str;
    if (propDescriptor) {
        if (propDescriptor.get) {
            if (propDescriptor.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
            }
            else {
                str = ctx.stylize('[Getter]', 'special');
            }
        }
        else {
            if (propDescriptor.set) {
                str = ctx.stylize('[Setter]', 'special');
            }
        }
    }
    if (visibleKeys.indexOf(key) < 0) {
        name = '[' + key + ']';
    }
    if (!str) {
        if (ctx.seen.indexOf(value[key]) < 0) {
            if (recurseTimes === null) {
                str = formatValue(ctx, value[key], null);
            }
            else {
                str = formatValue(ctx, value[key], recurseTimes - 1);
            }
            if (str.indexOf('\n') > -1) {
                if (array) {
                    str = str.split('\n').map(function (line) {
                        return '  ' + line;
                    }).join('\n').substr(2);
                }
                else {
                    str = '\n' + str.split('\n').map(function (line) {
                        return '   ' + line;
                    }).join('\n');
                }
            }
        }
        else {
            str = ctx.stylize('[Circular]', 'special');
        }
    }
    if (typeof name === 'undefined') {
        if (array && key.match(/^\d+$/)) {
            return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
        }
        else {
            name = name.replace(/'/g, "\\'")
                .replace(/\\"/g, '"')
                .replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
        return prev + cur.length + 1;
    }, 0);
    if (length > 60) {
        return braces[0] +
            (base === '' ? '' : base + '\n ') +
            ' ' +
            output.join(',\n  ') +
            ' ' +
            braces[1];
    }
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
function isTypedArray(ar) {
    // Unfortunately there's no way to check if an object is a TypedArray
    // We have to check if it's one of these types
    return (typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar)));
}
function isArray(ar) {
    return Array.isArray(ar) ||
        (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}
function isRegExp(re) {
    return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}
function isDate(d) {
    return typeof d === 'object' && objectToString(d) === '[object Date]';
}
function isError(e) {
    return typeof e === 'object' && objectToString(e) === '[object Error]';
}
function objectToString(o) {
    return Object.prototype.toString.call(o);
}


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isNaN.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isNaN.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */
/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */
function isNaN(value) {
    // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
    // section's NOTE.
    return value !== value;
}
// If ECMAScript 6's Number.isNaN is present, prefer that.
module.exports = Number.isNaN || isNaN;


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isProxyEnabled.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");
/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */
module.exports = function isProxyEnabled() {
    return config.useProxy &&
        typeof Proxy !== 'undefined' &&
        typeof Reflect !== 'undefined';
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/objDisplay.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/objDisplay.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");
var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");
/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */
module.exports = function objDisplay(obj) {
    var str = inspect(obj), type = Object.prototype.toString.call(obj);
    if (config.truncateThreshold && str.length >= config.truncateThreshold) {
        if (type === '[object Function]') {
            return !obj.name || obj.name === ''
                ? '[Function]'
                : '[Function: ' + obj.name + ']';
        }
        else if (type === '[object Array]') {
            return '[ Array(' + obj.length + ') ]';
        }
        else if (type === '[object Object]') {
            var keys = Object.keys(obj), kstr = keys.length > 2
                ? keys.splice(0, 2).join(', ') + ', ...'
                : keys.join(', ');
            return '{ Object (' + kstr + ') }';
        }
        else {
            return str;
        }
    }
    else {
        return str;
    }
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwrites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */
module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
    var chainableBehavior = ctx.__methods[name];
    var _chainingBehavior = chainableBehavior.chainingBehavior;
    chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
        var result = chainingBehavior(_chainingBehavior).call(this);
        if (result !== undefined) {
            return result;
        }
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    var _method = chainableBehavior.method;
    chainableBehavior.method = function overwritingChainableMethodWrapper() {
        var result = method(_method).apply(this, arguments);
        if (result !== undefined) {
            return result;
        }
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteMethod.js":
/*!*************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteMethod.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwrites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */
module.exports = function overwriteMethod(ctx, name, method) {
    var _method = ctx[name], _super = function () {
        throw new Error(name + ' is not a function');
    };
    if (_method && 'function' === typeof _method)
        _super = _method;
    var overwritingMethodWrapper = function () {
        // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
        // function to be the starting point for removing implementation frames from
        // the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if the
        // `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked from
        // inside of another assertion. In the first case, the `ssfi` flag has
        // already been set by the overwriting assertion. In the second case, the
        // `ssfi` flag has already been set by the outer assertion.
        if (!flag(this, 'lockSsfi')) {
            flag(this, 'ssfi', overwritingMethodWrapper);
        }
        // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
        // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
        // set to the correct starting point for this assertion.
        var origLockSsfi = flag(this, 'lockSsfi');
        flag(this, 'lockSsfi', true);
        var result = method(_super).apply(this, arguments);
        flag(this, 'lockSsfi', origLockSsfi);
        if (result !== undefined) {
            return result;
        }
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    addLengthGuard(overwritingMethodWrapper, name, false);
    ctx[name] = proxify(overwritingMethodWrapper, name);
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var chai = __webpack_require__(/*! ../../chai */ "./node_modules/chai/lib/chai.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
var transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");
/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwrites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */
module.exports = function overwriteProperty(ctx, name, getter) {
    var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function () { };
    if (_get && 'function' === typeof _get.get)
        _super = _get.get;
    Object.defineProperty(ctx, name, { get: function overwritingPropertyGetter() {
            // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
            // function to be the starting point for removing implementation frames
            // from the stack trace of a failed assertion.
            //
            // However, we only want to use this function as the starting point if
            // the `lockSsfi` flag isn't set and proxy protection is disabled.
            //
            // If the `lockSsfi` flag is set, then either this assertion has been
            // overwritten by another assertion, or this assertion is being invoked
            // from inside of another assertion. In the first case, the `ssfi` flag
            // has already been set by the overwriting assertion. In the second
            // case, the `ssfi` flag has already been set by the outer assertion.
            //
            // If proxy protection is enabled, then the `ssfi` flag has already been
            // set by the proxy getter.
            if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
                flag(this, 'ssfi', overwritingPropertyGetter);
            }
            // Setting the `lockSsfi` flag to `true` prevents the overwritten
            // assertion from changing the `ssfi` flag. By this point, the `ssfi`
            // flag is already set to the correct starting point for this assertion.
            var origLockSsfi = flag(this, 'lockSsfi');
            flag(this, 'lockSsfi', true);
            var result = getter(_super).call(this);
            flag(this, 'lockSsfi', origLockSsfi);
            if (result !== undefined) {
                return result;
            }
            var newAssertion = new chai.Assertion();
            transferFlags(this, newAssertion);
            return newAssertion;
        }, configurable: true });
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/proxify.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/proxify.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
var getProperties = __webpack_require__(/*! ./getProperties */ "./node_modules/chai/lib/chai/utils/getProperties.js");
var isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");
/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 *
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */
var builtins = ['__flags', '__methods', '_obj', 'assert'];
module.exports = function proxify(obj, nonChainableMethodName) {
    if (!isProxyEnabled())
        return obj;
    return new Proxy(obj, {
        get: function proxyGetter(target, property) {
            // This check is here because we should not throw errors on Symbol properties
            // such as `Symbol.toStringTag`.
            // The values for which an error should be thrown can be configured using
            // the `config.proxyExcludedKeys` setting.
            if (typeof property === 'string' &&
                config.proxyExcludedKeys.indexOf(property) === -1 &&
                !Reflect.has(target, property)) {
                // Special message for invalid property access of non-chainable methods.
                if (nonChainableMethodName) {
                    throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +
                        property + '. See docs for proper usage of "' +
                        nonChainableMethodName + '".');
                }
                // If the property is reasonably close to an existing Chai property,
                // suggest that property to the user. Only suggest properties with a
                // distance less than 4.
                var suggestion = null;
                var suggestionDistance = 4;
                getProperties(target).forEach(function (prop) {
                    if (!Object.prototype.hasOwnProperty(prop) &&
                        builtins.indexOf(prop) === -1) {
                        var dist = stringDistanceCapped(property, prop, suggestionDistance);
                        if (dist < suggestionDistance) {
                            suggestion = prop;
                            suggestionDistance = dist;
                        }
                    }
                });
                if (suggestion !== null) {
                    throw Error('Invalid Chai property: ' + property +
                        '. Did you mean "' + suggestion + '"?');
                }
                else {
                    throw Error('Invalid Chai property: ' + property);
                }
            }
            // Use this proxy getter as the starting point for removing implementation
            // frames from the stack trace of a failed assertion. For property
            // assertions, this prevents the proxy getter from showing up in the stack
            // trace since it's invoked before the property getter. For method and
            // chainable method assertions, this flag will end up getting changed to
            // the method wrapper, which is good since this frame will no longer be in
            // the stack once the method is invoked. Note that Chai builtin assertion
            // properties such as `__flags` are skipped since this is only meant to
            // capture the starting point of an assertion. This step is also skipped
            // if the `lockSsfi` flag is set, thus indicating that this assertion is
            // being called from within another assertion. In that case, the `ssfi`
            // flag is already set to the outer assertion's starting point.
            if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
                flag(target, 'ssfi', proxyGetter);
            }
            return Reflect.get(target, property);
        }
    });
};
/**
 * # stringDistanceCapped(strA, strB, cap)
 * Return the Levenshtein distance between two strings, but no more than cap.
 * @param {string} strA
 * @param {string} strB
 * @param {number} number
 * @return {number} min(string distance between strA and strB, cap)
 * @api private
 */
function stringDistanceCapped(strA, strB, cap) {
    if (Math.abs(strA.length - strB.length) >= cap) {
        return cap;
    }
    var memo = [];
    // `memo` is a two-dimensional array containing distances.
    // memo[i][j] is the distance between strA.slice(0, i) and
    // strB.slice(0, j).
    for (var i = 0; i <= strA.length; i++) {
        memo[i] = Array(strB.length + 1).fill(0);
        memo[i][0] = i;
    }
    for (var j = 0; j < strB.length; j++) {
        memo[0][j] = j;
    }
    for (var i = 1; i <= strA.length; i++) {
        var ch = strA.charCodeAt(i - 1);
        for (var j = 1; j <= strB.length; j++) {
            if (Math.abs(i - j) >= cap) {
                memo[i][j] = cap;
                continue;
            }
            memo[i][j] = Math.min(memo[i - 1][j] + 1, memo[i][j - 1] + 1, memo[i - 1][j - 1] +
                (ch === strB.charCodeAt(j - 1) ? 0 : 1));
        }
    }
    return memo[strA.length][strB.length];
}


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/test.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/test.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/*!
 * Module dependencies
 */
var flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");
/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */
module.exports = function test(obj, args) {
    var negate = flag(obj, 'negate'), expr = args[0];
    return negate ? !expr : expr;
};


/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/transferFlags.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/transferFlags.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAssertion = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */
module.exports = function transferFlags(assertion, object, includeAll) {
    var flags = assertion.__flags || (assertion.__flags = Object.create(null));
    if (!object.__flags) {
        object.__flags = Object.create(null);
    }
    includeAll = arguments.length === 3 ? includeAll : true;
    for (var flag in flags) {
        if (includeAll ||
            (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {
            object.__flags[flag] = flags[flag];
        }
    }
};


/***/ }),

/***/ "./node_modules/check-error/index.js":
/*!*******************************************!*\
  !*** ./node_modules/check-error/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */
/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */
function compatibleInstance(thrown, errorLike) {
    return errorLike instanceof Error && thrown === errorLike;
}
/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */
function compatibleConstructor(thrown, errorLike) {
    if (errorLike instanceof Error) {
        // If `errorLike` is an instance of any error we compare their constructors
        return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
    }
    else if (errorLike.prototype instanceof Error || errorLike === Error) {
        // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
        return thrown.constructor === errorLike || thrown instanceof errorLike;
    }
    return false;
}
/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */
function compatibleMessage(thrown, errMatcher) {
    var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;
    if (errMatcher instanceof RegExp) {
        return errMatcher.test(comparisonString);
    }
    else if (typeof errMatcher === 'string') {
        return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
    }
    return false;
}
/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
    var name = '';
    if (typeof constructorFn.name === 'undefined') {
        // Here we run a polyfill if constructorFn.name is not defined
        var match = String(constructorFn).match(functionNameMatch);
        if (match) {
            name = match[1];
        }
    }
    else {
        name = constructorFn.name;
    }
    return name;
}
/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */
function getConstructorName(errorLike) {
    var constructorName = errorLike;
    if (errorLike instanceof Error) {
        constructorName = getFunctionName(errorLike.constructor);
    }
    else if (typeof errorLike === 'function') {
        // If `err` is not an instance of Error it is an error constructor itself or another function.
        // If we've got a common function we get its name, otherwise we may need to create a new instance
        // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
        constructorName = getFunctionName(errorLike).trim() ||
            getFunctionName(new errorLike()); // eslint-disable-line new-cap
    }
    return constructorName;
}
/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */
function getMessage(errorLike) {
    var msg = '';
    if (errorLike && errorLike.message) {
        msg = errorLike.message;
    }
    else if (typeof errorLike === 'string') {
        msg = errorLike;
    }
    return msg;
}
module.exports = {
    compatibleInstance: compatibleInstance,
    compatibleConstructor: compatibleConstructor,
    compatibleMessage: compatibleMessage,
    getMessage: getMessage,
    getConstructorName: getConstructorName,
};


/***/ }),

/***/ "./node_modules/crossecore/src/AbstractCollection.ts":
/*!***********************************************************!*\
  !*** ./node_modules/crossecore/src/AbstractCollection.ts ***!
  \***********************************************************/
/*! exports provided: AbstractCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractCollection", function() { return AbstractCollection; });
/* harmony import */ var _ArrayList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ArrayList */ "./node_modules/crossecore/src/ArrayList.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var AbstractCollection = /** @class */ (function (_super) {
    __extends(AbstractCollection, _super);
    //protected internalCollection:ArrayList<T>;
    /*
    constructor(owner:InternalEObject ,  featureId:number)
    {

        super( owner, featureId, AbstractCollection.NO_FEATURE)
    }
    */
    function AbstractCollection(owner, featureId, oppositeFeatureId) {
        var _this = _super.call(this) || this;
        _this.featureId = AbstractCollection.NO_FEATURE;
        _this.oppositeFeatureId = AbstractCollection.NO_FEATURE;
        _this.createNotification = function (eventType, oldValue, newValue, index, wasSet) {
            return new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_2__["ENotificationImpl"](_this.owner, eventType, _this.featureId, oldValue, newValue);
        };
        //protected isUnique:boolean = true;
        _this.isUnique = function () {
            return false;
        };
        //Base functions START
        /*
         public new void Add(T element)
         {
         add(element);
         }
         */
        _this.add = function (element) {
            if (_this.isUnique() && _this.containsX(element)) {
                return false;
            }
            else {
                _this.addUnique(element);
                return true;
            }
        };
        _this.addAll = function (collection) {
            for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
                var item = collection_1[_i];
                _this.add(item); //TODO push or add?
            }
            return true; //TODO
        };
        _this.remove = function (item) {
            if (_this.containsX(item)) {
                _this.remove_(item);
                return true;
            }
            else {
                return false;
            }
        };
        _this.remove_ = function (element) {
            if (_this.isNotificationRequired()) {
                var notifications = null;
                //bool oldIsSet = isSet();
                var oldIsSet = _this.size() != 0;
                /*
                 if (hasShadow())
                 {
                 notifications = shadowRemove(basicGet(index), null);
                 }
                 */
                _this.removeX(element);
                var oldObject = element;
                //TODO determine index if possible
                var index = 1000;
                var notification = _this.createNotification(_NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].REMOVE, oldObject, null, index, oldIsSet);
                if (_this.hasInverse() && oldObject != null) {
                    notifications = _this.inverseRemove(oldObject, notifications);
                    if (notifications == null) {
                        _this.dispatchNotification(notification);
                    }
                    else {
                        notifications.add(notification);
                        notifications.dispatch();
                    }
                }
                else {
                    if (notifications == null) {
                        _this.dispatchNotification(notification);
                    }
                    else {
                        notifications.add(notification);
                        notifications.dispatch();
                    }
                }
                return oldObject;
            }
            else {
                _this.removeX(element);
                var oldObject = element;
                if (_this.hasInverse() && oldObject != null) {
                    var notifications = _this.inverseRemove(oldObject, null);
                    if (notifications != null)
                        notifications.dispatch();
                }
                return oldObject;
            }
        };
        //Base functions END
        //EcoreEList START
        _this.isNotificationRequired = function () {
            if (_this.owner != null) {
                return _this.owner.eNotificationRequired();
            }
            return false;
        };
        _this.basicAdd = function (element, notifications) {
            if (_this.isNotificationRequired()) {
                var index = _this.length;
                var oldIsSet = _this.length > 0; // isSet();
                //doAddUnique(index, object);
                _this.push(element);
                var notification = _this.createNotification(_NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].ADD, null, element, index, oldIsSet);
                if (notifications == null) {
                    notifications = notification;
                }
                else {
                    notifications.add(notification);
                }
            }
            else {
                _this.push(element);
            }
            return notifications;
        };
        _this.basicRemove = function (element, notifications) {
            //int index = indexOf(object);
            //if (index != -1)
            if (_this.containsX(element)) {
                if (_this.isNotificationRequired()) {
                    //bool oldIsSet = isSet();
                    var oldIsSet = _this.size() != 0;
                    //Object oldObject = doRemove(index);
                    var oldObject = element;
                    //TODO fix me:
                    var index = 1000;
                    _this.removeX(element);
                    var notification = _this.createNotification(_NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].REMOVE, oldObject, null, index, oldIsSet);
                    if (notifications == null) {
                        notifications = notification;
                    }
                    else {
                        notifications.add(notification);
                    }
                }
                else {
                    //doRemove(index);
                    _this.removeX(element);
                }
            }
            return notifications;
        };
        _this.inverseAdd = function (element, notifications) {
            //Double assertions: see https://basarat.gitbooks.io/typescript/content/docs/types/type-assertion.html
            var internalEObject = element;
            if (_this.hasNavigableInverse()) {
                if (!_this.hasInstanceClass()) {
                    return internalEObject.eInverseAdd(_this.owner, internalEObject.eClass().getFeatureID(_this.getInverseEReference()), null, notifications);
                }
                else {
                    return internalEObject.eInverseAdd(_this.owner, _this.oppositeFeatureId, _this.getInverseFeatureClass(), notifications);
                }
            }
            else {
                return internalEObject.eInverseAdd(_this.owner, AbstractCollection.EOPPOSITE_FEATURE_BASE - _this.featureId, null, notifications);
            }
        };
        _this.inverseRemove = function (element, notifications) {
            var internalEObject = element;
            if (_this.hasNavigableInverse()) {
                if (!_this.hasInstanceClass()) {
                    return internalEObject.eInverseRemove(_this.owner, internalEObject.eClass().getFeatureID(_this.getInverseEReference()), null, notifications);
                }
                else {
                    return internalEObject.eInverseRemove(_this.owner, _this.oppositeFeatureId, _this.getInverseFeatureClass(), notifications);
                }
            }
            else {
                return internalEObject.eInverseRemove(_this.owner, AbstractCollection.EOPPOSITE_FEATURE_BASE - _this.featureId, null, notifications);
            }
        };
        _this.hasNavigableInverse = function () {
            return _this.oppositeFeatureId >= 0;
        };
        _this.hasInstanceClass = function () {
            //from EcoreEList, needed for generics
            return true;
        };
        _this.hasInverse = function () {
            return _this.oppositeFeatureId != AbstractCollection.NO_FEATURE;
            /*
             try
             {
             //non-navigable inverse is the containment feature
             var eclass = _owner.eClass();
             var estructuralfeatures = eclass.eStructuralFeatures;
    
             var ereference = _owner.eClass().getEStructuralFeature(_featureId) as EReference;
    
             return ereference.eOpposite.containment;
             }
             catch (NullReferenceException e)
             {
             return false;
             }
             */
        };
        _this.getEStructuralFeature = function () {
            //from EcoreEList
            //return owner.eClass().getEStructuralFeature(getFeatureID());
            return _this.owner.eClass().getEStructuralFeature(_this.featureId);
        };
        _this.getInverseEReference = function () {
            //from EcoreEList
            //return ((EReference)getEStructuralFeature()).getEOpposite();
            return _this.getEStructuralFeature().eOpposite;
        };
        _this.getInverseFeatureClass = function () {
            //from EcoreEList
            //return ((EClass)getEStructuralFeature().getEType()).getInstanceClass();
            //TODO fix
            //return ((EClass)getEStructuralFeature().eType).instanceClass;
            return null;
        };
        _this.dispatchNotification = function (notification) {
            //from EcoreElist
            _this.owner.eNotify(notification);
        };
        _this.addUnique = function (element) {
            if (_this.isNotificationRequired()) {
                //int index = size;
                var index = _this.size();
                //boolean oldIsSet = isSet();
                var oldIsSet = _this.notEmpty();
                //doAddUnique(object);
                _this.addX(element);
                var notification = _this.createNotification(_NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].ADD, null, element, index, oldIsSet);
                if (_this.hasInverse()) {
                    var notifications = _this.inverseAdd(element, null);
                    /*
                     if (hasShadow())
                     {
                     notifications = shadowAdd(object, notifications);
                     }
                     */
                    if (notifications == null) {
                        _this.dispatchNotification(notification);
                    }
                    else {
                        notifications.add(notification);
                        notifications.dispatch();
                    }
                }
                else {
                    _this.dispatchNotification(notification);
                }
            }
            else {
                //doAddUnique(object);
                _this.addX(element);
                if (_this.hasInverse()) {
                    var notifications = _this.inverseAdd(element, null);
                    if (notifications != null) {
                        notifications.dispatch();
                    }
                }
            }
        };
        //EcoreEList END
        //OCL START
        _this.sortedBy = function (lambda) {
            new Error("NotImplemented");
        };
        /*
        public Collection<T2> flatten<T2> = ()=>
        {
    
            var result = new Set<T2>();
    
            for (let element:any in internalCollection)
            {
                if (element instanceof Collection<T2>)
                {
    
                    var subcollection = <Collection<T2>> element;
                    for (let e:T2 of subcollection.flatten<T2>().asSet())
                    {
                        result.add(e);
                    }
    
                }
            else if (element instanceof T2)
                {
                    var e = <T2>element;
                    result.add(e);
    
                }
            }
    
            return result;
    
        }
        */
        _this.equals = function (c) {
            throw new Error("operation not implemented");
        };
        _this.notEquals = function (c) {
            return !_this.equals(c);
        };
        _this.size = function () {
            return _this.length;
        };
        /* Already defined in Array.prototype
         public includes = (element:T):boolean=>{

         return this.indexOf(element)!==-1;
         }
         */
        //FIXME
        _this.includes___ = function (element) {
            return _this.containsX(element);
        };
        _this.excludes = function (element) {
            return !_this.containsX(element);
        };
        _this.count = function (element) {
            throw new Error("operation not implemented");
        };
        _this.includesAll = function (c) {
            throw new Error("operation not implemented");
        };
        _this.excludesAll = function (c) {
            throw new Error("operation not implemented");
        };
        _this.isEmpty = function () {
            return _this.length === 0;
        };
        _this.notEmpty = function () {
            return _this.length > 0;
        };
        _this.max = function () {
            throw new Error("operation not implemented");
        };
        _this.min = function () {
            throw new Error("operation not implemented");
        };
        _this.sum = function () {
            throw new Error("operation not implemented");
        };
        _this.any = function (lambda) {
            //TODO nullpointer
            return _this.filter(lambda)[0];
        };
        _this.exists = function (lambda) {
            return _this.some(lambda);
        };
        _this.forAll = function (lambda) {
            return _this.every(lambda);
        };
        _this.owner = owner !== undefined ? owner : null;
        _this.featureId = featureId !== undefined ? featureId : AbstractCollection.NO_FEATURE;
        _this.oppositeFeatureId = oppositeFeatureId !== undefined ? oppositeFeatureId : AbstractCollection.NO_FEATURE;
        return _this;
        //this.internalCollection = new ArrayList<T>();
    }
    AbstractCollection.EOPPOSITE_FEATURE_BASE = -1;
    AbstractCollection.NO_FEATURE = Number.MIN_VALUE;
    return AbstractCollection;
}(_ArrayList__WEBPACK_IMPORTED_MODULE_0__["ArrayList"]));

//}


/***/ }),

/***/ "./node_modules/crossecore/src/AllInstances.ts":
/*!*****************************************************!*\
  !*** ./node_modules/crossecore/src/AllInstances.ts ***!
  \*****************************************************/
/*! exports provided: AllInstances */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllInstances", function() { return AllInstances; });
/* harmony import */ var _EClassImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EClassImpl */ "./node_modules/crossecore/src/EClassImpl.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */

var AllInstances = /** @class */ (function () {
    function AllInstances() {
        this.instances = new Map();
        this.subclasses = new Map();
    }
    AllInstances.prototype.put = function (i, classname) {
        var list;
        if (this.instances.has(classname)) {
            list = this.instances.get(classname);
        }
        else {
            list = new Array();
        }
        list.push(i);
        this.instances.set(classname, list);
    };
    AllInstances.prototype.allInstances = function (eclass) {
        var result = new Array();
        if (this.subclasses.size === 0) {
            for (var _i = 0, _a = eclass.ePackage.eClassifiers; _i < _a.length; _i++) {
                var eclassifier = _a[_i];
                if (eclassifier instanceof _EClassImpl__WEBPACK_IMPORTED_MODULE_0__["EClassImpl"]) {
                    if (!this.subclasses.has(eclassifier)) {
                        this.subclasses.set(eclassifier, new Array());
                    }
                    for (var _b = 0, _c = eclassifier.eSuperTypes; _b < _c.length; _b++) {
                        var supertype = _c[_b];
                        if (!this.subclasses.has(supertype)) {
                            this.subclasses.set(supertype, new Array());
                        }
                        var list = this.subclasses.get(supertype);
                        list.push(eclassifier);
                        this.subclasses.set(supertype, list);
                    }
                }
            }
        }
        console.log("here " + this.subclasses.size);
        var queue = new Array(); //this.subclasses.get(eclass);
        queue.push(eclass);
        do {
            var next = queue.shift();
            if (this.instances.has(next.name)) {
                console.log(next.name + ": " + this.instances.get(next.name).length);
                for (var _d = 0, _e = this.instances.get(next.name); _d < _e.length; _d++) {
                    var y = _e[_d];
                    result.push(y);
                }
            }
            if (this.subclasses.has(next)) {
                for (var _f = 0, _g = this.subclasses.get(next); _f < _g.length; _f++) {
                    var subclass = _g[_f];
                    if (subclass instanceof _EClassImpl__WEBPACK_IMPORTED_MODULE_0__["EClassImpl"]) {
                        queue.push(subclass);
                    }
                }
            }
        } while (queue.length > 0);
        return result;
    };
    AllInstances.INSTANCE = new AllInstances();
    return AllInstances;
}());



/***/ }),

/***/ "./node_modules/crossecore/src/ArrayList.ts":
/*!**************************************************!*\
  !*** ./node_modules/crossecore/src/ArrayList.ts ***!
  \**************************************************/
/*! exports provided: ArrayList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayList", function() { return ArrayList; });
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ArrayList = /** @class */ (function (_super) {
    __extends(ArrayList, _super);
    function ArrayList() {
        /*
        private array:Array<T> = new Array<T>();
    
        get length():number{
            return this.array.length;
        }
    
        public push = (element:T):void=>{
            this.array.push(element);
        }
    
        public filter = (lambda):T[]=>{
            //TODO set type of lambda
            return this.array.filter(lambda);
        }
    
        public every = (lambda):boolean=>{
            //TODO set type of lambda
            return this.array.every(lambda);
        }
    
        public some = (lambda):boolean=>{
            //TODO set type of lambda
            return this.array.some(lambda);
        }
        */
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containsX = function (element) {
            return _this.indexOf(element) > -1;
        };
        _this.sizeX = function () {
            return _this.length;
        };
        _this.addX = function (element) {
            _this.push(element);
            return true;
        };
        _this.removeX = function (element) {
            var index = _this.indexOf(element);
            if (index > -1) {
                _this.splice(index, 1);
                return true;
            }
            return false;
        };
        _this.isEmptyX = function () {
            return _this.length === 0;
        };
        _this.clear = function () {
            _this.splice(0, _this.length);
        };
        return _this;
    }
    return ArrayList;
}(Array));



/***/ }),

/***/ "./node_modules/crossecore/src/BasicEObjectImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/BasicEObjectImpl.ts ***!
  \*********************************************************/
/*! exports provided: BasicEObjectImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicEObjectImpl", function() { return BasicEObjectImpl; });
/* harmony import */ var _BasicNotifierImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BasicNotifierImpl */ "./node_modules/crossecore/src/BasicNotifierImpl.ts");
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BasicEObjectImpl = /** @class */ (function (_super) {
    __extends(BasicEObjectImpl, _super);
    function BasicEObjectImpl() {
        var _this = _super.call(this) || this;
        _this._eContainer = null;
        _this._eContainerFeatureID = -1;
        _this._eStaticClass = null;
        _this._uuid = BasicEObjectImpl.generateUUID();
        return _this;
    }
    BasicEObjectImpl.prototype.eBasicSetContainer = function (newContainer, newContainerFeatureID, notifications) {
        this.eBasicSetContainer_(newContainer, newContainerFeatureID);
        return notifications;
    };
    //TODO fix quickfix for overloading
    BasicEObjectImpl.prototype.eBasicSetContainer_ = function (newContainer, newContainerFeatureID) {
        this._eContainer = newContainer;
        this._eContainerFeatureID = newContainerFeatureID;
    };
    BasicEObjectImpl.prototype.eInternalContainer = function () {
        return this._eContainer;
    };
    BasicEObjectImpl.prototype.eContainerFeatureID = function () {
        return this._eContainerFeatureID;
    };
    BasicEObjectImpl.prototype.eBasicRemoveFromContainer = function (notifications) {
        return notifications;
    };
    BasicEObjectImpl.prototype.eGet = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 1) {
            return this.eGet_EStructuralFeature(args[0]);
        }
        else if (args.length === 2) {
            return this.eGet_EStructuralFeature_boolean(args[0], args[1]);
        }
        else if (args.length === 3) {
            if (typeof args[0] === "number" &&
                typeof args[1] === "boolean" &&
                typeof args[2] === "boolean") {
                return this.eGet_number_boolean_boolean(args[0], args[1], args[2]);
            }
            else {
                return this.eGet_EStructuralFeature_boolean_boolean(args[0], args[1], args[2]);
            }
        }
    };
    BasicEObjectImpl.prototype.eGet_EStructuralFeature_boolean_boolean = function (feature, resolve, coreType) {
        var featureID = this.eDerivedStructuralFeatureID_EStructuralFeature(feature);
        /*
         if (featureID >= 0)
         {
         */
        return this.eGet(featureID, resolve, coreType);
        /*
         }
         else
         {
         return eOpenGet(eFeature, resolve);
         }
         */
    };
    BasicEObjectImpl.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        var eFeature = this.eClass().getEStructuralFeature(featureID);
        return eFeature;
    };
    BasicEObjectImpl.prototype.eDerivedStructuralFeatureID_EStructuralFeature = function (eStructuralFeature) {
        var containerClass = eStructuralFeature.getContainerClass();
        /*
         Class <?> containerClass = eStructuralFeature.getContainerClass();
         if (containerClass == null)
         {
         return eClass().getFeatureID(eStructuralFeature);
         }
         else
         {
         assert eClass().getEAllStructuralFeatures().contains(eStructuralFeature) : "The feature '" + eStructuralFeature.getName() + "' is not a valid feature";
         */
        return this.eDerivedStructuralFeatureID_number_Function(eStructuralFeature.getFeatureID(), containerClass);
        /*}*/
    };
    BasicEObjectImpl.prototype.eDerivedStructuralFeatureID_number_Function = function (baseFeatureID, baseClass) {
        return baseFeatureID;
    };
    BasicEObjectImpl.prototype.eDerivedStructuralFeatureID = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 1) {
            return this.eDerivedStructuralFeatureID_EStructuralFeature(args[0]);
        }
        else if (args.length === 2) {
            return this.eDerivedStructuralFeatureID_number_Function(args[0], args[1]);
        }
    };
    BasicEObjectImpl.prototype.eClass = function () {
        return this.eStaticClass();
    };
    // Subclasses MUST override this function
    BasicEObjectImpl.prototype.eStaticClass = function () {
        return this._eStaticClass;
    };
    BasicEObjectImpl.prototype.eInverseAdd = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 4) {
            return this.eInverseAdd4(args[0], args[1], args[2], args[3]);
        }
        else {
            return this.eInverseAdd3(args[0], args[1], args[2]);
        }
    };
    //public eInverseAddFromBasicEObjectImpl = this.eInverseAdd;
    BasicEObjectImpl.prototype.eInverseAdd4 = function (otherEnd, featureID, baseClass, msgs) {
        if (featureID >= 0) {
            //return eInverseAdd(otherEnd, eDerivedStructuralFeatureID(featureID, baseClass), msgs);
            return this.eInverseAdd3(otherEnd, featureID, msgs);
        }
        else {
            if (this.eInternalContainer() != null) {
                msgs = this.eBasicRemoveFromContainer(msgs);
            }
            return this.eBasicSetContainer(otherEnd, featureID, msgs);
        }
        //return this.eInverseAdd(otherEnd, featureID, msgs);
    };
    BasicEObjectImpl.prototype.eInverseRemove = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 4) {
            return this.eInverseRemove4(args[0], args[1], args[2], args[3]);
        }
        else {
            return this.eInverseRemove3(args[0], args[1], args[2]);
        }
    };
    //public eInverseRemoveFromBasicEObjectImpl = this.eInverseRemove;
    BasicEObjectImpl.prototype.eInverseAdd3 = function (otherEnd, featureID, msgs) {
        //return eDynamicInverseAdd(otherEnd, featureID, msgs);
        //call generated function
        return msgs;
    };
    //TODO fix quickfix and create a delegator mehtod for eInverseRemove
    BasicEObjectImpl.prototype.eInverseRemove4 = function (otherEnd, featureID, baseClass, msgs) {
        if (featureID >= 0) {
            //return eInverseRemove(otherEnd, eDerivedStructuralFeatureID(featureID, baseClass), msgs);
            return this.eInverseRemove(otherEnd, featureID, msgs);
        }
        else {
            return this.eBasicSetContainer(null, featureID, msgs);
        }
    };
    BasicEObjectImpl.prototype.eInverseRemove3 = function (otherEnd, featureID, msgs) {
        //return eDynamicInverseRemove(otherEnd, featureID, msgs);
        return msgs;
    };
    BasicEObjectImpl.prototype.eIsSet = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eContainmentFeature = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eIsProxy = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eContainingFeature = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eContainer = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eInvoke = function (operation, args) {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eSet = function (feature, newValue) {
        var featureID = this.eDerivedStructuralFeatureID_EStructuralFeature(feature);
        /*
        if (featureID >= 0)
        {
        */
        this.eSet_number_any(featureID, newValue);
        /*}
        else
        {
            eOpenSet(eFeature, newValue);
        }
        */
    };
    ;
    BasicEObjectImpl.prototype.eSet_number_any = function (featureId, newValue) {
        //is overridden by subclasses
    };
    ;
    BasicEObjectImpl.prototype.eResource = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eContents = function () {
        var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
        for (var _i = 0, _a = this.eClass().eAllReferences; _i < _a.length; _i++) {
            var feature = _a[_i];
            if (feature.containment) {
                if (feature.many) {
                    var list = this.eGet(feature);
                    for (var _b = 0, list_1 = list; _b < list_1.length; _b++) {
                        var item = list_1[_b];
                        //TODO could be addAll
                        result.add(item);
                    }
                }
                else {
                    var other = this.eGet(feature);
                    if (other !== null) {
                        result.add(other);
                    }
                }
            }
        }
        return result;
    };
    ;
    BasicEObjectImpl.prototype.eCrossReferences = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eAllContents = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eGet_EStructuralFeature = function (feature) {
        return this.eGet_EStructuralFeature_boolean(feature, true);
    };
    ;
    BasicEObjectImpl.prototype.eGet_EStructuralFeature_boolean = function (feature, resolve) {
        return this.eGet_EStructuralFeature_boolean_boolean(feature, true, true);
    };
    ;
    BasicEObjectImpl.prototype.eUnset = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    BasicEObjectImpl.prototype.eURIFragmentSegment = function (eFeature, eObject) {
        return undefined;
    };
    BasicEObjectImpl.prototype.eObjectForURIFragmentSegment = function (uriFragmentSegment) {
        return undefined;
    };
    BasicEObjectImpl.prototype.eSetClass = function (eClass) {
    };
    BasicEObjectImpl.prototype.eBaseStructuralFeatureID = function (derivedFeatureID, baseClass) {
        return undefined;
    };
    BasicEObjectImpl.prototype.eDerivedOperationID = function (baseOperationID, baseClass) {
        return undefined;
    };
    BasicEObjectImpl.prototype.eResolveProxy = function (proxy) {
        return undefined;
    };
    BasicEObjectImpl.generateUUID = function () {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
        });
        return uuid;
    };
    BasicEObjectImpl.EOPPOSITE_FEATURE_BASE = -1;
    return BasicEObjectImpl;
}(_BasicNotifierImpl__WEBPACK_IMPORTED_MODULE_0__["BasicNotifierImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/BasicNotifierImpl.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/BasicNotifierImpl.ts ***!
  \**********************************************************/
/*! exports provided: BasicNotifierImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicNotifierImpl", function() { return BasicNotifierImpl; });
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var BasicNotifierImpl = /** @class */ (function () {
    function BasicNotifierImpl() {
        var _this = this;
        this._eAdapters = null;
        this.eAdapters = function () {
            if (_this._eAdapters == null) {
                _this._eAdapters = new Array();
            }
            return _this._eAdapters;
        };
        //protected BasicEList<Adapter> eBasicAdapters()
        this.eBasicAdapters = function () {
            return null;
        };
        this.eNotify = function (notification) {
            for (var _i = 0, _a = _this.eAdapters(); _i < _a.length; _i++) {
                var adapter = _a[_i];
                adapter.notifyChanged(notification);
            }
        };
        this.eNotificationRequired = function () {
            return _this.eAdapters().length > 0;
        };
    }
    return BasicNotifierImpl;
}());



/***/ }),

/***/ "./node_modules/crossecore/src/EAnnotationBase.ts":
/*!********************************************************!*\
  !*** ./node_modules/crossecore/src/EAnnotationBase.ts ***!
  \********************************************************/
/*! exports provided: EAnnotationBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EAnnotationBase", function() { return EAnnotationBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _EcoreEMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EcoreEMap */ "./node_modules/crossecore/src/EcoreEMap.ts");
/* harmony import */ var _EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EStringToStringMapEntryBase */ "./node_modules/crossecore/src/EStringToStringMapEntryBase.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var _EModelElementImpl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./EModelElementImpl */ "./node_modules/crossecore/src/EModelElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();








var EAnnotationBase = /** @class */ (function (_super) {
    __extends(EAnnotationBase, _super);
    function EAnnotationBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._source = '';
        _this._contents = null;
        _this._references = null;
        return _this;
    }
    Object.defineProperty(EAnnotationBase.prototype, "source", {
        get: function () {
            return this._source;
        },
        set: function (value) {
            this._source = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EAnnotationBase.prototype, "details", {
        get: function () {
            if (this._details === null) {
                this._details = new _EcoreEMap__WEBPACK_IMPORTED_MODULE_3__["EcoreEMap"](_EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_4__["EStringToStringMapEntryBase"].eStaticClass, _EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_4__["EStringToStringMapEntryBase"], this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_DETAILS);
            }
            return this._details;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EAnnotationBase.prototype, "eModelElement", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT)
                return null;
            return this.eInternalContainer();
        },
        set: function (value) {
            if (value != this.eInternalContainer()) {
                var msgs = null;
                if (this.eInternalContainer() != null) {
                    msgs = this.eInternalContainer().eInverseRemove(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS, /*EAnnotation*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS, /*EAnnotation*/ null, msgs);
                }
                msgs = this.basicSetEModelElement(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EAnnotationBase.prototype, "contents", {
        get: function () {
            if (this._contents === null) {
                this._contents = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_CONTENTS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_6__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_CONTENTS);
            }
            return this._contents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EAnnotationBase.prototype, "references", {
        get: function () {
            if (this._references === null) {
                this._references = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_REFERENCES, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_6__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_REFERENCES);
            }
            return this._references;
        },
        enumerable: false,
        configurable: true
    });
    EAnnotationBase.prototype.eStaticClass = function () {
        return EAnnotationBase.eStaticClass;
    };
    EAnnotationBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEModelElement(otherEnd, msgs);
        }
        //return this.eInverseAddFromEModelElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEAnnotation = this.eInverseAdd;
    EAnnotationBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT:
                return this.basicSetEModelElement(null, msgs);
        }
        //return this.eInverseRemoveFromEModelElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEAnnotation = this.eInverseRemove;
    EAnnotationBase.prototype.basicSetEModelElement = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT, msgs);
        return msgs;
    };
    EAnnotationBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_SOURCE:
                return this.source;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_DETAILS:
                return this.details;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT:
                return this.eModelElement;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_CONTENTS:
                return this.contents;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_REFERENCES:
                return this.references;
        }
        //return this.eGetFromEModelElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EAnnotationBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_SOURCE:
                this.source = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_DETAILS:
                this.details.set(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT:
                this.eModelElement = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_CONTENTS:
                this.contents.clear();
                this.contents.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["EcorePackageLiterals"].EANNOTATION_REFERENCES:
                this.references.clear();
                this.references.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EAnnotationBase;
}(_EModelElementImpl__WEBPACK_IMPORTED_MODULE_7__["EModelElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EAnnotationImpl.ts":
/*!********************************************************!*\
  !*** ./node_modules/crossecore/src/EAnnotationImpl.ts ***!
  \********************************************************/
/*! exports provided: EAnnotationImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EAnnotationImpl", function() { return EAnnotationImpl; });
/* harmony import */ var _EAnnotationBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EAnnotationBase */ "./node_modules/crossecore/src/EAnnotationBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EAnnotationImpl = /** @class */ (function (_super) {
    __extends(EAnnotationImpl, _super);
    function EAnnotationImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EAnnotationImpl;
}(_EAnnotationBase__WEBPACK_IMPORTED_MODULE_0__["EAnnotationBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EAttributeBase.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EAttributeBase.ts ***!
  \*******************************************************/
/*! exports provided: EAttributeBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EAttributeBase", function() { return EAttributeBase; });
/* harmony import */ var _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EStructuralFeatureImpl */ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EAttributeBase = /** @class */ (function (_super) {
    __extends(EAttributeBase, _super);
    function EAttributeBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._iD = false;
        return _this;
    }
    Object.defineProperty(EAttributeBase.prototype, "iD", {
        get: function () {
            return this._iD;
        },
        set: function (value) {
            this._iD = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EAttributeBase.prototype, "eAttributeType", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    EAttributeBase.prototype.eStaticClass = function () {
        return EAttributeBase.eStaticClass;
    };
    EAttributeBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_EGENERICTYPE:
                return this.eGenericType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_CHANGEABLE:
                return this.changeable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_VOLATILE:
                return this.volatile;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_TRANSIENT:
                return this.transient;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_DEFAULTVALUELITERAL:
                return this.defaultValueLiteral;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_UNSETTABLE:
                return this.unsettable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_DERIVED:
                return this.derived;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_ECONTAININGCLASS:
                return this.eContainingClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_ID:
                return this.iD;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_EATTRIBUTETYPE:
                return this.eAttributeType;
        }
        //return this.eGetFromEStructuralFeature(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EAttributeBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EATTRIBUTE_ID:
                this.iD = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EAttributeBase;
}(_EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__["EStructuralFeatureImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EAttributeImpl.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EAttributeImpl.ts ***!
  \*******************************************************/
/*! exports provided: EAttributeImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EAttributeImpl", function() { return EAttributeImpl; });
/* harmony import */ var _EAttributeBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EAttributeBase */ "./node_modules/crossecore/src/EAttributeBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EAttributeImpl = /** @class */ (function (_super) {
    __extends(EAttributeImpl, _super);
    function EAttributeImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //implement your generated class here
    EAttributeImpl.prototype.getFeatureID = function () {
        return this.featureID;
    };
    ;
    return EAttributeImpl;
}(_EAttributeBase__WEBPACK_IMPORTED_MODULE_0__["EAttributeBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EClassBase.ts":
/*!***************************************************!*\
  !*** ./node_modules/crossecore/src/EClassBase.ts ***!
  \***************************************************/
/*! exports provided: EClassBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EClassBase", function() { return EClassBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var _EClassifierImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EClassifierImpl */ "./node_modules/crossecore/src/EClassifierImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var EClassBase = /** @class */ (function (_super) {
    __extends(EClassBase, _super);
    function EClassBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._abstract = false;
        _this._interface = false;
        _this._eSuperTypes = null;
        _this._eOperations = null;
        _this._eStructuralFeatures = null;
        _this._eGenericSuperTypes = null;
        return _this;
    }
    Object.defineProperty(EClassBase.prototype, "abstract", {
        get: function () {
            return this._abstract;
        },
        set: function (value) {
            this._abstract = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "interface", {
        get: function () {
            return this._interface;
        },
        set: function (value) {
            this._interface = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eSuperTypes", {
        get: function () {
            if (this._eSuperTypes === null) {
                this._eSuperTypes = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESUPERTYPES, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESUPERTYPES);
            }
            return this._eSuperTypes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eOperations", {
        get: function () {
            if (this._eOperations === null) {
                this._eOperations = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EOPERATIONS, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS);
            }
            return this._eOperations;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllAttributes", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllReferences", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eReferences", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAttributes", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllContainments", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllOperations", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllStructuralFeatures", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllSuperTypes", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eIDAttribute", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eStructuralFeatures", {
        get: function () {
            if (this._eStructuralFeatures === null) {
                this._eStructuralFeatures = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESTRUCTURALFEATURES, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS);
            }
            return this._eStructuralFeatures;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eGenericSuperTypes", {
        get: function () {
            if (this._eGenericSuperTypes === null) {
                this._eGenericSuperTypes = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EGENERICSUPERTYPES, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EGENERICSUPERTYPES);
            }
            return this._eGenericSuperTypes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassBase.prototype, "eAllGenericSuperTypes", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    EClassBase.prototype.isSuperTypeOf = function (someClass) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getOverride = function (operation) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getFeatureType = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getFeatureID = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getFeatureCount = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getOperationID = function (operation) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getOperationCount = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getEStructuralFeature = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (typeof args[0] === "number") {
            return this.getEStructuralFeature_number(args[0]);
        }
        if (typeof args[0] === "string") {
            return this.getEStructuralFeature_string(args[0]);
        }
    };
    ;
    EClassBase.prototype.getEStructuralFeature_number = function (featureID) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getEStructuralFeature_string = function (featureName) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.getEOperation = function (operationID) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassBase.prototype.eStaticClass = function () {
        return EClassBase.eStaticClass;
    };
    EClassBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EOPERATIONS:
                return this.eOperations.basicAdd(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESTRUCTURALFEATURES:
                return this.eStructuralFeatures.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromEClassifier(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEClass = this.eInverseAdd;
    EClassBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EOPERATIONS:
                return this.eOperations.basicRemove(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESTRUCTURALFEATURES:
                return this.eStructuralFeatures.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromEClassifier(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEClass = this.eInverseRemove;
    EClassBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_INSTANCECLASSNAME:
                return this.instanceClassName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_INSTANCECLASS:
                return this.instanceClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_INSTANCETYPENAME:
                return this.instanceTypeName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EPACKAGE:
                return this.ePackage;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ETYPEPARAMETERS:
                return this.eTypeParameters;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ABSTRACT:
                return this.abstract;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_INTERFACE:
                return this.interface;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESUPERTYPES:
                return this.eSuperTypes;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EOPERATIONS:
                return this.eOperations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLATTRIBUTES:
                return this.eAllAttributes;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLREFERENCES:
                return this.eAllReferences;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EREFERENCES:
                return this.eReferences;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EATTRIBUTES:
                return this.eAttributes;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLCONTAINMENTS:
                return this.eAllContainments;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLOPERATIONS:
                return this.eAllOperations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLSTRUCTURALFEATURES:
                return this.eAllStructuralFeatures;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLSUPERTYPES:
                return this.eAllSuperTypes;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EIDATTRIBUTE:
                return this.eIDAttribute;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESTRUCTURALFEATURES:
                return this.eStructuralFeatures;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EGENERICSUPERTYPES:
                return this.eGenericSuperTypes;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EALLGENERICSUPERTYPES:
                return this.eAllGenericSuperTypes;
        }
        //return this.eGetFromEClassifier(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EClassBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ABSTRACT:
                this.abstract = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_INTERFACE:
                this.interface = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESUPERTYPES:
                this.eSuperTypes.clear();
                this.eSuperTypes.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EOPERATIONS:
                this.eOperations.clear();
                this.eOperations.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_ESTRUCTURALFEATURES:
                this.eStructuralFeatures.clear();
                this.eStructuralFeatures.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASS_EGENERICSUPERTYPES:
                this.eGenericSuperTypes.clear();
                this.eGenericSuperTypes.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EClassBase;
}(_EClassifierImpl__WEBPACK_IMPORTED_MODULE_3__["EClassifierImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EClassImpl.ts":
/*!***************************************************!*\
  !*** ./node_modules/crossecore/src/EClassImpl.ts ***!
  \***************************************************/
/*! exports provided: EClassImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EClassImpl", function() { return EClassImpl; });
/* harmony import */ var _EClassBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EClassBase */ "./node_modules/crossecore/src/EClassBase.ts");
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EAttributeBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EAttributeBase */ "./node_modules/crossecore/src/EAttributeBase.ts");
/* harmony import */ var _EReferenceBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EReferenceBase */ "./node_modules/crossecore/src/EReferenceBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




///<summary>This class was generated.</summary>
var EClassImpl = /** @class */ (function (_super) {
    __extends(EClassImpl, _super);
    function EClassImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EClassImpl.prototype, "eAttributes", {
        get: function () {
            //TODO use ocl select/collect
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            this.eStructuralFeatures.forEach(function (f) {
                if (f instanceof _EAttributeBase__WEBPACK_IMPORTED_MODULE_2__["EAttributeBase"]) {
                    result.add(f);
                }
            });
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassImpl.prototype, "eReferences", {
        get: function () {
            //TODO use ocl select/collect
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            this.eStructuralFeatures.forEach(function (f) {
                if (f instanceof _EReferenceBase__WEBPACK_IMPORTED_MODULE_3__["EReferenceBase"]) {
                    result.add(f);
                }
            });
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassImpl.prototype, "eAllSuperTypes", {
        get: function () {
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            var queue = new Array();
            this.eSuperTypes.forEach(function (parent) {
                queue.push(parent);
                result.add(parent);
            });
            while (queue.length > 0) {
                var next = queue.shift();
                next.eSuperTypes.forEach(function (parent) {
                    queue.push(parent);
                    result.add(parent);
                });
            }
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassImpl.prototype, "eAllAttributes", {
        get: function () {
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            this.eAttributes.forEach(function (a) {
                result.add(a);
            });
            this.eAllSuperTypes.forEach(function (t) {
                t.eAttributes.forEach(function (a) {
                    result.add(a);
                });
            });
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassImpl.prototype, "eAllReferences", {
        get: function () {
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            this.eReferences.forEach(function (a) {
                result.add(a);
            });
            this.eAllSuperTypes.forEach(function (t) {
                t.eReferences.forEach(function (a) {
                    result.add(a);
                });
            });
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassImpl.prototype, "eAllStructuralFeatures", {
        get: function () {
            var result = new _OrderedSet__WEBPACK_IMPORTED_MODULE_1__["OrderedSet"]();
            var eclassifiers = this.eAllSuperTypes;
            eclassifiers.add(this);
            for (var _i = 0, eclassifiers_1 = eclassifiers; _i < eclassifiers_1.length; _i++) {
                var eclassifier = eclassifiers_1[_i];
                for (var _a = 0, _b = eclassifier.eStructuralFeatures; _a < _b.length; _a++) {
                    var feature = _b[_a];
                    result.add(feature);
                }
            }
            //return this.eAllSuperTypes.collect2(e => e.eStructuralFeatures);
            return result;
        },
        enumerable: false,
        configurable: true
    });
    EClassImpl.prototype.getEStructuralFeature_string = function (featureName) {
        for (var _i = 0, _a = this.eAllStructuralFeatures; _i < _a.length; _i++) {
            var feature = _a[_i];
            if (feature.name === featureName) {
                return feature;
            }
        }
        return null;
    };
    ;
    return EClassImpl;
}(_EClassBase__WEBPACK_IMPORTED_MODULE_0__["EClassBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EClassifierBase.ts":
/*!********************************************************!*\
  !*** ./node_modules/crossecore/src/EClassifierBase.ts ***!
  \********************************************************/
/*! exports provided: EClassifierBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EClassifierBase", function() { return EClassifierBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var EClassifierBase = /** @class */ (function (_super) {
    __extends(EClassifierBase, _super);
    function EClassifierBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._instanceClassName = '';
        _this._instanceTypeName = '';
        _this._eTypeParameters = null;
        return _this;
    }
    Object.defineProperty(EClassifierBase.prototype, "instanceClassName", {
        get: function () {
            return this._instanceClassName;
        },
        set: function (value) {
            this._instanceClassName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassifierBase.prototype, "instanceClass", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassifierBase.prototype, "defaultValue", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassifierBase.prototype, "instanceTypeName", {
        get: function () {
            return this._instanceTypeName;
        },
        set: function (value) {
            this._instanceTypeName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassifierBase.prototype, "ePackage", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EClassifierBase.prototype, "eTypeParameters", {
        get: function () {
            if (this._eTypeParameters === null) {
                this._eTypeParameters = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_ETYPEPARAMETERS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_ETYPEPARAMETERS);
            }
            return this._eTypeParameters;
        },
        enumerable: false,
        configurable: true
    });
    EClassifierBase.prototype.isInstance = function (object) {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassifierBase.prototype.getClassifierID = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EClassifierBase.prototype.eStaticClass = function () {
        return EClassifierBase.eStaticClass;
    };
    EClassifierBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEPackage(otherEnd, msgs);
        }
        //return this.eInverseAddFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEClassifier = this.eInverseAdd;
    EClassifierBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE:
                return this.basicSetEPackage(null, msgs);
        }
        //return this.eInverseRemoveFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEClassifier = this.eInverseRemove;
    EClassifierBase.prototype.basicSetEPackage = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE, msgs);
        return msgs;
    };
    EClassifierBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_INSTANCECLASSNAME:
                return this.instanceClassName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_INSTANCECLASS:
                return this.instanceClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_INSTANCETYPENAME:
                return this.instanceTypeName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE:
                return this.ePackage;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_ETYPEPARAMETERS:
                return this.eTypeParameters;
        }
        //return this.eGetFromENamedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EClassifierBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_INSTANCECLASSNAME:
                this.instanceClassName = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_INSTANCETYPENAME:
                this.instanceTypeName = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ECLASSIFIER_ETYPEPARAMETERS:
                this.eTypeParameters.clear();
                this.eTypeParameters.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EClassifierBase;
}(_ENamedElementImpl__WEBPACK_IMPORTED_MODULE_3__["ENamedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EClassifierImpl.ts":
/*!********************************************************!*\
  !*** ./node_modules/crossecore/src/EClassifierImpl.ts ***!
  \********************************************************/
/*! exports provided: EClassifierImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EClassifierImpl", function() { return EClassifierImpl; });
/* harmony import */ var _EClassifierBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EClassifierBase */ "./node_modules/crossecore/src/EClassifierBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EClassifierImpl = /** @class */ (function (_super) {
    __extends(EClassifierImpl, _super);
    function EClassifierImpl() {
        //implement your generated class here
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.metaObjectID = -1;
        _this.setClassifierID = function (id) {
            _this.metaObjectID = id;
        };
        _this.setGeneratedInstanceClass = function (isGenerated) {
            if (isGenerated) {
                if (_this.generatedInstanceClassName == null) {
                    _this.generatedInstanceClassName = _this.instanceClassName;
                    _this.instanceClassName = null;
                }
            }
            else if (_this.generatedInstanceClassName != null) {
                _this.instanceClassName = _this.generatedInstanceClassName;
                _this.generatedInstanceClassName = null;
            }
        };
        _this.basicSetInstanceTypeName = function (newInstanceTypeName) {
            var oldInstanceTypeName = _this.instanceTypeName;
            _this.instanceTypeName = newInstanceTypeName;
            /*
             if (eNotificationRequired())
             {
             eNotify
             (new ENotificationImpl(this, Notification.SET, EcorePackage.ECLASSIFIER__INSTANCE_TYPE_NAME, oldInstanceTypeName, newInstanceTypeName));
             }
             */
        };
        _this._instanceClass = null;
        return _this;
    }
    Object.defineProperty(EClassifierImpl.prototype, "instanceClass", {
        get: function () {
            return this._instanceClass;
        },
        set: function (value) {
            this._instanceClass = value;
        },
        enumerable: false,
        configurable: true
    });
    EClassifierImpl.prototype.getClassifierID = function () {
        if (this.metaObjectID == -1) {
            this.metaObjectID = this.computeClassifierID();
        }
        return this.metaObjectID;
    };
    EClassifierImpl.prototype.computeClassifierID = function () {
        return this.ePackage != null ?
            this.ePackage.eClassifiers.indexOf(this) :
            -1;
    };
    return EClassifierImpl;
}(_EClassifierBase__WEBPACK_IMPORTED_MODULE_0__["EClassifierBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EDataTypeBase.ts":
/*!******************************************************!*\
  !*** ./node_modules/crossecore/src/EDataTypeBase.ts ***!
  \******************************************************/
/*! exports provided: EDataTypeBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDataTypeBase", function() { return EDataTypeBase; });
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _EClassifierImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EClassifierImpl */ "./node_modules/crossecore/src/EClassifierImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EDataTypeBase = /** @class */ (function (_super) {
    __extends(EDataTypeBase, _super);
    function EDataTypeBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._serializable = false;
        return _this;
    }
    Object.defineProperty(EDataTypeBase.prototype, "serializable", {
        get: function () {
            return this._serializable;
        },
        set: function (value) {
            this._serializable = value;
        },
        enumerable: false,
        configurable: true
    });
    EDataTypeBase.prototype.eStaticClass = function () {
        return EDataTypeBase.eStaticClass;
    };
    EDataTypeBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_INSTANCECLASSNAME:
                return this.instanceClassName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_INSTANCECLASS:
                return this.instanceClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_INSTANCETYPENAME:
                return this.instanceTypeName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_EPACKAGE:
                return this.ePackage;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_ETYPEPARAMETERS:
                return this.eTypeParameters;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_SERIALIZABLE:
                return this.serializable;
        }
        //return this.eGetFromEClassifier(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EDataTypeBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EDATATYPE_SERIALIZABLE:
                this.serializable = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EDataTypeBase;
}(_EClassifierImpl__WEBPACK_IMPORTED_MODULE_1__["EClassifierImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EDataTypeImpl.ts":
/*!******************************************************!*\
  !*** ./node_modules/crossecore/src/EDataTypeImpl.ts ***!
  \******************************************************/
/*! exports provided: EDataTypeImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDataTypeImpl", function() { return EDataTypeImpl; });
/* harmony import */ var _EDataTypeBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EDataTypeBase */ "./node_modules/crossecore/src/EDataTypeBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EDataTypeImpl = /** @class */ (function (_super) {
    __extends(EDataTypeImpl, _super);
    function EDataTypeImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EDataTypeImpl;
}(_EDataTypeBase__WEBPACK_IMPORTED_MODULE_0__["EDataTypeBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EEnumBase.ts":
/*!**************************************************!*\
  !*** ./node_modules/crossecore/src/EEnumBase.ts ***!
  \**************************************************/
/*! exports provided: EEnumBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EEnumBase", function() { return EEnumBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EDataTypeImpl */ "./node_modules/crossecore/src/EDataTypeImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var EEnumBase = /** @class */ (function (_super) {
    __extends(EEnumBase, _super);
    function EEnumBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._eLiterals = null;
        return _this;
    }
    Object.defineProperty(EEnumBase.prototype, "eLiterals", {
        get: function () {
            if (this._eLiterals === null) {
                this._eLiterals = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ELITERALS, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUMLITERAL_EENUM);
            }
            return this._eLiterals;
        },
        enumerable: false,
        configurable: true
    });
    EEnumBase.prototype.getEEnumLiteral = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (typeof args[0] === "string") {
            return this.getEEnumLiteral_string(args[0]);
        }
        if (typeof args[0] === "number") {
            return this.getEEnumLiteral_number(args[0]);
        }
    };
    ;
    EEnumBase.prototype.getEEnumLiteral_string = function (name) {
        /*TODO implement function*/
        return null;
    };
    ;
    EEnumBase.prototype.getEEnumLiteral_number = function (value) {
        /*TODO implement function*/
        return null;
    };
    ;
    EEnumBase.prototype.getEEnumLiteralByLiteral = function (literal) {
        /*TODO implement function*/
        return null;
    };
    ;
    EEnumBase.prototype.eStaticClass = function () {
        return EEnumBase.eStaticClass;
    };
    EEnumBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ELITERALS:
                return this.eLiterals.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromEDataType(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEEnum = this.eInverseAdd;
    EEnumBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ELITERALS:
                return this.eLiterals.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromEDataType(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEEnum = this.eInverseRemove;
    EEnumBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_INSTANCECLASSNAME:
                return this.instanceClassName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_INSTANCECLASS:
                return this.instanceClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_INSTANCETYPENAME:
                return this.instanceTypeName;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_EPACKAGE:
                return this.ePackage;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ETYPEPARAMETERS:
                return this.eTypeParameters;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_SERIALIZABLE:
                return this.serializable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ELITERALS:
                return this.eLiterals;
        }
        //return this.eGetFromEDataType(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EEnumBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EENUM_ELITERALS:
                this.eLiterals.clear();
                this.eLiterals.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EEnumBase;
}(_EDataTypeImpl__WEBPACK_IMPORTED_MODULE_1__["EDataTypeImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EEnumImpl.ts":
/*!**************************************************!*\
  !*** ./node_modules/crossecore/src/EEnumImpl.ts ***!
  \**************************************************/
/*! exports provided: EEnumImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EEnumImpl", function() { return EEnumImpl; });
/* harmony import */ var _EEnumBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EEnumBase */ "./node_modules/crossecore/src/EEnumBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EEnumImpl = /** @class */ (function (_super) {
    __extends(EEnumImpl, _super);
    function EEnumImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EEnumImpl;
}(_EEnumBase__WEBPACK_IMPORTED_MODULE_0__["EEnumBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EEnumLiteralBase.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EEnumLiteralBase.ts ***!
  \*********************************************************/
/*! exports provided: EEnumLiteralBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EEnumLiteralBase", function() { return EEnumLiteralBase; });
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EEnumLiteralBase = /** @class */ (function (_super) {
    __extends(EEnumLiteralBase, _super);
    function EEnumLiteralBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = 0;
        _this._instance = null;
        _this._literal = '';
        return _this;
    }
    Object.defineProperty(EEnumLiteralBase.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EEnumLiteralBase.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        set: function (value) {
            this._instance = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EEnumLiteralBase.prototype, "literal", {
        get: function () {
            return this._literal;
        },
        set: function (value) {
            this._literal = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EEnumLiteralBase.prototype, "eEnum", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EENUM)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    EEnumLiteralBase.prototype.eStaticClass = function () {
        return EEnumLiteralBase.eStaticClass;
    };
    EEnumLiteralBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EENUM:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEEnum(otherEnd, msgs);
        }
        //return this.eInverseAddFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEEnumLiteral = this.eInverseAdd;
    EEnumLiteralBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EENUM:
                return this.basicSetEEnum(null, msgs);
        }
        //return this.eInverseRemoveFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEEnumLiteral = this.eInverseRemove;
    EEnumLiteralBase.prototype.basicSetEEnum = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EENUM, msgs);
        return msgs;
    };
    EEnumLiteralBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_VALUE:
                return this.value;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_INSTANCE:
                return this.instance;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_LITERAL:
                return this.literal;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_EENUM:
                return this.eEnum;
        }
        //return this.eGetFromENamedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EEnumLiteralBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_VALUE:
                this.value = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_INSTANCE:
                this.instance = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EENUMLITERAL_LITERAL:
                this.literal = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EEnumLiteralBase;
}(_ENamedElementImpl__WEBPACK_IMPORTED_MODULE_0__["ENamedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EEnumLiteralImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EEnumLiteralImpl.ts ***!
  \*********************************************************/
/*! exports provided: EEnumLiteralImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EEnumLiteralImpl", function() { return EEnumLiteralImpl; });
/* harmony import */ var _EEnumLiteralBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EEnumLiteralBase */ "./node_modules/crossecore/src/EEnumLiteralBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EEnumLiteralImpl = /** @class */ (function (_super) {
    __extends(EEnumLiteralImpl, _super);
    function EEnumLiteralImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EEnumLiteralImpl;
}(_EEnumLiteralBase__WEBPACK_IMPORTED_MODULE_0__["EEnumLiteralBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EFactoryBase.ts":
/*!*****************************************************!*\
  !*** ./node_modules/crossecore/src/EFactoryBase.ts ***!
  \*****************************************************/
/*! exports provided: EFactoryBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EFactoryBase", function() { return EFactoryBase; });
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _EModelElementImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EModelElementImpl */ "./node_modules/crossecore/src/EModelElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var EFactoryBase = /** @class */ (function (_super) {
    __extends(EFactoryBase, _super);
    function EFactoryBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._ePackage = null;
        return _this;
    }
    Object.defineProperty(EFactoryBase.prototype, "ePackage", {
        get: function () {
            return this._ePackage;
        },
        set: function (value) {
            if (value != this._ePackage) {
                var msgs = null;
                if (this._ePackage != null) {
                    msgs = (this._ePackage).eInverseRemove(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE, /*EFactory*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE, /*EFactory*/ null, msgs);
                }
                msgs = this.basicSetEPackage(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    EFactoryBase.prototype.createFromString = function (eDataType, literalValue) {
        /*TODO implement function*/
        return null;
    };
    ;
    EFactoryBase.prototype.create = function (eClass) {
        /*TODO implement function*/
        return null;
    };
    ;
    EFactoryBase.prototype.convertToString = function (eDataType, instanceValue) {
        /*TODO implement function*/
        return null;
    };
    ;
    EFactoryBase.prototype.eStaticClass = function () {
        return EFactoryBase.eStaticClass;
    };
    EFactoryBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE:
                if (this._ePackage != null) {
                    msgs = this._ePackage.eInverseRemove(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE, /*EPackage*/ null, msgs);
                }
                return this.basicSetEPackage(otherEnd, msgs);
        }
        //return this.eInverseAddFromEModelElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEFactory = this.eInverseAdd;
    EFactoryBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE:
                return this.basicSetEPackage(null, msgs);
        }
        //return this.eInverseRemoveFromEModelElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEFactory = this.eInverseRemove;
    EFactoryBase.prototype.basicSetEPackage = function (newobj, msgs) {
        var oldobj = this._ePackage;
        this._ePackage = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EFactoryBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE:
                return this.ePackage;
        }
        //return this.eGetFromEModelElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EFactoryBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].EFACTORY_EPACKAGE:
                this.ePackage = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EFactoryBase;
}(_EModelElementImpl__WEBPACK_IMPORTED_MODULE_3__["EModelElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EFactoryImpl.ts":
/*!*****************************************************!*\
  !*** ./node_modules/crossecore/src/EFactoryImpl.ts ***!
  \*****************************************************/
/*! exports provided: EFactoryImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EFactoryImpl", function() { return EFactoryImpl; });
/* harmony import */ var _EFactoryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EFactoryBase */ "./node_modules/crossecore/src/EFactoryBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EFactoryImpl = /** @class */ (function (_super) {
    __extends(EFactoryImpl, _super);
    function EFactoryImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EFactoryImpl;
}(_EFactoryBase__WEBPACK_IMPORTED_MODULE_0__["EFactoryBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EGenericTypeBase.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EGenericTypeBase.ts ***!
  \*********************************************************/
/*! exports provided: EGenericTypeBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EGenericTypeBase", function() { return EGenericTypeBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var EGenericTypeBase = /** @class */ (function (_super) {
    __extends(EGenericTypeBase, _super);
    function EGenericTypeBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._eUpperBound = null;
        _this._eTypeArguments = null;
        _this._eLowerBound = null;
        _this._eTypeParameter = null;
        _this._eClassifier = null;
        return _this;
    }
    Object.defineProperty(EGenericTypeBase.prototype, "eUpperBound", {
        get: function () {
            return this._eUpperBound;
        },
        set: function (value) {
            if (value != this._eUpperBound) {
                var msgs = null;
                if (this._eUpperBound != null) {
                    msgs = (this._eUpperBound).eInverseRemove(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND, /*null*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND, /*null*/ null, msgs);
                }
                msgs = this.basicSetEUpperBound(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EGenericTypeBase.prototype, "eTypeArguments", {
        get: function () {
            if (this._eTypeArguments === null) {
                this._eTypeArguments = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEARGUMENTS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEARGUMENTS);
            }
            return this._eTypeArguments;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EGenericTypeBase.prototype, "eRawType", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EGenericTypeBase.prototype, "eLowerBound", {
        get: function () {
            return this._eLowerBound;
        },
        set: function (value) {
            if (value != this._eLowerBound) {
                var msgs = null;
                if (this._eLowerBound != null) {
                    msgs = (this._eLowerBound).eInverseRemove(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND, /*null*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND, /*null*/ null, msgs);
                }
                msgs = this.basicSetELowerBound(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EGenericTypeBase.prototype, "eTypeParameter", {
        get: function () {
            return this._eTypeParameter;
        },
        set: function (value) {
            var oldvalue = this._eTypeParameter;
            this._eTypeParameter = value;
            if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEPARAMETER, oldvalue, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EGenericTypeBase.prototype, "eClassifier", {
        get: function () {
            return this._eClassifier;
        },
        set: function (value) {
            var oldvalue = this._eClassifier;
            this._eClassifier = value;
            if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ECLASSIFIER, oldvalue, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    EGenericTypeBase.prototype.isInstance = function (object) {
        /*TODO implement function*/
        return null;
    };
    ;
    EGenericTypeBase.prototype.eStaticClass = function () {
        return EGenericTypeBase.eStaticClass;
    };
    EGenericTypeBase.prototype.basicSetETypeParameter = function (newobj, msgs) {
        var oldobj = this._eTypeParameter;
        this._eTypeParameter = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEPARAMETER, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EGenericTypeBase.prototype.basicSetELowerBound = function (newobj, msgs) {
        var oldobj = this._eLowerBound;
        this._eLowerBound = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EGenericTypeBase.prototype.basicSetEClassifier = function (newobj, msgs) {
        var oldobj = this._eClassifier;
        this._eClassifier = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ECLASSIFIER, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EGenericTypeBase.prototype.basicSetEUpperBound = function (newobj, msgs) {
        var oldobj = this._eUpperBound;
        this._eUpperBound = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EGenericTypeBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND:
                return this.eUpperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEARGUMENTS:
                return this.eTypeArguments;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ERAWTYPE:
                return this.eRawType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND:
                return this.eLowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEPARAMETER:
                return this.eTypeParameter;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ECLASSIFIER:
                return this.eClassifier;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EGenericTypeBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_EUPPERBOUND:
                this.eUpperBound = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEARGUMENTS:
                this.eTypeArguments.clear();
                this.eTypeArguments.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ELOWERBOUND:
                this.eLowerBound = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ETYPEPARAMETER:
                this.eTypeParameter = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EGENERICTYPE_ECLASSIFIER:
                this.eClassifier = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EGenericTypeBase;
}(_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EGenericTypeImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EGenericTypeImpl.ts ***!
  \*********************************************************/
/*! exports provided: EGenericTypeImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EGenericTypeImpl", function() { return EGenericTypeImpl; });
/* harmony import */ var _EGenericTypeBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EGenericTypeBase */ "./node_modules/crossecore/src/EGenericTypeBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EGenericTypeImpl = /** @class */ (function (_super) {
    __extends(EGenericTypeImpl, _super);
    function EGenericTypeImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EGenericTypeImpl;
}(_EGenericTypeBase__WEBPACK_IMPORTED_MODULE_0__["EGenericTypeBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EModelElementBase.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/EModelElementBase.ts ***!
  \**********************************************************/
/*! exports provided: EModelElementBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EModelElementBase", function() { return EModelElementBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var EModelElementBase = /** @class */ (function (_super) {
    __extends(EModelElementBase, _super);
    function EModelElementBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._eAnnotations = null;
        return _this;
    }
    Object.defineProperty(EModelElementBase.prototype, "eAnnotations", {
        get: function () {
            if (this._eAnnotations === null) {
                this._eAnnotations = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EANNOTATION_EMODELELEMENT);
            }
            return this._eAnnotations;
        },
        enumerable: false,
        configurable: true
    });
    EModelElementBase.prototype.getEAnnotation = function (source) {
        /*TODO implement function*/
        return null;
    };
    ;
    EModelElementBase.prototype.eStaticClass = function () {
        return EModelElementBase.eStaticClass;
    };
    EModelElementBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS:
                return this.eAnnotations.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEModelElement = this.eInverseAdd;
    EModelElementBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS:
                return this.eAnnotations.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEModelElement = this.eInverseRemove;
    EModelElementBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS:
                return this.eAnnotations;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EModelElementBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EMODELELEMENT_EANNOTATIONS:
                this.eAnnotations.clear();
                this.eAnnotations.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EModelElementBase;
}(_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EModelElementImpl.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/EModelElementImpl.ts ***!
  \**********************************************************/
/*! exports provided: EModelElementImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EModelElementImpl", function() { return EModelElementImpl; });
/* harmony import */ var _EModelElementBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EModelElementBase */ "./node_modules/crossecore/src/EModelElementBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EModelElementImpl = /** @class */ (function (_super) {
    __extends(EModelElementImpl, _super);
    function EModelElementImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EModelElementImpl;
}(_EModelElementBase__WEBPACK_IMPORTED_MODULE_0__["EModelElementBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ENamedElementBase.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/ENamedElementBase.ts ***!
  \**********************************************************/
/*! exports provided: ENamedElementBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENamedElementBase", function() { return ENamedElementBase; });
/* harmony import */ var _EModelElementImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EModelElementImpl */ "./node_modules/crossecore/src/EModelElementImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var ENamedElementBase = /** @class */ (function (_super) {
    __extends(ENamedElementBase, _super);
    function ENamedElementBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = '';
        return _this;
    }
    Object.defineProperty(ENamedElementBase.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    ENamedElementBase.prototype.eStaticClass = function () {
        return ENamedElementBase.eStaticClass;
    };
    ENamedElementBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ENAMEDELEMENT_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ENAMEDELEMENT_NAME:
                return this.name;
        }
        //return this.eGetFromEModelElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    ENamedElementBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].ENAMEDELEMENT_NAME:
                this.name = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return ENamedElementBase;
}(_EModelElementImpl__WEBPACK_IMPORTED_MODULE_0__["EModelElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ENamedElementImpl.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/ENamedElementImpl.ts ***!
  \**********************************************************/
/*! exports provided: ENamedElementImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENamedElementImpl", function() { return ENamedElementImpl; });
/* harmony import */ var _ENamedElementBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ENamedElementBase */ "./node_modules/crossecore/src/ENamedElementBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var ENamedElementImpl = /** @class */ (function (_super) {
    __extends(ENamedElementImpl, _super);
    function ENamedElementImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ENamedElementImpl;
}(_ENamedElementBase__WEBPACK_IMPORTED_MODULE_0__["ENamedElementBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ENotificationImpl.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/ENotificationImpl.ts ***!
  \**********************************************************/
/*! exports provided: ENotificationImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENotificationImpl", function() { return ENotificationImpl; });
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ENotificationImpl = /** @class */ (function (_super) {
    __extends(ENotificationImpl, _super);
    /*
    public constructor( notifier:InternalEObject, eventType:number , featureID:number, oldValue:any, newValue:any){
        this(notifier, eventType, featureID, oldValue, newValue, NotificationImpl.NO_INDEX)
    }
    */
    function ENotificationImpl(notifier, eventType, featureID, oldValue, newValue, position) {
        var _this = _super.call(this, eventType, oldValue, newValue, position, false) || this;
        _this.featureID = _NotificationImpl__WEBPACK_IMPORTED_MODULE_0__["NotificationImpl"].NO_FEATURE_ID;
        _this.getFeature = function () {
            if (_this.feature == null && _this.featureID != _NotificationImpl__WEBPACK_IMPORTED_MODULE_0__["NotificationImpl"].NO_FEATURE_ID) {
                var eClass = _this.notifier.eClass();
                _this.feature = eClass.getEStructuralFeature(_this.featureID);
            }
            return _this.feature;
        };
        _this.notifier = notifier;
        _this.featureID = featureID;
        return _this;
    }
    ENotificationImpl.prototype.getNotifier = function () {
        return this.notifier;
    };
    return ENotificationImpl;
}(_NotificationImpl__WEBPACK_IMPORTED_MODULE_0__["NotificationImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EObjectBase.ts":
/*!****************************************************!*\
  !*** ./node_modules/crossecore/src/EObjectBase.ts ***!
  \****************************************************/
/*! exports provided: EObjectBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EObjectBase", function() { return EObjectBase; });
/* harmony import */ var _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EStructuralFeatureImpl */ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EObjectBase = /** @class */ (function (_super) {
    __extends(EObjectBase, _super);
    function EObjectBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EObjectBase.prototype.eIsSet = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eContainmentFeature = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eContainingFeature = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eIsProxy = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eClass = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eContainer = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eInvoke = function (operation, arguments_) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eSet = function (feature, newValue) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eContents = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eResource = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eCrossReferences = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eAllContents = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eGet = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__["EStructuralFeatureImpl"] &&
            typeof args[1] === "boolean") {
            return this.eGet_EStructuralFeature_boolean(args[0], args[1]);
        }
        if (args[0] instanceof _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__["EStructuralFeatureImpl"]) {
            return this.eGet_EStructuralFeature(args[0]);
        }
    };
    ;
    EObjectBase.prototype.eGet_EStructuralFeature_boolean = function (feature, resolve) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eGet_EStructuralFeature = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eUnset = function (feature) {
        /*TODO implement function*/
        return null;
    };
    ;
    EObjectBase.prototype.eStaticClass = function () {
        return EObjectBase.eStaticClass;
    };
    EObjectBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EObjectBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EObjectBase;
}(_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EObjectImpl.ts":
/*!****************************************************!*\
  !*** ./node_modules/crossecore/src/EObjectImpl.ts ***!
  \****************************************************/
/*! exports provided: EObjectImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EObjectImpl", function() { return EObjectImpl; });
/* harmony import */ var _EObjectBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EObjectBase */ "./node_modules/crossecore/src/EObjectBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EObjectImpl = /** @class */ (function (_super) {
    __extends(EObjectImpl, _super);
    function EObjectImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EObjectImpl;
}(_EObjectBase__WEBPACK_IMPORTED_MODULE_0__["EObjectBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EOperationBase.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EOperationBase.ts ***!
  \*******************************************************/
/*! exports provided: EOperationBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOperationBase", function() { return EOperationBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ETypedElementImpl */ "./node_modules/crossecore/src/ETypedElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var EOperationBase = /** @class */ (function (_super) {
    __extends(EOperationBase, _super);
    function EOperationBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._eTypeParameters = null;
        _this._eParameters = null;
        _this._eExceptions = null;
        _this._eGenericExceptions = null;
        return _this;
    }
    Object.defineProperty(EOperationBase.prototype, "eContainingClass", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EOperationBase.prototype, "eTypeParameters", {
        get: function () {
            if (this._eTypeParameters === null) {
                this._eTypeParameters = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ETYPEPARAMETERS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ETYPEPARAMETERS);
            }
            return this._eTypeParameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EOperationBase.prototype, "eParameters", {
        get: function () {
            if (this._eParameters === null) {
                this._eParameters = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EPARAMETERS, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EPARAMETER_EOPERATION);
            }
            return this._eParameters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EOperationBase.prototype, "eExceptions", {
        get: function () {
            if (this._eExceptions === null) {
                this._eExceptions = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EEXCEPTIONS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EEXCEPTIONS);
            }
            return this._eExceptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EOperationBase.prototype, "eGenericExceptions", {
        get: function () {
            if (this._eGenericExceptions === null) {
                this._eGenericExceptions = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EGENERICEXCEPTIONS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EGENERICEXCEPTIONS);
            }
            return this._eGenericExceptions;
        },
        enumerable: false,
        configurable: true
    });
    EOperationBase.prototype.isOverrideOf = function (someOperation) {
        /*TODO implement function*/
        return null;
    };
    ;
    EOperationBase.prototype.getOperationID = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EOperationBase.prototype.eStaticClass = function () {
        return EOperationBase.eStaticClass;
    };
    EOperationBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEContainingClass(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EPARAMETERS:
                return this.eParameters.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEOperation = this.eInverseAdd;
    EOperationBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS:
                return this.basicSetEContainingClass(null, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EPARAMETERS:
                return this.eParameters.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEOperation = this.eInverseRemove;
    EOperationBase.prototype.basicSetEContainingClass = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS, msgs);
        return msgs;
    };
    EOperationBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EGENERICTYPE:
                return this.eGenericType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ECONTAININGCLASS:
                return this.eContainingClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ETYPEPARAMETERS:
                return this.eTypeParameters;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EPARAMETERS:
                return this.eParameters;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EEXCEPTIONS:
                return this.eExceptions;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EGENERICEXCEPTIONS:
                return this.eGenericExceptions;
        }
        //return this.eGetFromETypedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EOperationBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_ETYPEPARAMETERS:
                this.eTypeParameters.clear();
                this.eTypeParameters.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EPARAMETERS:
                this.eParameters.clear();
                this.eParameters.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EEXCEPTIONS:
                this.eExceptions.clear();
                this.eExceptions.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["EcorePackageLiterals"].EOPERATION_EGENERICEXCEPTIONS:
                this.eGenericExceptions.clear();
                this.eGenericExceptions.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EOperationBase;
}(_ETypedElementImpl__WEBPACK_IMPORTED_MODULE_3__["ETypedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EOperationImpl.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EOperationImpl.ts ***!
  \*******************************************************/
/*! exports provided: EOperationImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOperationImpl", function() { return EOperationImpl; });
/* harmony import */ var _EOperationBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EOperationBase */ "./node_modules/crossecore/src/EOperationBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EOperationImpl = /** @class */ (function (_super) {
    __extends(EOperationImpl, _super);
    function EOperationImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.operationID = -1;
        _this.setOperationID = function (id) {
            _this.operationID = id;
        };
        return _this;
    }
    return EOperationImpl;
}(_EOperationBase__WEBPACK_IMPORTED_MODULE_0__["EOperationBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EPackageBase.ts":
/*!*****************************************************!*\
  !*** ./node_modules/crossecore/src/EPackageBase.ts ***!
  \*****************************************************/
/*! exports provided: EPackageBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPackageBase", function() { return EPackageBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var EPackageBase = /** @class */ (function (_super) {
    __extends(EPackageBase, _super);
    function EPackageBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._nsURI = '';
        _this._nsPrefix = '';
        _this._eFactoryInstance = null;
        _this._eClassifiers = null;
        _this._eSubpackages = null;
        return _this;
    }
    Object.defineProperty(EPackageBase.prototype, "nsURI", {
        get: function () {
            return this._nsURI;
        },
        set: function (value) {
            this._nsURI = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EPackageBase.prototype, "nsPrefix", {
        get: function () {
            return this._nsPrefix;
        },
        set: function (value) {
            this._nsPrefix = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EPackageBase.prototype, "eFactoryInstance", {
        get: function () {
            return this._eFactoryInstance;
        },
        set: function (value) {
            if (value != this._eFactoryInstance) {
                var msgs = null;
                if (this._eFactoryInstance != null) {
                    msgs = (this._eFactoryInstance).eInverseRemove(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EFACTORY_EPACKAGE, /*EPackage*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EFACTORY_EPACKAGE, /*EPackage*/ null, msgs);
                }
                msgs = this.basicSetEFactoryInstance(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EPackageBase.prototype, "eClassifiers", {
        get: function () {
            if (this._eClassifiers === null) {
                this._eClassifiers = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ECLASSIFIERS, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ECLASSIFIER_EPACKAGE);
            }
            return this._eClassifiers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EPackageBase.prototype, "eSubpackages", {
        get: function () {
            if (this._eSubpackages === null) {
                this._eSubpackages = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUBPACKAGES, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE);
            }
            return this._eSubpackages;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EPackageBase.prototype, "eSuperPackage", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    EPackageBase.prototype.getEClassifier = function (name) {
        /*TODO implement function*/
        return null;
    };
    ;
    EPackageBase.prototype.eStaticClass = function () {
        return EPackageBase.eStaticClass;
    };
    EPackageBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE:
                if (this._eFactoryInstance != null) {
                    msgs = this._eFactoryInstance.eInverseRemove(this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE, /*EFactory*/ null, msgs);
                }
                return this.basicSetEFactoryInstance(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUBPACKAGES:
                return this.eSubpackages.basicAdd(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ECLASSIFIERS:
                return this.eClassifiers.basicAdd(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetESuperPackage(otherEnd, msgs);
        }
        //return this.eInverseAddFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEPackage = this.eInverseAdd;
    EPackageBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE:
                return this.basicSetEFactoryInstance(null, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUBPACKAGES:
                return this.eSubpackages.basicRemove(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ECLASSIFIERS:
                return this.eClassifiers.basicRemove(otherEnd, msgs);
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE:
                return this.basicSetESuperPackage(null, msgs);
        }
        //return this.eInverseRemoveFromENamedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEPackage = this.eInverseRemove;
    EPackageBase.prototype.basicSetEFactoryInstance = function (newobj, msgs) {
        var oldobj = this._eFactoryInstance;
        this._eFactoryInstance = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EPackageBase.prototype.basicSetESuperPackage = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE, msgs);
        return msgs;
    };
    EPackageBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_NSURI:
                return this.nsURI;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_NSPREFIX:
                return this.nsPrefix;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE:
                return this.eFactoryInstance;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ECLASSIFIERS:
                return this.eClassifiers;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUBPACKAGES:
                return this.eSubpackages;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUPERPACKAGE:
                return this.eSuperPackage;
        }
        //return this.eGetFromENamedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EPackageBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_NSURI:
                this.nsURI = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_NSPREFIX:
                this.nsPrefix = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_EFACTORYINSTANCE:
                this.eFactoryInstance = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ECLASSIFIERS:
                this.eClassifiers.clear();
                this.eClassifiers.addAll(newValue);
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].EPACKAGE_ESUBPACKAGES:
                this.eSubpackages.clear();
                this.eSubpackages.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EPackageBase;
}(_ENamedElementImpl__WEBPACK_IMPORTED_MODULE_4__["ENamedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EPackageImpl.ts":
/*!*****************************************************!*\
  !*** ./node_modules/crossecore/src/EPackageImpl.ts ***!
  \*****************************************************/
/*! exports provided: EPackageImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPackageImpl", function() { return EPackageImpl; });
/* harmony import */ var _EPackageBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EPackageBase */ "./node_modules/crossecore/src/EPackageBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
///<summary>This class was generated.</summary>

var EPackageImpl = /** @class */ (function (_super) {
    __extends(EPackageImpl, _super);
    function EPackageImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createEClass = function (id) {
            var c = _this.ecoreFactory.createEClass();
            c.setClassifierID(id);
            _this.eClassifiers.add(c);
            return c;
        };
        _this.createEEnum = function (id) {
            var e = _this.ecoreFactory.createEEnum();
            e.setClassifierID(id);
            _this.eClassifiers.add(e);
            return e;
        };
        _this.createEDataType = function (id) {
            var d = _this.ecoreFactory.createEDataType();
            d.setClassifierID(id);
            _this.eClassifiers.add(d);
            return d;
        };
        _this.createEAttribute = function (owner, id) {
            var a = _this.ecoreFactory.createEAttribute();
            a.setFeatureID(id);
            owner.eStructuralFeatures.add(a);
        };
        _this.createEReference = function (owner, id) {
            var r = _this.ecoreFactory.createEReference();
            r.setFeatureID(id);
            owner.eStructuralFeatures.add(r);
        };
        _this.createEOperation = function (owner, id) {
            var o = _this.ecoreFactory.createEOperation();
            o.setOperationID(id);
            owner.eOperations.add(o);
        };
        _this.initEClass_ = function (c, instanceClass, name, isAbstract, isInterface, isGenerated) {
            _this.initEClassifier(c, _this.ecorePackage.getEClass(), instanceClass, name, isGenerated);
            c.abstract = isAbstract;
            c.interface = isInterface;
            return c;
        };
        _this.initEClass = function (c, instanceClass, name, isAbstract, isInterface, isGenerated, instanceTypeName) {
            instanceTypeName = instanceTypeName !== undefined ? instanceTypeName : null;
            _this.initEClass_(c, instanceClass, name, isAbstract, isInterface, isGenerated);
            if (instanceTypeName != null) {
                _this.setInstanceTypeName(c, instanceTypeName);
            }
            return c;
        };
        _this.initEDataType_ = function (d, instanceClass, name, isSerializable) {
            _this.initEClassifier(d, _this.ecorePackage.getEDataType(), instanceClass, name, false);
            d.serializable = isSerializable;
            return d;
        };
        _this.initEDataType__ = function (d, instanceClass, name, isSerializable, isGenerated) {
            _this.initEClassifier(d, _this.ecorePackage.getEDataType(), instanceClass, name, isGenerated);
            d.serializable = isSerializable;
            return d;
        };
        _this.initEDataType = function (d, instanceClass, name, isSerializable, isGenerated, instanceTypeName) {
            isGenerated = isGenerated !== undefined ? isGenerated : false;
            instanceTypeName = instanceTypeName !== undefined ? instanceTypeName : null;
            _this.initEDataType__(d, instanceClass, name, isSerializable, isGenerated);
            if (instanceTypeName != null) {
                _this.setInstanceTypeName(d, instanceTypeName);
            }
            return d;
        };
        _this.initEClassifier_ = function (o, metaObject, instanceClass, name) {
            o.name = name;
            if (instanceClass != null) {
                o.instanceClass = instanceClass;
            }
        };
        _this.initEClassifier = function (o, metaObject, instanceClass, name, isGenerated) {
            o.name = name;
            if (instanceClass != null) {
                o.instanceClass = instanceClass;
            }
            if (isGenerated !== undefined && isGenerated) {
                _this.setGeneratedClassName(o);
            }
        };
        _this.setGeneratedClassName = function (eClassifier) {
            eClassifier.setGeneratedInstanceClass(true);
        };
        _this.setInstanceTypeName = function (eClassifier, instanceTypeName) {
            eClassifier.basicSetInstanceTypeName(instanceTypeName);
        };
        //a:EAttribute, type:EClassifier, name:string, defaultValue:string , lowerBound:number, upperBound:number, isTransient:boolean, isVolatile:boolean, isChangeable:boolean, isUnsettable:boolean, isID:boolean, isUnique:boolean, isDerived:boolean):EAttribute=>
        //a:EAttribute,type:EClassifier, name:string, defaultValue:string, lowerBound:number, upperBound:number, isTransient:boolean, isVolatile:boolean, isChangeable:boolean, isUnsettable:boolean, isID:boolean, isUnique:boolean, isDerived:boolean, isOrdered:boolean):EAttribute=>
        //a:EAttribute, type:EClassifier, name:string, defaultValue:string, lowerBound:number, upperBound:number, containerClass:Function, isTransient:boolean, isVolatile:boolean, isChangeable:boolean, isUnsettable:boolean, isID:boolean, isUnique:boolean, isDerived:boolean, isOrdered:boolean):EAttribute=>
        //a:EAttribute, type:EGenericType, name:string, defaultValue:string, lowerBound:number, upperBound:number, containerClass:Function, isTransient:boolean, isVolatile:boolean, isChangeable:boolean, isUnsettable:boolean, isID:boolean, isUnique:boolean, isDerived:boolean, isOrdered:boolean):EAttribute=>
        _this.initEAttribute13 = function (a, type, name, defaultValue, lowerBound, upperBound, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived) {
            return _this.initEAttribute14(a, type, name, defaultValue, lowerBound, upperBound, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived, true);
        };
        _this.initEAttribute14 = function (a, type, name, defaultValue, lowerBound, upperBound, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived, isOrdered) {
            _this.initEAttribute_EClassifier(a, type, name, defaultValue, lowerBound, upperBound, a.eContainer().instanceClass, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived, isOrdered);
            return a;
        };
        _this.initEAttribute_EClassifier = function (a, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived, isOrdered) {
            _this.initEStructuralFeature_EClassifier(a, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered);
            a.iD = isID;
            return a;
        };
        _this.initEAttribute_EGenericType = function (a, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isID, isUnique, isDerived, isOrdered) {
            _this.initEStructuralFeature_EGenericType(a, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered);
            a.iD = isID;
            return a;
        };
        _this.initEStructuralFeature_EClassifier = function (s, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered) {
            s.name = name;
            s.setContainerClass(containerClass);
            s.transient = isTransient;
            s.volatile = isVolatile;
            s.changeable = isChangeable;
            s.unsettable = isUnsettable;
            s.unique = isUnique;
            s.derived = isDerived;
            s.ordered = isOrdered;
            s.lowerBound = lowerBound;
            s.upperBound = upperBound;
            s.eType = type;
            if (defaultValue != null) {
                s.defaultValueLiteral = defaultValue;
            }
        };
        _this.initEStructuralFeature_EGenericType = function (s, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered) {
            s.name = name;
            s.setContainerClass(containerClass);
            s.transient = isTransient;
            s.volatile = isVolatile;
            s.changeable = isChangeable;
            s.unsettable = isUnsettable;
            s.unique = isUnique;
            s.derived = isDerived;
            s.ordered = isOrdered;
            s.lowerBound = lowerBound;
            s.upperBound = upperBound;
            s.eGenericType = type;
            if (defaultValue != null) {
                s.defaultValueLiteral = defaultValue;
            }
        };
        _this.IS_RESOLVABLE = true;
        _this.initEReference = function (r, type, otherEnd, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isContainment, isResolveProxies, isUnsettable, isUnique, isDerived, isOrdered) {
            _this.initEStructuralFeature_EClassifier(r, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered);
            r.containment = isContainment;
            if (otherEnd != null) {
                r.eOpposite = otherEnd;
            }
            r.resolveProxies = isResolveProxies;
            return r;
        };
        //TODO fix quickfix for method overloading
        _this.initEReference_EGenericType = function (r, type, otherEnd, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isContainment, isResolveProxies, isUnsettable, isUnique, isDerived, isOrdered) {
            _this.initEStructuralFeature_EGenericType(r, type, name, defaultValue, lowerBound, upperBound, containerClass, isTransient, isVolatile, isChangeable, isUnsettable, isUnique, isDerived, isOrdered);
            r.containment = isContainment;
            if (otherEnd != null) {
                r.eOpposite = otherEnd;
            }
            r.resolveProxies = isResolveProxies;
            return r;
        };
        _this.addEOperation_1 = function (owner, type, name) {
            var o = _this.ecoreFactory.createEOperation();
            _this.initEOperation_1(o, type, name);
            owner.eOperations.add(o);
            return o;
        };
        _this.addEOperation_2 = function (owner, type, name, lowerBound, upperBound) {
            var o = _this.ecoreFactory.createEOperation();
            _this.initEOperation_2(o, type, name, lowerBound, upperBound);
            owner.eOperations.add(o);
            return o;
        };
        _this.addEOperation_3 = function (owner, type, name, lowerBound, upperBound, isUnique, isOrdered) {
            var o = _this.ecoreFactory.createEOperation();
            _this.initEOperation_3(o, type, name, lowerBound, upperBound, isUnique, isOrdered);
            owner.eOperations.add(o);
            return o;
        };
        _this.initEOperation_1 = function (eOperation, type, name) {
            eOperation.eType = type;
            eOperation.name = name;
            return eOperation;
        };
        _this.initEOperation_2 = function (eOperation, type, name, lowerBound, upperBound) {
            _this.initEOperation_1(eOperation, type, name);
            eOperation.lowerBound = lowerBound;
            eOperation.upperBound = upperBound;
            return eOperation;
        };
        _this.initEOperation_3 = function (eOperation, type, name, lowerBound, upperBound, isUnique, isOrdered) {
            _this.initEOperation_2(eOperation, type, name, lowerBound, upperBound);
            eOperation.unique = isUnique;
            eOperation.ordered = isOrdered;
            return eOperation;
        };
        _this.initEOperation_4 = function (eOperation, eGenericType) {
            eOperation.eGenericType = eGenericType;
        };
        return _this;
    }
    /*
    constructor(packageURI?:string, factory?:EcoreFactory)
    {
        super();
        this.ecoreFactory = factory;
        this.ecorePackage = this as any as EcorePackage;


    }

    */
    /*
     constructor (packageURI?:string, factory?:EFactory)
     {
        //TODO registry
        super();

         if(packageURI!==undefined && factory!==undefined){

            if (factory === EcoreFactoryInstance.eINSTANCE as any as EFactory)
             {
                 this.ecorePackage = this as any as EcorePackage;
                 this.ecoreFactory = factory as any as EcoreFactory;
             }
             else
             {
                 this.ecorePackage = EcorePackageImpl.eINSTANCE;
                 this.ecoreFactory = EcoreFactoryInstance.eINSTANCE;
             }
         }
         else{
             this.ecoreFactory = EcoreFactoryInstance.eINSTANCE;
             this.ecorePackage = EcorePackageImpl.eINSTANCE;
         }

     }
     */
    EPackageImpl.prototype.getEClassifier = function (name) {
        for (var _i = 0, _a = this.eClassifiers; _i < _a.length; _i++) {
            var eclassifier = _a[_i];
            if (eclassifier.name === name) {
                return eclassifier;
            }
        }
        return null;
    };
    ;
    EPackageImpl.prototype.initEEnum = function (e, instanceClass, name) {
        this.initEClassifier(e, this.ecorePackage.getEEnum(), instanceClass, name, true);
        return e;
    };
    EPackageImpl.IS_ABSTRACT = true;
    EPackageImpl.IS_INTERFACE = true;
    EPackageImpl.IS_GENERATED_INSTANCE_CLASS = true;
    EPackageImpl.IS_SERIALIZABLE = true;
    EPackageImpl.IS_DERIVED = true;
    EPackageImpl.IS_TRANSIENT = true;
    EPackageImpl.IS_VOLATILE = true;
    EPackageImpl.IS_CHANGEABLE = true;
    EPackageImpl.IS_UNSETTABLE = true;
    EPackageImpl.IS_UNIQUE = true;
    EPackageImpl.IS_ID = true;
    EPackageImpl.IS_ORDERED = true;
    EPackageImpl.IS_COMPOSITE = true;
    EPackageImpl.IS_RESOLVE_PROXIES = true;
    return EPackageImpl;
}(_EPackageBase__WEBPACK_IMPORTED_MODULE_0__["EPackageBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EParameterBase.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EParameterBase.ts ***!
  \*******************************************************/
/*! exports provided: EParameterBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EParameterBase", function() { return EParameterBase; });
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ETypedElementImpl */ "./node_modules/crossecore/src/ETypedElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EParameterBase = /** @class */ (function (_super) {
    __extends(EParameterBase, _super);
    function EParameterBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EParameterBase.prototype, "eOperation", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EOPERATION)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    EParameterBase.prototype.eStaticClass = function () {
        return EParameterBase.eStaticClass;
    };
    EParameterBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EOPERATION:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEOperation(otherEnd, msgs);
        }
        //return this.eInverseAddFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEParameter = this.eInverseAdd;
    EParameterBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EOPERATION:
                return this.basicSetEOperation(null, msgs);
        }
        //return this.eInverseRemoveFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEParameter = this.eInverseRemove;
    EParameterBase.prototype.basicSetEOperation = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EOPERATION, msgs);
        return msgs;
    };
    EParameterBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EGENERICTYPE:
                return this.eGenericType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].EPARAMETER_EOPERATION:
                return this.eOperation;
        }
        //return this.eGetFromETypedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EParameterBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EParameterBase;
}(_ETypedElementImpl__WEBPACK_IMPORTED_MODULE_1__["ETypedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EParameterImpl.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EParameterImpl.ts ***!
  \*******************************************************/
/*! exports provided: EParameterImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EParameterImpl", function() { return EParameterImpl; });
/* harmony import */ var _EParameterBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EParameterBase */ "./node_modules/crossecore/src/EParameterBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EParameterImpl = /** @class */ (function (_super) {
    __extends(EParameterImpl, _super);
    function EParameterImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EParameterImpl;
}(_EParameterBase__WEBPACK_IMPORTED_MODULE_0__["EParameterBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EReferenceBase.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EReferenceBase.ts ***!
  \*******************************************************/
/*! exports provided: EReferenceBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EReferenceBase", function() { return EReferenceBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EStructuralFeatureImpl */ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var EReferenceBase = /** @class */ (function (_super) {
    __extends(EReferenceBase, _super);
    function EReferenceBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._containment = false;
        _this._resolveProxies = false;
        _this._eOpposite = null;
        _this._eKeys = null;
        return _this;
    }
    Object.defineProperty(EReferenceBase.prototype, "containment", {
        get: function () {
            return this._containment;
        },
        set: function (value) {
            this._containment = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EReferenceBase.prototype, "container", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EReferenceBase.prototype, "resolveProxies", {
        get: function () {
            return this._resolveProxies;
        },
        set: function (value) {
            this._resolveProxies = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EReferenceBase.prototype, "eOpposite", {
        get: function () {
            return this._eOpposite;
        },
        set: function (value) {
            var oldvalue = this._eOpposite;
            this._eOpposite = value;
            if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EOPPOSITE, oldvalue, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EReferenceBase.prototype, "eReferenceType", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EReferenceBase.prototype, "eKeys", {
        get: function () {
            if (this._eKeys === null) {
                this._eKeys = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EKEYS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_5__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EKEYS);
            }
            return this._eKeys;
        },
        enumerable: false,
        configurable: true
    });
    EReferenceBase.prototype.eStaticClass = function () {
        return EReferenceBase.eStaticClass;
    };
    EReferenceBase.prototype.basicSetEOpposite = function (newobj, msgs) {
        var oldobj = this._eOpposite;
        this._eOpposite = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_1__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_2__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EOPPOSITE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    EReferenceBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EGENERICTYPE:
                return this.eGenericType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_CHANGEABLE:
                return this.changeable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_VOLATILE:
                return this.volatile;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_TRANSIENT:
                return this.transient;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_DEFAULTVALUELITERAL:
                return this.defaultValueLiteral;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_UNSETTABLE:
                return this.unsettable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_DERIVED:
                return this.derived;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_ECONTAININGCLASS:
                return this.eContainingClass;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_CONTAINMENT:
                return this.containment;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_CONTAINER:
                return this.container;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_RESOLVEPROXIES:
                return this.resolveProxies;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EOPPOSITE:
                return this.eOpposite;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EREFERENCETYPE:
                return this.eReferenceType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EKEYS:
                return this.eKeys;
        }
        //return this.eGetFromEStructuralFeature(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EReferenceBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_CONTAINMENT:
                this.containment = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_RESOLVEPROXIES:
                this.resolveProxies = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EOPPOSITE:
                this.eOpposite = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_4__["EcorePackageLiterals"].EREFERENCE_EKEYS:
                this.eKeys.clear();
                this.eKeys.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EReferenceBase;
}(_EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_3__["EStructuralFeatureImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EReferenceImpl.ts":
/*!*******************************************************!*\
  !*** ./node_modules/crossecore/src/EReferenceImpl.ts ***!
  \*******************************************************/
/*! exports provided: EReferenceImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EReferenceImpl", function() { return EReferenceImpl; });
/* harmony import */ var _EReferenceBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EReferenceBase */ "./node_modules/crossecore/src/EReferenceBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EReferenceImpl = /** @class */ (function (_super) {
    __extends(EReferenceImpl, _super);
    function EReferenceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EReferenceImpl.prototype.getFeatureID = function () {
        return this.featureID;
    };
    ;
    return EReferenceImpl;
}(_EReferenceBase__WEBPACK_IMPORTED_MODULE_0__["EReferenceBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EStringToStringMapEntryBase.ts":
/*!********************************************************************!*\
  !*** ./node_modules/crossecore/src/EStringToStringMapEntryBase.ts ***!
  \********************************************************************/
/*! exports provided: EStringToStringMapEntryBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EStringToStringMapEntryBase", function() { return EStringToStringMapEntryBase; });
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EStringToStringMapEntryBase = /** @class */ (function (_super) {
    __extends(EStringToStringMapEntryBase, _super);
    function EStringToStringMapEntryBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._key = '';
        _this._value = '';
        return _this;
    }
    Object.defineProperty(EStringToStringMapEntryBase.prototype, "key", {
        get: function () {
            return this._key;
        },
        set: function (value) {
            this._key = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStringToStringMapEntryBase.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    EStringToStringMapEntryBase.prototype.eStaticClass = function () {
        return EStringToStringMapEntryBase.eStaticClass;
    };
    EStringToStringMapEntryBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRINGTOSTRINGMAPENTRY_KEY:
                return this.key;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRINGTOSTRINGMAPENTRY_VALUE:
                return this.value;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EStringToStringMapEntryBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRINGTOSTRINGMAPENTRY_KEY:
                this.key = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRINGTOSTRINGMAPENTRY_VALUE:
                this.value = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EStringToStringMapEntryBase;
}(_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EStringToStringMapEntryImpl.ts":
/*!********************************************************************!*\
  !*** ./node_modules/crossecore/src/EStringToStringMapEntryImpl.ts ***!
  \********************************************************************/
/*! exports provided: EStringToStringMapEntryImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EStringToStringMapEntryImpl", function() { return EStringToStringMapEntryImpl; });
/* harmony import */ var _EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EStringToStringMapEntryBase */ "./node_modules/crossecore/src/EStringToStringMapEntryBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EStringToStringMapEntryImpl = /** @class */ (function (_super) {
    __extends(EStringToStringMapEntryImpl, _super);
    function EStringToStringMapEntryImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EStringToStringMapEntryImpl;
}(_EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_0__["EStringToStringMapEntryBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EStructuralFeatureBase.ts":
/*!***************************************************************!*\
  !*** ./node_modules/crossecore/src/EStructuralFeatureBase.ts ***!
  \***************************************************************/
/*! exports provided: EStructuralFeatureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EStructuralFeatureBase", function() { return EStructuralFeatureBase; });
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ETypedElementImpl */ "./node_modules/crossecore/src/ETypedElementImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var EStructuralFeatureBase = /** @class */ (function (_super) {
    __extends(EStructuralFeatureBase, _super);
    function EStructuralFeatureBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._changeable = false;
        _this._volatile = false;
        _this._transient = false;
        _this._defaultValueLiteral = '';
        _this._unsettable = false;
        _this._derived = false;
        return _this;
    }
    Object.defineProperty(EStructuralFeatureBase.prototype, "changeable", {
        get: function () {
            return this._changeable;
        },
        set: function (value) {
            this._changeable = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "volatile", {
        get: function () {
            return this._volatile;
        },
        set: function (value) {
            this._volatile = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "transient", {
        get: function () {
            return this._transient;
        },
        set: function (value) {
            this._transient = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "defaultValueLiteral", {
        get: function () {
            return this._defaultValueLiteral;
        },
        set: function (value) {
            this._defaultValueLiteral = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "defaultValue", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "unsettable", {
        get: function () {
            return this._unsettable;
        },
        set: function (value) {
            this._unsettable = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "derived", {
        get: function () {
            return this._derived;
        },
        set: function (value) {
            this._derived = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EStructuralFeatureBase.prototype, "eContainingClass", {
        get: function () {
            if (this.eContainerFeatureID() != _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS)
                return null;
            return this.eInternalContainer();
        },
        enumerable: false,
        configurable: true
    });
    EStructuralFeatureBase.prototype.getContainerClass = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EStructuralFeatureBase.prototype.getFeatureID = function () {
        /*TODO implement function*/
        return null;
    };
    ;
    EStructuralFeatureBase.prototype.eStaticClass = function () {
        return EStructuralFeatureBase.eStaticClass;
    };
    EStructuralFeatureBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS:
                if (this.eInternalContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs);
                }
                return this.basicSetEContainingClass(otherEnd, msgs);
        }
        //return this.eInverseAddFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromEStructuralFeature = this.eInverseAdd;
    EStructuralFeatureBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS:
                return this.basicSetEContainingClass(null, msgs);
        }
        //return this.eInverseRemoveFromETypedElement(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromEStructuralFeature = this.eInverseRemove;
    EStructuralFeatureBase.prototype.basicSetEContainingClass = function (newobj, msgs) {
        msgs = this.eBasicSetContainer(newobj, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS, msgs);
        return msgs;
    };
    EStructuralFeatureBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_EGENERICTYPE:
                return this.eGenericType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_CHANGEABLE:
                return this.changeable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_VOLATILE:
                return this.volatile;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_TRANSIENT:
                return this.transient;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_DEFAULTVALUELITERAL:
                return this.defaultValueLiteral;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_DEFAULTVALUE:
                return this.defaultValue;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_UNSETTABLE:
                return this.unsettable;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_DERIVED:
                return this.derived;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_ECONTAININGCLASS:
                return this.eContainingClass;
        }
        //return this.eGetFromETypedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    EStructuralFeatureBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_CHANGEABLE:
                this.changeable = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_VOLATILE:
                this.volatile = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_TRANSIENT:
                this.transient = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_DEFAULTVALUELITERAL:
                this.defaultValueLiteral = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_UNSETTABLE:
                this.unsettable = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_0__["EcorePackageLiterals"].ESTRUCTURALFEATURE_DERIVED:
                this.derived = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return EStructuralFeatureBase;
}(_ETypedElementImpl__WEBPACK_IMPORTED_MODULE_1__["ETypedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts":
/*!***************************************************************!*\
  !*** ./node_modules/crossecore/src/EStructuralFeatureImpl.ts ***!
  \***************************************************************/
/*! exports provided: EStructuralFeatureImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EStructuralFeatureImpl", function() { return EStructuralFeatureImpl; });
/* harmony import */ var _EStructuralFeatureBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EStructuralFeatureBase */ "./node_modules/crossecore/src/EStructuralFeatureBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var EStructuralFeatureImpl = /** @class */ (function (_super) {
    __extends(EStructuralFeatureImpl, _super);
    function EStructuralFeatureImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.featureID = -1;
        _this.setContainerClass = function (f) {
            _this.containerClass_ = f;
        };
        return _this;
    }
    EStructuralFeatureImpl.prototype.setFeatureID = function (id) {
        this.featureID = id;
    };
    EStructuralFeatureImpl.prototype.getFeatureID = function () {
        return this.featureID;
    };
    ;
    EStructuralFeatureImpl.prototype.getContainerClass = function () {
        return this.containerClass_;
    };
    ;
    return EStructuralFeatureImpl;
}(_EStructuralFeatureBase__WEBPACK_IMPORTED_MODULE_0__["EStructuralFeatureBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ETypeParameterBase.ts":
/*!***********************************************************!*\
  !*** ./node_modules/crossecore/src/ETypeParameterBase.ts ***!
  \***********************************************************/
/*! exports provided: ETypeParameterBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETypeParameterBase", function() { return ETypeParameterBase; });
/* harmony import */ var _OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var ETypeParameterBase = /** @class */ (function (_super) {
    __extends(ETypeParameterBase, _super);
    function ETypeParameterBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._eBounds = null;
        return _this;
    }
    Object.defineProperty(ETypeParameterBase.prototype, "eBounds", {
        get: function () {
            if (this._eBounds === null) {
                this._eBounds = new _OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_EBOUNDS, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_3__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_EBOUNDS);
            }
            return this._eBounds;
        },
        enumerable: false,
        configurable: true
    });
    ETypeParameterBase.prototype.eStaticClass = function () {
        return ETypeParameterBase.eStaticClass;
    };
    ETypeParameterBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_EBOUNDS:
                return this.eBounds;
        }
        //return this.eGetFromENamedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    ETypeParameterBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["EcorePackageLiterals"].ETYPEPARAMETER_EBOUNDS:
                this.eBounds.clear();
                this.eBounds.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return ETypeParameterBase;
}(_ENamedElementImpl__WEBPACK_IMPORTED_MODULE_1__["ENamedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ETypeParameterImpl.ts":
/*!***********************************************************!*\
  !*** ./node_modules/crossecore/src/ETypeParameterImpl.ts ***!
  \***********************************************************/
/*! exports provided: ETypeParameterImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETypeParameterImpl", function() { return ETypeParameterImpl; });
/* harmony import */ var _ETypeParameterBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ETypeParameterBase */ "./node_modules/crossecore/src/ETypeParameterBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var ETypeParameterImpl = /** @class */ (function (_super) {
    __extends(ETypeParameterImpl, _super);
    function ETypeParameterImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ETypeParameterImpl;
}(_ETypeParameterBase__WEBPACK_IMPORTED_MODULE_0__["ETypeParameterBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ETypedElementBase.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/ETypedElementBase.ts ***!
  \**********************************************************/
/*! exports provided: ETypedElementBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETypedElementBase", function() { return ETypedElementBase; });
/* harmony import */ var _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EcorePackageLiterals */ "./node_modules/crossecore/src/EcorePackageLiterals.ts");
/* harmony import */ var _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var ETypedElementBase = /** @class */ (function (_super) {
    __extends(ETypedElementBase, _super);
    function ETypedElementBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._ordered = false;
        _this._unique = false;
        _this._lowerBound = 0;
        _this._upperBound = 0;
        _this._eType = null;
        _this._eGenericType = null;
        return _this;
    }
    Object.defineProperty(ETypedElementBase.prototype, "ordered", {
        get: function () {
            return this._ordered;
        },
        set: function (value) {
            this._ordered = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "unique", {
        get: function () {
            return this._unique;
        },
        set: function (value) {
            this._unique = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "lowerBound", {
        get: function () {
            return this._lowerBound;
        },
        set: function (value) {
            this._lowerBound = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "upperBound", {
        get: function () {
            return this._upperBound;
        },
        set: function (value) {
            this._upperBound = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "many", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "required", {
        get: function () {
            //TODO implement derivation
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "eType", {
        get: function () {
            return this._eType;
        },
        set: function (value) {
            var oldvalue = this._eType;
            this._eType = value;
            if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ETYPE, oldvalue, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ETypedElementBase.prototype, "eGenericType", {
        get: function () {
            return this._eGenericType;
        },
        set: function (value) {
            if (value != this._eGenericType) {
                var msgs = null;
                if (this._eGenericType != null) {
                    msgs = (this._eGenericType).eInverseRemove(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE, /*null*/ null, msgs);
                }
                if (value != null) {
                    msgs = value.eInverseAdd(this, _BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE, /*null*/ null, msgs);
                }
                msgs = this.basicSetEGenericType(value, msgs);
                if (msgs != null) {
                    msgs.dispatch();
                }
            }
            else if (this.eNotificationRequired()) {
                this.eNotify(new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE, value, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    ETypedElementBase.prototype.eStaticClass = function () {
        return ETypedElementBase.eStaticClass;
    };
    ETypedElementBase.prototype.basicSetEGenericType = function (newobj, msgs) {
        var oldobj = this._eGenericType;
        this._eGenericType = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    ETypedElementBase.prototype.basicSetEType = function (newobj, msgs) {
        var oldobj = this._eType;
        this._eType = newobj;
        if (this.eNotificationRequired()) {
            var notification = new _ENotificationImpl__WEBPACK_IMPORTED_MODULE_0__["ENotificationImpl"](this, _NotificationImpl__WEBPACK_IMPORTED_MODULE_1__["NotificationImpl"].SET, _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ETYPE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    ETypedElementBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EANNOTATIONS:
                return this.eAnnotations;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_NAME:
                return this.name;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ORDERED:
                return this.ordered;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_UNIQUE:
                return this.unique;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_LOWERBOUND:
                return this.lowerBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_UPPERBOUND:
                return this.upperBound;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_MANY:
                return this.many;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_REQUIRED:
                return this.required;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ETYPE:
                return this.eType;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE:
                return this.eGenericType;
        }
        //return this.eGetFromENamedElement(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    ETypedElementBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ORDERED:
                this.ordered = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_UNIQUE:
                this.unique = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_LOWERBOUND:
                this.lowerBound = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_UPPERBOUND:
                this.upperBound = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_ETYPE:
                this.eType = newValue;
                return;
            case _EcorePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["EcorePackageLiterals"].ETYPEDELEMENT_EGENERICTYPE:
                this.eGenericType = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return ETypedElementBase;
}(_ENamedElementImpl__WEBPACK_IMPORTED_MODULE_2__["ENamedElementImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/ETypedElementImpl.ts":
/*!**********************************************************!*\
  !*** ./node_modules/crossecore/src/ETypedElementImpl.ts ***!
  \**********************************************************/
/*! exports provided: ETypedElementImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETypedElementImpl", function() { return ETypedElementImpl; });
/* harmony import */ var _ETypedElementBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ETypedElementBase */ "./node_modules/crossecore/src/ETypedElementBase.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

///<summary>This class was generated.</summary>
var ETypedElementImpl = /** @class */ (function (_super) {
    __extends(ETypedElementImpl, _super);
    function ETypedElementImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ETypedElementImpl.prototype, "many", {
        get: function () {
            return this.upperBound == -1 || this.upperBound > 1;
        },
        enumerable: false,
        configurable: true
    });
    return ETypedElementImpl;
}(_ETypedElementBase__WEBPACK_IMPORTED_MODULE_0__["ETypedElementBase"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EcoreEMap.ts":
/*!**************************************************!*\
  !*** ./node_modules/crossecore/src/EcoreEMap.ts ***!
  \**************************************************/
/*! exports provided: EcoreEMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EcoreEMap", function() { return EcoreEMap; });
var EcoreEMap = /** @class */ (function () {
    function EcoreEMap(entryEClass, entryClass, owner, featureID) {
        this.entryClass = entryClass;
        this.entryEClass = entryEClass;
        this.hashmap = {};
    }
    EcoreEMap.prototype.get = function (key) {
        return this.hashmap[key];
    };
    EcoreEMap.prototype.put = function (key, value) {
        var oldValue;
        if (this.containsKey(key)) {
            oldValue = this.hashmap[key];
        }
        this.hashmap[key] = value;
        return oldValue;
    };
    EcoreEMap.prototype.set = function (value) {
        this.hashmap = {};
        this.putAll(value);
    };
    EcoreEMap.prototype.containsKey = function (key) {
        return this.hashmap[key] !== undefined;
    };
    EcoreEMap.prototype.putAll = function (map) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                this.hashmap.put(prop, map[prop]);
            }
        }
    };
    EcoreEMap.prototype.isEmpty = function () {
        for (var prop in this.hashmap) {
            if (this.hashmap.hasOwnProperty(prop)) {
                return false;
            }
        }
        return true;
    };
    return EcoreEMap;
}());



/***/ }),

/***/ "./node_modules/crossecore/src/EcoreFactoryImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EcoreFactoryImpl.ts ***!
  \*********************************************************/
/*! exports provided: EcoreFactoryImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EcoreFactoryImpl", function() { return EcoreFactoryImpl; });
/* harmony import */ var _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EStructuralFeatureImpl */ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts");
/* harmony import */ var _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EDataTypeImpl */ "./node_modules/crossecore/src/EDataTypeImpl.ts");
/* harmony import */ var _EReferenceImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EReferenceImpl */ "./node_modules/crossecore/src/EReferenceImpl.ts");
/* harmony import */ var _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EAnnotationImpl */ "./node_modules/crossecore/src/EAnnotationImpl.ts");
/* harmony import */ var _EAttributeImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EAttributeImpl */ "./node_modules/crossecore/src/EAttributeImpl.ts");
/* harmony import */ var _EClassImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EClassImpl */ "./node_modules/crossecore/src/EClassImpl.ts");
/* harmony import */ var _EModelElementImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EModelElementImpl */ "./node_modules/crossecore/src/EModelElementImpl.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EStringToStringMapEntryImpl */ "./node_modules/crossecore/src/EStringToStringMapEntryImpl.ts");
/* harmony import */ var _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ETypedElementImpl */ "./node_modules/crossecore/src/ETypedElementImpl.ts");
/* harmony import */ var _EFactoryImpl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./EFactoryImpl */ "./node_modules/crossecore/src/EFactoryImpl.ts");
/* harmony import */ var _EParameterImpl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EParameterImpl */ "./node_modules/crossecore/src/EParameterImpl.ts");
/* harmony import */ var _EObjectImpl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EObjectImpl */ "./node_modules/crossecore/src/EObjectImpl.ts");
/* harmony import */ var _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./EEnumLiteralImpl */ "./node_modules/crossecore/src/EEnumLiteralImpl.ts");
/* harmony import */ var _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./EGenericTypeImpl */ "./node_modules/crossecore/src/EGenericTypeImpl.ts");
/* harmony import */ var _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./EPackageImpl */ "./node_modules/crossecore/src/EPackageImpl.ts");
/* harmony import */ var _ETypeParameterImpl__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ETypeParameterImpl */ "./node_modules/crossecore/src/ETypeParameterImpl.ts");
/* harmony import */ var _EClassifierImpl__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./EClassifierImpl */ "./node_modules/crossecore/src/EClassifierImpl.ts");
/* harmony import */ var _EEnumImpl__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./EEnumImpl */ "./node_modules/crossecore/src/EEnumImpl.ts");
/* harmony import */ var _AllInstances__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./AllInstances */ "./node_modules/crossecore/src/AllInstances.ts");
/* harmony import */ var _EOperationImpl__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./EOperationImpl */ "./node_modules/crossecore/src/EOperationImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





















var EcoreFactoryImpl = /** @class */ (function (_super) {
    __extends(EcoreFactoryImpl, _super);
    function EcoreFactoryImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createEAttribute = function () {
            var theEAttribute = new _EAttributeImpl__WEBPACK_IMPORTED_MODULE_4__["EAttributeImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEAttribute, "EAttribute");
            return theEAttribute;
        };
        _this.createEAnnotation = function () {
            var theEAnnotation = new _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_3__["EAnnotationImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEAnnotation, "EAnnotation");
            return theEAnnotation;
        };
        _this.createEClass = function () {
            var theEClass = new _EClassImpl__WEBPACK_IMPORTED_MODULE_5__["EClassImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEClass, "EClass");
            return theEClass;
        };
        _this.createEClassifier = function () {
            var theEClassifier = new _EClassifierImpl__WEBPACK_IMPORTED_MODULE_17__["EClassifierImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEClassifier, "EClassifier");
            return theEClassifier;
        };
        _this.createEDataType = function () {
            var theEDataType = new _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_1__["EDataTypeImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEDataType, "EDataType");
            return theEDataType;
        };
        _this.createEEnum = function () {
            var theEEnum = new _EEnumImpl__WEBPACK_IMPORTED_MODULE_18__["EEnumImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEEnum, "EEnum");
            return theEEnum;
        };
        _this.createEEnumLiteral = function () {
            var theEEnumLiteral = new _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_13__["EEnumLiteralImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEEnumLiteral, "EEnumLiteral");
            return theEEnumLiteral;
        };
        _this.createEFactory = function () {
            var theEFactory = new _EFactoryImpl__WEBPACK_IMPORTED_MODULE_10__["EFactoryImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEFactory, "EFactory");
            return theEFactory;
        };
        _this.createEModelElement = function () {
            var theEModelElement = new _EModelElementImpl__WEBPACK_IMPORTED_MODULE_6__["EModelElementImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEModelElement, "EModelElement");
            return theEModelElement;
        };
        _this.createENamedElement = function () {
            var theENamedElement = new _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_7__["ENamedElementImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theENamedElement, "ENamedElement");
            return theENamedElement;
        };
        _this.createEObject = function () {
            var theEObject = new _EObjectImpl__WEBPACK_IMPORTED_MODULE_12__["EObjectImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEObject, "EObject");
            return theEObject;
        };
        _this.createEOperation = function () {
            var theEOperation = new _EOperationImpl__WEBPACK_IMPORTED_MODULE_20__["EOperationImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEOperation, "EOperation");
            return theEOperation;
        };
        _this.createEPackage = function () {
            var theEPackage = new _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEPackage, "EPackage");
            return theEPackage;
        };
        _this.createEParameter = function () {
            var theEParameter = new _EParameterImpl__WEBPACK_IMPORTED_MODULE_11__["EParameterImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEParameter, "EParameter");
            return theEParameter;
        };
        _this.createEReference = function () {
            var theEReference = new _EReferenceImpl__WEBPACK_IMPORTED_MODULE_2__["EReferenceImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEReference, "EReference");
            return theEReference;
        };
        _this.createEStructuralFeature = function () {
            var theEStructuralFeature = new _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_0__["EStructuralFeatureImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEStructuralFeature, "EStructuralFeature");
            return theEStructuralFeature;
        };
        _this.createETypedElement = function () {
            var theETypedElement = new _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_9__["ETypedElementImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theETypedElement, "ETypedElement");
            return theETypedElement;
        };
        _this.createEStringToStringMapEntry = function () {
            var theEStringToStringMapEntry = new _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_8__["EStringToStringMapEntryImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEStringToStringMapEntry, "EStringToStringMapEntry");
            return theEStringToStringMapEntry;
        };
        _this.createEGenericType = function () {
            var theEGenericType = new _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_14__["EGenericTypeImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theEGenericType, "EGenericType");
            return theEGenericType;
        };
        _this.createETypeParameter = function () {
            var theETypeParameter = new _ETypeParameterImpl__WEBPACK_IMPORTED_MODULE_16__["ETypeParameterImpl"]();
            _AllInstances__WEBPACK_IMPORTED_MODULE_19__["AllInstances"].INSTANCE.put(theETypeParameter, "ETypeParameter");
            return theETypeParameter;
        };
        return _this;
    }
    EcoreFactoryImpl.init = function () {
        return new EcoreFactoryImpl();
    };
    EcoreFactoryImpl.prototype.create = function (eClass) {
        switch (eClass.getClassifierID()) {
            case 0: return this.createEAttribute();
            case 1: return this.createEAnnotation();
            case 2: return this.createEClass();
            case 4: return this.createEDataType();
            case 5: return this.createEEnum();
            case 6: return this.createEEnumLiteral();
            case 7: return this.createEFactory();
            case 10: return this.createEObject();
            case 11: return this.createEOperation();
            case 12: return this.createEPackage();
            case 13: return this.createEParameter();
            case 14: return this.createEReference();
            case 48: return this.createEStringToStringMapEntry();
            case 50: return this.createEGenericType();
            case 51: return this.createETypeParameter();
            default:
                throw new Error("The class '" + eClass.name + "' is not a valid classifier");
        }
    };
    EcoreFactoryImpl.prototype.createFromString = function (eDataType, initialValue) {
        switch (eDataType.getClassifierID()) {
            case 17: //EcorePackageImpl.EBIGDECIMAL
                return this.createEBigDecimalFromString(eDataType, initialValue);
            case 18: //EcorePackageImpl.EBIGINTEGER
                return this.createEBigIntegerFromString(eDataType, initialValue);
            case 19: //EcorePackageImpl.EBOOLEAN
                return this.createEBooleanFromString(eDataType, initialValue);
            case 20: //EcorePackageImpl.EBOOLEANOBJECT
                return this.createEBooleanObjectFromString(eDataType, initialValue);
            case 21: //EcorePackageImpl.EBYTE
                return this.createEByteFromString(eDataType, initialValue);
            case 22: //EcorePackageImpl.EBYTEARRAY
                return this.createEByteArrayFromString(eDataType, initialValue);
            case 23: //EcorePackageImpl.EBYTEOBJECT
                return this.createEByteObjectFromString(eDataType, initialValue);
            case 24: //EcorePackageImpl.ECHAR
                return this.createECharFromString(eDataType, initialValue);
            case 25: //EcorePackageImpl.ECHARACTEROBJECT
                return this.createECharacterObjectFromString(eDataType, initialValue);
            case 26: //EcorePackageImpl.EDATE
                return this.createEDateFromString(eDataType, initialValue);
            case 28: //EcorePackageImpl.EDOUBLE
                return this.createEDoubleFromString(eDataType, initialValue);
            case 29: //EcorePackageImpl.EDOUBLEOBJECT
                return this.createEDoubleObjectFromString(eDataType, initialValue);
            case 34: //EcorePackageImpl.EFLOAT
                return this.createEFloatFromString(eDataType, initialValue);
            case 35: //EcorePackageImpl.EFLOATOBJECT
                return this.createEFloatObjectFromString(eDataType, initialValue);
            case 36: //EcorePackageImpl.EINT
                return this.createEIntFromString(eDataType, initialValue);
            case 37: //EcorePackageImpl.EINTEGEROBJECT
                return this.createEIntegerObjectFromString(eDataType, initialValue);
            case 38: //EcorePackageImpl.EJAVACLASS
                return this.createEJavaClassFromString(eDataType, initialValue);
            case 39: //EcorePackageImpl.EJAVAOBJECT
                return this.createEJavaObjectFromString(eDataType, initialValue);
            case 40: //EcorePackageImpl.ELONG
                return this.createELongFromString(eDataType, initialValue);
            case 41: //EcorePackageImpl.ELONGOBJECT
                return this.createELongObjectFromString(eDataType, initialValue);
            case 45: //EcorePackageImpl.ESHORT
                return this.createEShortFromString(eDataType, initialValue);
            case 46: //EcorePackageImpl.ESHORTOBJECT
                return this.createEShortObjectFromString(eDataType, initialValue);
            case 47: //EcorePackageImpl.ESTRING
                return this.createEStringFromString(eDataType, initialValue);
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    };
    EcoreFactoryImpl.prototype.convertToString = function (eDataType, instanceValue) {
        switch (eDataType.getClassifierID()) {
            case 17: //EcorePackageImpl.EBIGDECIMAL
                return this.convertEBigDecimalToString(eDataType, instanceValue);
            case 18: //EcorePackageImpl.EBIGINTEGER
                return this.convertEBigIntegerToString(eDataType, instanceValue);
            case 19: //EcorePackageImpl.EBOOLEAN
                return this.convertEBooleanToString(eDataType, instanceValue);
            case 20: //EcorePackageImpl.EBOOLEANOBJECT
                return this.convertEBooleanObjectToString(eDataType, instanceValue);
            case 21: //EcorePackageImpl.EBYTE
                return this.convertEByteToString(eDataType, instanceValue);
            case 22: //EcorePackageImpl.EBYTEARRAY
                return this.convertEByteArrayToString(eDataType, instanceValue);
            case 23: //EcorePackageImpl.EBYTEOBJECT
                return this.convertEByteObjectToString(eDataType, instanceValue);
            case 24: //EcorePackageImpl.ECHAR
                return this.convertECharToString(eDataType, instanceValue);
            case 25: //EcorePackageImpl.ECHARACTEROBJECT
                return this.convertECharacterObjectToString(eDataType, instanceValue);
            case 26: //EcorePackageImpl.EDATE
                return this.convertEDateToString(eDataType, instanceValue);
            case 28: //EcorePackageImpl.EDOUBLE
                return this.convertEDoubleToString(eDataType, instanceValue);
            case 29: //EcorePackageImpl.EDOUBLEOBJECT
                return this.convertEDoubleObjectToString(eDataType, instanceValue);
            case 34: //EcorePackageImpl.EFLOAT
                return this.convertEFloatToString(eDataType, instanceValue);
            case 35: //EcorePackageImpl.EFLOATOBJECT
                return this.convertEFloatObjectToString(eDataType, instanceValue);
            case 36: //EcorePackageImpl.EINT
                return this.convertEIntToString(eDataType, instanceValue);
            case 37: //EcorePackageImpl.EINTEGEROBJECT
                return this.convertEIntegerObjectToString(eDataType, instanceValue);
            case 38: //EcorePackageImpl.EJAVACLASS
                return this.convertEJavaClassToString(eDataType, instanceValue);
            case 39: //EcorePackageImpl.EJAVAOBJECT
                return this.convertEJavaObjectToString(eDataType, instanceValue);
            case 40: //EcorePackageImpl.ELONG
                return this.convertELongToString(eDataType, instanceValue);
            case 41: //EcorePackageImpl.ELONGOBJECT
                return this.convertELongObjectToString(eDataType, instanceValue);
            case 45: //EcorePackageImpl.ESHORT
                return this.convertEShortToString(eDataType, instanceValue);
            case 46: //EcorePackageImpl.ESHORTOBJECT
                return this.convertEShortObjectToString(eDataType, instanceValue);
            case 47: //EcorePackageImpl.ESTRING
                return this.convertEStringToString(eDataType, instanceValue);
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    };
    EcoreFactoryImpl.prototype.createEBigDecimalFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEBigDecimalToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEBigIntegerFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEBigIntegerToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEBooleanFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEBooleanToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEBooleanObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEBooleanObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEByteFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEByteToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEByteArrayFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEByteArrayToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEByteObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEByteObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createECharFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertECharToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createECharacterObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertECharacterObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEDateFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEDateToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEDoubleFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEDoubleToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEDoubleObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEDoubleObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEFloatFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEFloatToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEFloatObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEFloatObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEIntFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEIntToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEIntegerObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEIntegerObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEJavaClassFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEJavaClassToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEJavaObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEJavaObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createELongFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertELongToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createELongObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertELongObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEShortFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEShortToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEShortObjectFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEShortObjectToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.prototype.createEStringFromString = function (eDataType, initialValue) {
        return initialValue == null ? null : JSON.parse(initialValue);
    };
    EcoreFactoryImpl.prototype.convertEStringToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : JSON.stringify(instanceValue);
    };
    EcoreFactoryImpl.eINSTANCE = EcoreFactoryImpl.init();
    return EcoreFactoryImpl;
}(_EFactoryImpl__WEBPACK_IMPORTED_MODULE_10__["EFactoryImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EcorePackageImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/EcorePackageImpl.ts ***!
  \*********************************************************/
/*! exports provided: EcorePackageImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EcorePackageImpl", function() { return EcorePackageImpl; });
/* harmony import */ var _EEnumBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EEnumBase */ "./node_modules/crossecore/src/EEnumBase.ts");
/* harmony import */ var _EAttributeBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EAttributeBase */ "./node_modules/crossecore/src/EAttributeBase.ts");
/* harmony import */ var _EFactoryBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EFactoryBase */ "./node_modules/crossecore/src/EFactoryBase.ts");
/* harmony import */ var _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EStringToStringMapEntryImpl */ "./node_modules/crossecore/src/EStringToStringMapEntryImpl.ts");
/* harmony import */ var _EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EcoreFactoryImpl */ "./node_modules/crossecore/src/EcoreFactoryImpl.ts");
/* harmony import */ var _EEnumImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EEnumImpl */ "./node_modules/crossecore/src/EEnumImpl.ts");
/* harmony import */ var _ETypedElementBase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ETypedElementBase */ "./node_modules/crossecore/src/ETypedElementBase.ts");
/* harmony import */ var _EStructuralFeatureBase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./EStructuralFeatureBase */ "./node_modules/crossecore/src/EStructuralFeatureBase.ts");
/* harmony import */ var _EClassBase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EClassBase */ "./node_modules/crossecore/src/EClassBase.ts");
/* harmony import */ var _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./EAnnotationImpl */ "./node_modules/crossecore/src/EAnnotationImpl.ts");
/* harmony import */ var _ENamedElementBase__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ENamedElementBase */ "./node_modules/crossecore/src/ENamedElementBase.ts");
/* harmony import */ var _EModelElementBase__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EModelElementBase */ "./node_modules/crossecore/src/EModelElementBase.ts");
/* harmony import */ var _EFactoryImpl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EFactoryImpl */ "./node_modules/crossecore/src/EFactoryImpl.ts");
/* harmony import */ var _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./EOperationImpl */ "./node_modules/crossecore/src/EOperationImpl.ts");
/* harmony import */ var _ETypeParameterBase__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ETypeParameterBase */ "./node_modules/crossecore/src/ETypeParameterBase.ts");
/* harmony import */ var _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./EPackageImpl */ "./node_modules/crossecore/src/EPackageImpl.ts");
/* harmony import */ var _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./EStructuralFeatureImpl */ "./node_modules/crossecore/src/EStructuralFeatureImpl.ts");
/* harmony import */ var _EReferenceBase__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./EReferenceBase */ "./node_modules/crossecore/src/EReferenceBase.ts");
/* harmony import */ var _EModelElementImpl__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./EModelElementImpl */ "./node_modules/crossecore/src/EModelElementImpl.ts");
/* harmony import */ var _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./EGenericTypeImpl */ "./node_modules/crossecore/src/EGenericTypeImpl.ts");
/* harmony import */ var _EClassifierBase__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./EClassifierBase */ "./node_modules/crossecore/src/EClassifierBase.ts");
/* harmony import */ var _EDataTypeBase__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./EDataTypeBase */ "./node_modules/crossecore/src/EDataTypeBase.ts");
/* harmony import */ var _EOperationBase__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./EOperationBase */ "./node_modules/crossecore/src/EOperationBase.ts");
/* harmony import */ var _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./EEnumLiteralImpl */ "./node_modules/crossecore/src/EEnumLiteralImpl.ts");
/* harmony import */ var _EObjectBase__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./EObjectBase */ "./node_modules/crossecore/src/EObjectBase.ts");
/* harmony import */ var _EAnnotationBase__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./EAnnotationBase */ "./node_modules/crossecore/src/EAnnotationBase.ts");
/* harmony import */ var _EPackageBase__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./EPackageBase */ "./node_modules/crossecore/src/EPackageBase.ts");
/* harmony import */ var _EEnumLiteralBase__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./EEnumLiteralBase */ "./node_modules/crossecore/src/EEnumLiteralBase.ts");
/* harmony import */ var _EObjectImpl__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./EObjectImpl */ "./node_modules/crossecore/src/EObjectImpl.ts");
/* harmony import */ var _EParameterImpl__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./EParameterImpl */ "./node_modules/crossecore/src/EParameterImpl.ts");
/* harmony import */ var _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./EDataTypeImpl */ "./node_modules/crossecore/src/EDataTypeImpl.ts");
/* harmony import */ var _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./EClassifierImpl */ "./node_modules/crossecore/src/EClassifierImpl.ts");
/* harmony import */ var _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./EReferenceImpl */ "./node_modules/crossecore/src/EReferenceImpl.ts");
/* harmony import */ var _ETypeParameterImpl__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./ETypeParameterImpl */ "./node_modules/crossecore/src/ETypeParameterImpl.ts");
/* harmony import */ var _EAttributeImpl__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./EAttributeImpl */ "./node_modules/crossecore/src/EAttributeImpl.ts");
/* harmony import */ var _EParameterBase__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./EParameterBase */ "./node_modules/crossecore/src/EParameterBase.ts");
/* harmony import */ var _EGenericTypeBase__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./EGenericTypeBase */ "./node_modules/crossecore/src/EGenericTypeBase.ts");
/* harmony import */ var _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./ETypedElementImpl */ "./node_modules/crossecore/src/ETypedElementImpl.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./EStringToStringMapEntryBase */ "./node_modules/crossecore/src/EStringToStringMapEntryBase.ts");
/* harmony import */ var _EClassImpl__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./EClassImpl */ "./node_modules/crossecore/src/EClassImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









































var EcorePackageImpl = /** @class */ (function (_super) {
    __extends(EcorePackageImpl, _super);
    function EcorePackageImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isCreated = false;
        _this.createPackageContents = function () {
            if (_this.isCreated)
                return;
            _this.isCreated = true;
            _this.EAttributeEClass = _this.createEClass(EcorePackageImpl.EATTRIBUTE);
            _EAttributeBase__WEBPACK_IMPORTED_MODULE_1__["EAttributeBase"].eStaticClass = _this.EAttributeEClass;
            _this.createEAttribute(_this.EAttributeEClass, EcorePackageImpl.EATTRIBUTE_ID);
            _this.createEReference(_this.EAttributeEClass, EcorePackageImpl.EATTRIBUTE_EATTRIBUTETYPE);
            _this.EAnnotationEClass = _this.createEClass(EcorePackageImpl.EANNOTATION);
            _EAnnotationBase__WEBPACK_IMPORTED_MODULE_25__["EAnnotationBase"].eStaticClass = _this.EAnnotationEClass;
            _this.createEAttribute(_this.EAnnotationEClass, EcorePackageImpl.EANNOTATION_SOURCE);
            _this.createEReference(_this.EAnnotationEClass, EcorePackageImpl.EANNOTATION_DETAILS);
            _this.createEReference(_this.EAnnotationEClass, EcorePackageImpl.EANNOTATION_EMODELELEMENT);
            _this.createEReference(_this.EAnnotationEClass, EcorePackageImpl.EANNOTATION_CONTENTS);
            _this.createEReference(_this.EAnnotationEClass, EcorePackageImpl.EANNOTATION_REFERENCES);
            _this.EClassEClass = _this.createEClass(EcorePackageImpl.ECLASS);
            _EClassBase__WEBPACK_IMPORTED_MODULE_8__["EClassBase"].eStaticClass = _this.EClassEClass;
            _this.createEAttribute(_this.EClassEClass, EcorePackageImpl.ECLASS_ABSTRACT);
            _this.createEAttribute(_this.EClassEClass, EcorePackageImpl.ECLASS_INTERFACE);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_ESUPERTYPES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EOPERATIONS);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLATTRIBUTES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLREFERENCES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EREFERENCES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EATTRIBUTES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLCONTAINMENTS);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLOPERATIONS);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLSTRUCTURALFEATURES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLSUPERTYPES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EIDATTRIBUTE);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_ESTRUCTURALFEATURES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EGENERICSUPERTYPES);
            _this.createEReference(_this.EClassEClass, EcorePackageImpl.ECLASS_EALLGENERICSUPERTYPES);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___ISSUPERTYPEOF__SOMECLASS);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETFEATURECOUNT);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETESTRUCTURALFEATURE__FEATUREID);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETFEATUREID__FEATURE);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETESTRUCTURALFEATURE__FEATURENAME);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETOPERATIONCOUNT);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETEOPERATION__OPERATIONID);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETOPERATIONID__OPERATION);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETOVERRIDE__OPERATION);
            _this.createEOperation(_this.EClassEClass, EcorePackageImpl.ECLASS___GETFEATURETYPE__FEATURE);
            _this.EClassifierEClass = _this.createEClass(EcorePackageImpl.ECLASSIFIER);
            _EClassifierBase__WEBPACK_IMPORTED_MODULE_20__["EClassifierBase"].eStaticClass = _this.EClassifierEClass;
            _this.createEAttribute(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_INSTANCECLASSNAME);
            _this.createEAttribute(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_INSTANCECLASS);
            _this.createEAttribute(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_DEFAULTVALUE);
            _this.createEAttribute(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_INSTANCETYPENAME);
            _this.createEReference(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_EPACKAGE);
            _this.createEReference(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER_ETYPEPARAMETERS);
            _this.createEOperation(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER___ISINSTANCE__OBJECT);
            _this.createEOperation(_this.EClassifierEClass, EcorePackageImpl.ECLASSIFIER___GETCLASSIFIERID);
            _this.EDataTypeEClass = _this.createEClass(EcorePackageImpl.EDATATYPE);
            _EDataTypeBase__WEBPACK_IMPORTED_MODULE_21__["EDataTypeBase"].eStaticClass = _this.EDataTypeEClass;
            _this.createEAttribute(_this.EDataTypeEClass, EcorePackageImpl.EDATATYPE_SERIALIZABLE);
            _this.EEnumEClass = _this.createEClass(EcorePackageImpl.EENUM);
            _EEnumBase__WEBPACK_IMPORTED_MODULE_0__["EEnumBase"].eStaticClass = _this.EEnumEClass;
            _this.createEReference(_this.EEnumEClass, EcorePackageImpl.EENUM_ELITERALS);
            _this.createEOperation(_this.EEnumEClass, EcorePackageImpl.EENUM___GETEENUMLITERAL__NAME);
            _this.createEOperation(_this.EEnumEClass, EcorePackageImpl.EENUM___GETEENUMLITERAL__VALUE);
            _this.createEOperation(_this.EEnumEClass, EcorePackageImpl.EENUM___GETEENUMLITERALBYLITERAL__LITERAL);
            _this.EEnumLiteralEClass = _this.createEClass(EcorePackageImpl.EENUMLITERAL);
            _EEnumLiteralBase__WEBPACK_IMPORTED_MODULE_27__["EEnumLiteralBase"].eStaticClass = _this.EEnumLiteralEClass;
            _this.createEAttribute(_this.EEnumLiteralEClass, EcorePackageImpl.EENUMLITERAL_VALUE);
            _this.createEAttribute(_this.EEnumLiteralEClass, EcorePackageImpl.EENUMLITERAL_INSTANCE);
            _this.createEAttribute(_this.EEnumLiteralEClass, EcorePackageImpl.EENUMLITERAL_LITERAL);
            _this.createEReference(_this.EEnumLiteralEClass, EcorePackageImpl.EENUMLITERAL_EENUM);
            _this.EFactoryEClass = _this.createEClass(EcorePackageImpl.EFACTORY);
            _EFactoryBase__WEBPACK_IMPORTED_MODULE_2__["EFactoryBase"].eStaticClass = _this.EFactoryEClass;
            _this.createEReference(_this.EFactoryEClass, EcorePackageImpl.EFACTORY_EPACKAGE);
            _this.createEOperation(_this.EFactoryEClass, EcorePackageImpl.EFACTORY___CREATE__ECLASS);
            _this.createEOperation(_this.EFactoryEClass, EcorePackageImpl.EFACTORY___CREATEFROMSTRING__EDATATYPE__LITERALVALUE);
            _this.createEOperation(_this.EFactoryEClass, EcorePackageImpl.EFACTORY___CONVERTTOSTRING__EDATATYPE__INSTANCEVALUE);
            _this.EModelElementEClass = _this.createEClass(EcorePackageImpl.EMODELELEMENT);
            _EModelElementBase__WEBPACK_IMPORTED_MODULE_11__["EModelElementBase"].eStaticClass = _this.EModelElementEClass;
            _this.createEReference(_this.EModelElementEClass, EcorePackageImpl.EMODELELEMENT_EANNOTATIONS);
            _this.createEOperation(_this.EModelElementEClass, EcorePackageImpl.EMODELELEMENT___GETEANNOTATION__SOURCE);
            _this.ENamedElementEClass = _this.createEClass(EcorePackageImpl.ENAMEDELEMENT);
            _ENamedElementBase__WEBPACK_IMPORTED_MODULE_10__["ENamedElementBase"].eStaticClass = _this.ENamedElementEClass;
            _this.createEAttribute(_this.ENamedElementEClass, EcorePackageImpl.ENAMEDELEMENT_NAME);
            _this.EObjectEClass = _this.createEClass(EcorePackageImpl.EOBJECT);
            _EObjectBase__WEBPACK_IMPORTED_MODULE_24__["EObjectBase"].eStaticClass = _this.EObjectEClass;
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECLASS);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EISPROXY);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ERESOURCE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECONTAINER);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECONTAININGFEATURE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECONTAINMENTFEATURE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECONTENTS);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EALLCONTENTS);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ECROSSREFERENCES);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EGET__FEATURE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EGET__FEATURE__RESOLVE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___ESET__FEATURE__NEWVALUE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EISSET__FEATURE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EUNSET__FEATURE);
            _this.createEOperation(_this.EObjectEClass, EcorePackageImpl.EOBJECT___EINVOKE__OPERATION__ARGUMENTS);
            _this.EOperationEClass = _this.createEClass(EcorePackageImpl.EOPERATION);
            _EOperationBase__WEBPACK_IMPORTED_MODULE_22__["EOperationBase"].eStaticClass = _this.EOperationEClass;
            _this.createEReference(_this.EOperationEClass, EcorePackageImpl.EOPERATION_ECONTAININGCLASS);
            _this.createEReference(_this.EOperationEClass, EcorePackageImpl.EOPERATION_ETYPEPARAMETERS);
            _this.createEReference(_this.EOperationEClass, EcorePackageImpl.EOPERATION_EPARAMETERS);
            _this.createEReference(_this.EOperationEClass, EcorePackageImpl.EOPERATION_EEXCEPTIONS);
            _this.createEReference(_this.EOperationEClass, EcorePackageImpl.EOPERATION_EGENERICEXCEPTIONS);
            _this.createEOperation(_this.EOperationEClass, EcorePackageImpl.EOPERATION___GETOPERATIONID);
            _this.createEOperation(_this.EOperationEClass, EcorePackageImpl.EOPERATION___ISOVERRIDEOF__SOMEOPERATION);
            _this.EPackageEClass = _this.createEClass(EcorePackageImpl.EPACKAGE);
            _EPackageBase__WEBPACK_IMPORTED_MODULE_26__["EPackageBase"].eStaticClass = _this.EPackageEClass;
            _this.createEAttribute(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_NSURI);
            _this.createEAttribute(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_NSPREFIX);
            _this.createEReference(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_EFACTORYINSTANCE);
            _this.createEReference(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_ECLASSIFIERS);
            _this.createEReference(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_ESUBPACKAGES);
            _this.createEReference(_this.EPackageEClass, EcorePackageImpl.EPACKAGE_ESUPERPACKAGE);
            _this.createEOperation(_this.EPackageEClass, EcorePackageImpl.EPACKAGE___GETECLASSIFIER__NAME);
            _this.EParameterEClass = _this.createEClass(EcorePackageImpl.EPARAMETER);
            _EParameterBase__WEBPACK_IMPORTED_MODULE_35__["EParameterBase"].eStaticClass = _this.EParameterEClass;
            _this.createEReference(_this.EParameterEClass, EcorePackageImpl.EPARAMETER_EOPERATION);
            _this.EReferenceEClass = _this.createEClass(EcorePackageImpl.EREFERENCE);
            _EReferenceBase__WEBPACK_IMPORTED_MODULE_17__["EReferenceBase"].eStaticClass = _this.EReferenceEClass;
            _this.createEAttribute(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_CONTAINMENT);
            _this.createEAttribute(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_CONTAINER);
            _this.createEAttribute(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_RESOLVEPROXIES);
            _this.createEReference(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_EOPPOSITE);
            _this.createEReference(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_EREFERENCETYPE);
            _this.createEReference(_this.EReferenceEClass, EcorePackageImpl.EREFERENCE_EKEYS);
            _this.EStructuralFeatureEClass = _this.createEClass(EcorePackageImpl.ESTRUCTURALFEATURE);
            _EStructuralFeatureBase__WEBPACK_IMPORTED_MODULE_7__["EStructuralFeatureBase"].eStaticClass = _this.EStructuralFeatureEClass;
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_CHANGEABLE);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_VOLATILE);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_TRANSIENT);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_DEFAULTVALUELITERAL);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_DEFAULTVALUE);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_UNSETTABLE);
            _this.createEAttribute(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_DERIVED);
            _this.createEReference(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE_ECONTAININGCLASS);
            _this.createEOperation(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE___GETFEATUREID);
            _this.createEOperation(_this.EStructuralFeatureEClass, EcorePackageImpl.ESTRUCTURALFEATURE___GETCONTAINERCLASS);
            _this.ETypedElementEClass = _this.createEClass(EcorePackageImpl.ETYPEDELEMENT);
            _ETypedElementBase__WEBPACK_IMPORTED_MODULE_6__["ETypedElementBase"].eStaticClass = _this.ETypedElementEClass;
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_ORDERED);
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_UNIQUE);
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_LOWERBOUND);
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_UPPERBOUND);
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_MANY);
            _this.createEAttribute(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_REQUIRED);
            _this.createEReference(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_ETYPE);
            _this.createEReference(_this.ETypedElementEClass, EcorePackageImpl.ETYPEDELEMENT_EGENERICTYPE);
            _this.EStringToStringMapEntryEClass = _this.createEClass(EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY);
            _EStringToStringMapEntryBase__WEBPACK_IMPORTED_MODULE_39__["EStringToStringMapEntryBase"].eStaticClass = _this.EStringToStringMapEntryEClass;
            _this.createEAttribute(_this.EStringToStringMapEntryEClass, EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_KEY);
            _this.createEAttribute(_this.EStringToStringMapEntryEClass, EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_VALUE);
            _this.EGenericTypeEClass = _this.createEClass(EcorePackageImpl.EGENERICTYPE);
            _EGenericTypeBase__WEBPACK_IMPORTED_MODULE_36__["EGenericTypeBase"].eStaticClass = _this.EGenericTypeEClass;
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_EUPPERBOUND);
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_ETYPEARGUMENTS);
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_ERAWTYPE);
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_ELOWERBOUND);
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_ETYPEPARAMETER);
            _this.createEReference(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE_ECLASSIFIER);
            _this.createEOperation(_this.EGenericTypeEClass, EcorePackageImpl.EGENERICTYPE___ISINSTANCE__OBJECT);
            _this.ETypeParameterEClass = _this.createEClass(EcorePackageImpl.ETYPEPARAMETER);
            _ETypeParameterBase__WEBPACK_IMPORTED_MODULE_14__["ETypeParameterBase"].eStaticClass = _this.ETypeParameterEClass;
            _this.createEReference(_this.ETypeParameterEClass, EcorePackageImpl.ETYPEPARAMETER_EBOUNDS);
            _this.EBigDecimalEDataType = _this.createEDataType(EcorePackageImpl.EBIGDECIMAL);
            _this.EBigIntegerEDataType = _this.createEDataType(EcorePackageImpl.EBIGINTEGER);
            _this.EBooleanEDataType = _this.createEDataType(EcorePackageImpl.EBOOLEAN);
            _this.EBooleanObjectEDataType = _this.createEDataType(EcorePackageImpl.EBOOLEANOBJECT);
            _this.EByteEDataType = _this.createEDataType(EcorePackageImpl.EBYTE);
            _this.EByteArrayEDataType = _this.createEDataType(EcorePackageImpl.EBYTEARRAY);
            _this.EByteObjectEDataType = _this.createEDataType(EcorePackageImpl.EBYTEOBJECT);
            _this.ECharEDataType = _this.createEDataType(EcorePackageImpl.ECHAR);
            _this.ECharacterObjectEDataType = _this.createEDataType(EcorePackageImpl.ECHARACTEROBJECT);
            _this.EDateEDataType = _this.createEDataType(EcorePackageImpl.EDATE);
            _this.EDiagnosticChainEDataType = _this.createEDataType(EcorePackageImpl.EDIAGNOSTICCHAIN);
            _this.EDoubleEDataType = _this.createEDataType(EcorePackageImpl.EDOUBLE);
            _this.EDoubleObjectEDataType = _this.createEDataType(EcorePackageImpl.EDOUBLEOBJECT);
            _this.EEListEDataType = _this.createEDataType(EcorePackageImpl.EELIST);
            _this.EEnumeratorEDataType = _this.createEDataType(EcorePackageImpl.EENUMERATOR);
            _this.EFeatureMapEDataType = _this.createEDataType(EcorePackageImpl.EFEATUREMAP);
            _this.EFeatureMapEntryEDataType = _this.createEDataType(EcorePackageImpl.EFEATUREMAPENTRY);
            _this.EFloatEDataType = _this.createEDataType(EcorePackageImpl.EFLOAT);
            _this.EFloatObjectEDataType = _this.createEDataType(EcorePackageImpl.EFLOATOBJECT);
            _this.EIntEDataType = _this.createEDataType(EcorePackageImpl.EINT);
            _this.EIntegerObjectEDataType = _this.createEDataType(EcorePackageImpl.EINTEGEROBJECT);
            _this.EJavaClassEDataType = _this.createEDataType(EcorePackageImpl.EJAVACLASS);
            _this.EJavaObjectEDataType = _this.createEDataType(EcorePackageImpl.EJAVAOBJECT);
            _this.ELongEDataType = _this.createEDataType(EcorePackageImpl.ELONG);
            _this.ELongObjectEDataType = _this.createEDataType(EcorePackageImpl.ELONGOBJECT);
            _this.EMapEDataType = _this.createEDataType(EcorePackageImpl.EMAP);
            _this.EResourceEDataType = _this.createEDataType(EcorePackageImpl.ERESOURCE);
            _this.EResourceSetEDataType = _this.createEDataType(EcorePackageImpl.ERESOURCESET);
            _this.EShortEDataType = _this.createEDataType(EcorePackageImpl.ESHORT);
            _this.EShortObjectEDataType = _this.createEDataType(EcorePackageImpl.ESHORTOBJECT);
            _this.EStringEDataType = _this.createEDataType(EcorePackageImpl.ESTRING);
            _this.ETreeIteratorEDataType = _this.createEDataType(EcorePackageImpl.ETREEITERATOR);
            _this.EInvocationTargetExceptionEDataType = _this.createEDataType(EcorePackageImpl.EINVOCATIONTARGETEXCEPTION);
        };
        _this.isInitialized = false;
        _this.initializePackageContents = function () {
            if (_this.isInitialized)
                return;
            _this.isInitialized = true;
            // Initialize package
            _this.name = EcorePackageImpl.eNAME;
            _this.nsPrefix = EcorePackageImpl.eNS_PREFIX;
            _this.nsURI = EcorePackageImpl.eNS_URI;
            _this.EAttributeEClass.eSuperTypes.add(_this.getEStructuralFeature());
            _this.EAnnotationEClass.eSuperTypes.add(_this.getEModelElement());
            _this.EClassEClass.eSuperTypes.add(_this.getEClassifier_());
            _this.EClassifierEClass.eSuperTypes.add(_this.getENamedElement());
            _this.EDataTypeEClass.eSuperTypes.add(_this.getEClassifier_());
            _this.EEnumEClass.eSuperTypes.add(_this.getEDataType());
            _this.EEnumLiteralEClass.eSuperTypes.add(_this.getENamedElement());
            _this.EFactoryEClass.eSuperTypes.add(_this.getEModelElement());
            _this.ENamedElementEClass.eSuperTypes.add(_this.getEModelElement());
            _this.EOperationEClass.eSuperTypes.add(_this.getETypedElement());
            _this.EPackageEClass.eSuperTypes.add(_this.getENamedElement());
            _this.EParameterEClass.eSuperTypes.add(_this.getETypedElement());
            _this.EReferenceEClass.eSuperTypes.add(_this.getEStructuralFeature());
            _this.EStructuralFeatureEClass.eSuperTypes.add(_this.getETypedElement());
            _this.ETypedElementEClass.eSuperTypes.add(_this.getENamedElement());
            _this.ETypeParameterEClass.eSuperTypes.add(_this.getENamedElement());
            var op = null;
            _this.initEClass(_this.EAttributeEClass, _EAttributeImpl__WEBPACK_IMPORTED_MODULE_34__["EAttributeImpl"], "EAttribute", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEAttribute_ID(), _this.ecorePackage.getEBoolean(), "iD", "false", 0, 1, _EAttributeImpl__WEBPACK_IMPORTED_MODULE_34__["EAttributeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEAttribute_EAttributeType(), _this.ecorePackage.getEDataType(), null, "eAttributeType", null, 1, 1, _EAttributeImpl__WEBPACK_IMPORTED_MODULE_34__["EAttributeImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EAnnotationEClass, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], "EAnnotation", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEAnnotation_Source(), _this.ecorePackage.getEString(), "source", null, 0, 1, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEAnnotation_Details(), _this.ecorePackage.getEStringToStringMapEntry(), null, "details", null, 0, -1, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEAnnotation_EModelElement(), _this.ecorePackage.getEModelElement(), _this.getEModelElement_EAnnotations(), "eModelElement", null, 0, 1, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEAnnotation_Contents(), _this.ecorePackage.getEObject(), null, "contents", null, 0, -1, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEAnnotation_References(), _this.ecorePackage.getEObject(), null, "references", null, 0, -1, _EAnnotationImpl__WEBPACK_IMPORTED_MODULE_9__["EAnnotationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EClassEClass, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], "EClass", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEClass_Abstract(), _this.ecorePackage.getEBoolean(), "abstract", "false", 0, 1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEClass_Interface(), _this.ecorePackage.getEBoolean(), "interface", "false", 0, 1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_ESuperTypes(), _this.ecorePackage.getEClass(), null, "eSuperTypes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EOperations(), _this.ecorePackage.getEOperation(), _this.getEOperation_EContainingClass(), "eOperations", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllAttributes(), _this.ecorePackage.getEAttribute(), null, "eAllAttributes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllReferences(), _this.ecorePackage.getEReference(), null, "eAllReferences", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EReferences(), _this.ecorePackage.getEReference(), null, "eReferences", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAttributes(), _this.ecorePackage.getEAttribute(), null, "eAttributes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllContainments(), _this.ecorePackage.getEReference(), null, "eAllContainments", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllOperations(), _this.ecorePackage.getEOperation(), null, "eAllOperations", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllStructuralFeatures(), _this.ecorePackage.getEStructuralFeature(), null, "eAllStructuralFeatures", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllSuperTypes(), _this.ecorePackage.getEClass(), null, "eAllSuperTypes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EIDAttribute(), _this.ecorePackage.getEAttribute(), null, "eIDAttribute", null, 0, 1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EStructuralFeatures(), _this.ecorePackage.getEStructuralFeature(), _this.getEStructuralFeature_EContainingClass(), "eStructuralFeatures", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EGenericSuperTypes(), _this.ecorePackage.getEGenericType(), null, "eGenericSuperTypes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClass_EAllGenericSuperTypes(), _this.ecorePackage.getEGenericType(), null, "eAllGenericSuperTypes", null, 0, -1, _EClassImpl__WEBPACK_IMPORTED_MODULE_40__["EClassImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__IsSuperTypeOf__SomeClass(), _this.ecorePackage.getEBoolean(), "isSuperTypeOf", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "someClass", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetFeatureCount__(), _this.ecorePackage.getEInt(), "getFeatureCount", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetEStructuralFeature__FeatureID(), _this.ecorePackage.getEStructuralFeature(), "getEStructuralFeature", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "featureID", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetFeatureID__Feature(), _this.ecorePackage.getEInt(), "getFeatureID", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetEStructuralFeature__FeatureName(), _this.ecorePackage.getEStructuralFeature(), "getEStructuralFeature", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "featureName", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetOperationCount__(), _this.ecorePackage.getEInt(), "getOperationCount", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetEOperation__OperationID(), _this.ecorePackage.getEOperation(), "getEOperation", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "operationID", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetOperationID__Operation(), _this.ecorePackage.getEInt(), "getOperationID", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "operation", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetOverride__Operation(), _this.ecorePackage.getEOperation(), "getOverride", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "operation", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClass__GetFeatureType__Feature(), _this.ecorePackage.getEGenericType(), "getFeatureType", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClass(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EClassifierEClass, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], "EClassifier", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEClassifier_InstanceClassName(), _this.ecorePackage.getEString(), "instanceClassName", null, 0, 1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEClassifier_InstanceClass(), _this.ecorePackage.getEJavaClass(), "instanceClass", null, 0, 1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEClassifier_DefaultValue(), _this.ecorePackage.getEJavaObject(), "defaultValue", null, 0, 1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEClassifier_InstanceTypeName(), _this.ecorePackage.getEString(), "instanceTypeName", null, 0, 1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClassifier_EPackage(), _this.ecorePackage.getEPackage(), _this.getEPackage_EClassifiers(), "ePackage", null, 0, 1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEClassifier_ETypeParameters(), _this.ecorePackage.getETypeParameter(), null, "eTypeParameters", null, 0, -1, _EClassifierImpl__WEBPACK_IMPORTED_MODULE_31__["EClassifierImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClassifier__IsInstance__Object(), _this.ecorePackage.getEBoolean(), "isInstance", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEClassifier_(), "object", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEClassifier__GetClassifierID__(), _this.ecorePackage.getEInt(), "getClassifierID", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EDataTypeEClass, _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_30__["EDataTypeImpl"], "EDataType", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEDataType_Serializable(), _this.ecorePackage.getEBoolean(), "serializable", "true", 0, 1, _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_30__["EDataTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EEnumEClass, _EEnumImpl__WEBPACK_IMPORTED_MODULE_5__["EEnumImpl"], "EEnum", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEEnum_ELiterals(), _this.ecorePackage.getEEnumLiteral(), _this.getEEnumLiteral_EEnum(), "eLiterals", null, 0, -1, _EEnumImpl__WEBPACK_IMPORTED_MODULE_5__["EEnumImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEEnum__GetEEnumLiteral__Name(), _this.ecorePackage.getEEnumLiteral(), "getEEnumLiteral", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEEnum(), "name", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEEnum__GetEEnumLiteral__Value(), _this.ecorePackage.getEEnumLiteral(), "getEEnumLiteral", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEEnum(), "value", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEEnum__GetEEnumLiteralByLiteral__Literal(), _this.ecorePackage.getEEnumLiteral(), "getEEnumLiteralByLiteral", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEEnum(), "literal", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EEnumLiteralEClass, _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__["EEnumLiteralImpl"], "EEnumLiteral", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEEnumLiteral_Value(), _this.ecorePackage.getEInt(), "value", "0", 0, 1, _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__["EEnumLiteralImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEEnumLiteral_Instance(), _this.ecorePackage.getEEnumerator(), "instance", null, 0, 1, _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__["EEnumLiteralImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEEnumLiteral_Literal(), _this.ecorePackage.getEString(), "literal", null, 0, 1, _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__["EEnumLiteralImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEEnumLiteral_EEnum(), _this.ecorePackage.getEEnum(), _this.getEEnum_ELiterals(), "eEnum", null, 0, 1, _EEnumLiteralImpl__WEBPACK_IMPORTED_MODULE_23__["EEnumLiteralImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EFactoryEClass, _EFactoryImpl__WEBPACK_IMPORTED_MODULE_12__["EFactoryImpl"], "EFactory", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEFactory_EPackage(), _this.ecorePackage.getEPackage(), _this.getEPackage_EFactoryInstance(), "ePackage", null, 1, 1, _EFactoryImpl__WEBPACK_IMPORTED_MODULE_12__["EFactoryImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEFactory__Create__EClass(), _this.ecorePackage.getEObject(), "create", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEFactory(), "eClass", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEFactory__CreateFromString__EDataType__LiteralValue(), _this.ecorePackage.getEJavaObject(), "createFromString", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEFactory(), "eDataType", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEFactory(), "literalValue", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEFactory__ConvertToString__EDataType__InstanceValue(), _this.ecorePackage.getEString(), "convertToString", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEFactory(), "eDataType", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEFactory(), "instanceValue", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EModelElementEClass, _EModelElementImpl__WEBPACK_IMPORTED_MODULE_18__["EModelElementImpl"], "EModelElement", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEModelElement_EAnnotations(), _this.ecorePackage.getEAnnotation_(), _this.getEAnnotation_EModelElement(), "eAnnotations", null, 0, -1, _EModelElementImpl__WEBPACK_IMPORTED_MODULE_18__["EModelElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEModelElement__GetEAnnotation__Source(), _this.ecorePackage.getEAnnotation_(), "getEAnnotation", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEModelElement(), "source", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.ENamedElementEClass, _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_38__["ENamedElementImpl"], "ENamedElement", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getENamedElement_Name(), _this.ecorePackage.getEString(), "name", null, 0, 1, _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_38__["ENamedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EObjectEClass, _EObjectImpl__WEBPACK_IMPORTED_MODULE_28__["EObjectImpl"], "EObject", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EClass__(), _this.ecorePackage.getEClass(), "eClass", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EIsProxy__(), _this.ecorePackage.getEBoolean(), "eIsProxy", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EResource__(), _this.ecorePackage.getEResource(), "eResource", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EContainer__(), _this.ecorePackage.getEObject(), "eContainer", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EContainingFeature__(), _this.ecorePackage.getEStructuralFeature(), "eContainingFeature", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EContainmentFeature__(), _this.ecorePackage.getEReference(), "eContainmentFeature", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EContents__(), _this.ecorePackage.getEEList(), "eContents", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EAllContents__(), _this.ecorePackage.getETreeIterator(), "eAllContents", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__ECrossReferences__(), _this.ecorePackage.getEEList(), "eCrossReferences", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EGet__Feature(), _this.ecorePackage.getEJavaObject(), "eGet", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EGet__Feature__Resolve(), _this.ecorePackage.getEJavaObject(), "eGet", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "resolve", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__ESet__Feature__NewValue(), null, "eSet", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "newValue", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EIsSet__Feature(), _this.ecorePackage.getEBoolean(), "eIsSet", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EUnset__Feature(), null, "eUnset", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "feature", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEObject__EInvoke__Operation__Arguments(), _this.ecorePackage.getEJavaObject(), "eInvoke", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "operation", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEObject(), "arguments", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EOperationEClass, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], "EOperation", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEOperation_EContainingClass(), _this.ecorePackage.getEClass(), _this.getEClass_EOperations(), "eContainingClass", null, 0, 1, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEOperation_ETypeParameters(), _this.ecorePackage.getETypeParameter(), null, "eTypeParameters", null, 0, -1, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEOperation_EParameters(), _this.ecorePackage.getEParameter(), _this.getEParameter_EOperation(), "eParameters", null, 0, -1, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEOperation_EExceptions(), _this.ecorePackage.getEClassifier_(), null, "eExceptions", null, 0, -1, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEOperation_EGenericExceptions(), _this.ecorePackage.getEGenericType(), null, "eGenericExceptions", null, 0, -1, _EOperationImpl__WEBPACK_IMPORTED_MODULE_13__["EOperationImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEOperation__GetOperationID__(), _this.ecorePackage.getEInt(), "getOperationID", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEOperation__IsOverrideOf__SomeOperation(), _this.ecorePackage.getEBoolean(), "isOverrideOf", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEOperation(), "someOperation", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EPackageEClass, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], "EPackage", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEPackage_NsURI(), _this.ecorePackage.getEString(), "nsURI", null, 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEPackage_NsPrefix(), _this.ecorePackage.getEString(), "nsPrefix", null, 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEPackage_EFactoryInstance(), _this.ecorePackage.getEFactory(), _this.getEFactory_EPackage(), "eFactoryInstance", null, 1, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEPackage_EClassifiers(), _this.ecorePackage.getEClassifier_(), _this.getEClassifier_EPackage(), "eClassifiers", null, 0, -1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEPackage_ESubpackages(), _this.ecorePackage.getEPackage(), _this.getEPackage_ESuperPackage(), "eSubpackages", null, 0, -1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEPackage_ESuperPackage(), _this.ecorePackage.getEPackage(), _this.getEPackage_ESubpackages(), "eSuperPackage", null, 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEPackage__GetEClassifier__Name(), _this.ecorePackage.getEClassifier_(), "getEClassifier", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEPackage(), "name", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.EParameterEClass, _EParameterImpl__WEBPACK_IMPORTED_MODULE_29__["EParameterImpl"], "EParameter", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEParameter_EOperation(), _this.ecorePackage.getEOperation(), _this.getEOperation_EParameters(), "eOperation", null, 0, 1, _EParameterImpl__WEBPACK_IMPORTED_MODULE_29__["EParameterImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EReferenceEClass, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], "EReference", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEReference_Containment(), _this.ecorePackage.getEBoolean(), "containment", "false", 0, 1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEReference_Container(), _this.ecorePackage.getEBoolean(), "container", "false", 0, 1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEReference_ResolveProxies(), _this.ecorePackage.getEBoolean(), "resolveProxies", "true", 0, 1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEReference_EOpposite(), _this.ecorePackage.getEReference(), null, "eOpposite", null, 0, 1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEReference_EReferenceType(), _this.ecorePackage.getEClass(), null, "eReferenceType", null, 1, 1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEReference_EKeys(), _this.ecorePackage.getEAttribute(), null, "eKeys", null, 0, -1, _EReferenceImpl__WEBPACK_IMPORTED_MODULE_32__["EReferenceImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EStructuralFeatureEClass, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], "EStructuralFeature", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_Changeable(), _this.ecorePackage.getEBoolean(), "changeable", "true", 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_Volatile(), _this.ecorePackage.getEBoolean(), "volatile", "false", 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_Transient(), _this.ecorePackage.getEBoolean(), "transient", "false", 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_DefaultValueLiteral(), _this.ecorePackage.getEString(), "defaultValueLiteral", null, 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_DefaultValue(), _this.ecorePackage.getEJavaObject(), "defaultValue", null, 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_Unsettable(), _this.ecorePackage.getEBoolean(), "unsettable", "false", 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStructuralFeature_Derived(), _this.ecorePackage.getEBoolean(), "derived", "false", 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEStructuralFeature_EContainingClass(), _this.ecorePackage.getEClass(), _this.getEClass_EStructuralFeatures(), "eContainingClass", null, 0, 1, _EStructuralFeatureImpl__WEBPACK_IMPORTED_MODULE_16__["EStructuralFeatureImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEStructuralFeature__GetFeatureID__(), _this.ecorePackage.getEInt(), "getFeatureID", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEStructuralFeature__GetContainerClass__(), _this.ecorePackage.getEJavaClass(), "getContainerClass", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.ETypedElementEClass, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], "ETypedElement", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getETypedElement_Ordered(), _this.ecorePackage.getEBoolean(), "ordered", "true", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getETypedElement_Unique(), _this.ecorePackage.getEBoolean(), "unique", "true", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getETypedElement_LowerBound(), _this.ecorePackage.getEInt(), "lowerBound", "0", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getETypedElement_UpperBound(), _this.ecorePackage.getEInt(), "upperBound", "1", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getETypedElement_Many(), _this.ecorePackage.getEBoolean(), "many", "false", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getETypedElement_Required(), _this.ecorePackage.getEBoolean(), "required", "false", 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getETypedElement_EType(), _this.ecorePackage.getEClassifier_(), null, "eType", null, 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getETypedElement_EGenericType(), _this.ecorePackage.getEGenericType(), null, "eGenericType", null, 0, 1, _ETypedElementImpl__WEBPACK_IMPORTED_MODULE_37__["ETypedElementImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EStringToStringMapEntryEClass, _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_3__["EStringToStringMapEntryImpl"], "EStringToStringMapEntry", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getEStringToStringMapEntry_Key(), _this.ecorePackage.getEString(), "key", null, 0, 1, _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_3__["EStringToStringMapEntryImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getEStringToStringMapEntry_Value(), _this.ecorePackage.getEString(), "value", null, 0, 1, _EStringToStringMapEntryImpl__WEBPACK_IMPORTED_MODULE_3__["EStringToStringMapEntryImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ID, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.EGenericTypeEClass, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], "EGenericType", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getEGenericType_EUpperBound(), _this.ecorePackage.getEGenericType(), null, "eUpperBound", null, 0, 1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEGenericType_ETypeArguments(), _this.ecorePackage.getEGenericType(), null, "eTypeArguments", null, 0, -1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEGenericType_ERawType(), _this.ecorePackage.getEClassifier_(), null, "eRawType", null, 1, 1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEGenericType_ELowerBound(), _this.ecorePackage.getEGenericType(), null, "eLowerBound", null, 0, 1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEGenericType_ETypeParameter(), _this.ecorePackage.getETypeParameter(), null, "eTypeParameter", null, 0, 1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getEGenericType_EClassifier(), _this.ecorePackage.getEClassifier_(), null, "eClassifier", null, 0, 1, _EGenericTypeImpl__WEBPACK_IMPORTED_MODULE_19__["EGenericTypeImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add initEOperation to EPackageImpl
            op = _this.initEOperation_3(_this.getEGenericType__IsInstance__Object(), _this.ecorePackage.getEBoolean(), "isInstance", 0, 1, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            //TODO add addEParameter to EPackageImpl
            //this.addEParameter_3(op, this.getEGenericType(), "object", 0, 1, EPackageImpl.IS_UNIQUE, EPackageImpl.IS_ORDERED);
            _this.initEClass(_this.ETypeParameterEClass, _ETypeParameterImpl__WEBPACK_IMPORTED_MODULE_33__["ETypeParameterImpl"], "ETypeParameter", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ABSTRACT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_INTERFACE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEReference(_this.getETypeParameter_EBounds(), _this.ecorePackage.getEGenericType(), null, "eBounds", null, 0, -1, _ETypeParameterImpl__WEBPACK_IMPORTED_MODULE_33__["ETypeParameterImpl"], !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_TRANSIENT, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_VOLATILE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_CHANGEABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_COMPOSITE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_RESOLVE_PROXIES, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNSETTABLE, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_UNIQUE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_DERIVED, _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_ORDERED);
            _this.initEDataType(_this.EBigDecimalEDataType, null, "EBigDecimal", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EBigIntegerEDataType, null, "EBigInteger", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EBooleanEDataType, null, "EBoolean", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EBooleanObjectEDataType, null, "EBooleanObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EByteEDataType, null, "EByte", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EByteArrayEDataType, null, "EByteArray", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EByteObjectEDataType, null, "EByteObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.ECharEDataType, null, "EChar", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.ECharacterObjectEDataType, null, "ECharacterObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EDateEDataType, null, "EDate", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EDiagnosticChainEDataType, null, "EDiagnosticChain", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EDoubleEDataType, null, "EDouble", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EDoubleObjectEDataType, null, "EDoubleObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EEListEDataType, null, "EEList", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EEnumeratorEDataType, null, "EEnumerator", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EFeatureMapEDataType, null, "EFeatureMap", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EFeatureMapEntryEDataType, null, "EFeatureMapEntry", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EFloatEDataType, null, "EFloat", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EFloatObjectEDataType, null, "EFloatObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EIntEDataType, null, "EInt", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EIntegerObjectEDataType, null, "EIntegerObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EJavaClassEDataType, null, "EJavaClass", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EJavaObjectEDataType, null, "EJavaObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.ELongEDataType, null, "ELong", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.ELongObjectEDataType, null, "ELongObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EMapEDataType, null, "EMap", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EResourceEDataType, null, "EResource", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EResourceSetEDataType, null, "EResourceSet", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EShortEDataType, null, "EShort", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EShortObjectEDataType, null, "EShortObject", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EStringEDataType, null, "EString", _EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.ETreeIteratorEDataType, null, "ETreeIterator", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEDataType(_this.EInvocationTargetExceptionEDataType, null, "EInvocationTargetException", !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_SERIALIZABLE, !_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
        };
        _this.EAttributeEClass = null;
        _this.EAnnotationEClass = null;
        _this.EClassEClass = null;
        _this.EClassifierEClass = null;
        _this.EDataTypeEClass = null;
        _this.EEnumEClass = null;
        _this.EEnumLiteralEClass = null;
        _this.EFactoryEClass = null;
        _this.EModelElementEClass = null;
        _this.ENamedElementEClass = null;
        _this.EObjectEClass = null;
        _this.EOperationEClass = null;
        _this.EPackageEClass = null;
        _this.EParameterEClass = null;
        _this.EReferenceEClass = null;
        _this.EStructuralFeatureEClass = null;
        _this.ETypedElementEClass = null;
        _this.EStringToStringMapEntryEClass = null;
        _this.EGenericTypeEClass = null;
        _this.ETypeParameterEClass = null;
        _this.EBigDecimalEDataType = null;
        _this.EBigIntegerEDataType = null;
        _this.EBooleanEDataType = null;
        _this.EBooleanObjectEDataType = null;
        _this.EByteEDataType = null;
        _this.EByteArrayEDataType = null;
        _this.EByteObjectEDataType = null;
        _this.ECharEDataType = null;
        _this.ECharacterObjectEDataType = null;
        _this.EDateEDataType = null;
        _this.EDiagnosticChainEDataType = null;
        _this.EDoubleEDataType = null;
        _this.EDoubleObjectEDataType = null;
        _this.EEListEDataType = null;
        _this.EEnumeratorEDataType = null;
        _this.EFeatureMapEDataType = null;
        _this.EFeatureMapEntryEDataType = null;
        _this.EFloatEDataType = null;
        _this.EFloatObjectEDataType = null;
        _this.EIntEDataType = null;
        _this.EIntegerObjectEDataType = null;
        _this.EJavaClassEDataType = null;
        _this.EJavaObjectEDataType = null;
        _this.ELongEDataType = null;
        _this.ELongObjectEDataType = null;
        _this.EMapEDataType = null;
        _this.EResourceEDataType = null;
        _this.EResourceSetEDataType = null;
        _this.EShortEDataType = null;
        _this.EShortObjectEDataType = null;
        _this.EStringEDataType = null;
        _this.ETreeIteratorEDataType = null;
        _this.EInvocationTargetExceptionEDataType = null;
        _this.getEModelElement = function () { return _this.EModelElementEClass; };
        _this.getEModelElement_EAnnotations = function () { return _this.EModelElementEClass.eStructuralFeatures.at(0); };
        _this.getEModelElement__GetEAnnotation__Source = function () { return _this.EModelElementEClass.eOperations.at(0); };
        _this.getENamedElement = function () { return _this.ENamedElementEClass; };
        _this.getENamedElement_Name = function () { return _this.ENamedElementEClass.eStructuralFeatures.at(0); };
        _this.getETypedElement = function () { return _this.ETypedElementEClass; };
        _this.getETypedElement_Ordered = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(0); };
        _this.getETypedElement_Unique = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(1); };
        _this.getETypedElement_LowerBound = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(2); };
        _this.getETypedElement_UpperBound = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(3); };
        _this.getETypedElement_Many = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(4); };
        _this.getETypedElement_Required = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(5); };
        _this.getETypedElement_EType = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(6); };
        _this.getETypedElement_EGenericType = function () { return _this.ETypedElementEClass.eStructuralFeatures.at(7); };
        _this.getEStructuralFeature = function () { return _this.EStructuralFeatureEClass; };
        _this.getEStructuralFeature_Changeable = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(0); };
        _this.getEStructuralFeature_Volatile = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(1); };
        _this.getEStructuralFeature_Transient = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(2); };
        _this.getEStructuralFeature_DefaultValueLiteral = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(3); };
        _this.getEStructuralFeature_DefaultValue = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(4); };
        _this.getEStructuralFeature_Unsettable = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(5); };
        _this.getEStructuralFeature_Derived = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(6); };
        _this.getEStructuralFeature_EContainingClass = function () { return _this.EStructuralFeatureEClass.eStructuralFeatures.at(7); };
        _this.getEStructuralFeature__GetFeatureID__ = function () { return _this.EStructuralFeatureEClass.eOperations.at(0); };
        _this.getEStructuralFeature__GetContainerClass__ = function () { return _this.EStructuralFeatureEClass.eOperations.at(1); };
        _this.getEAttribute = function () { return _this.EAttributeEClass; };
        _this.getEAttribute_ID = function () { return _this.EAttributeEClass.eStructuralFeatures.at(0); };
        _this.getEAttribute_EAttributeType = function () { return _this.EAttributeEClass.eStructuralFeatures.at(1); };
        _this.getEAnnotation_ = function () { return _this.EAnnotationEClass; };
        _this.getEAnnotation_Source = function () { return _this.EAnnotationEClass.eStructuralFeatures.at(0); };
        _this.getEAnnotation_Details = function () { return _this.EAnnotationEClass.eStructuralFeatures.at(1); };
        _this.getEAnnotation_EModelElement = function () { return _this.EAnnotationEClass.eStructuralFeatures.at(2); };
        _this.getEAnnotation_Contents = function () { return _this.EAnnotationEClass.eStructuralFeatures.at(3); };
        _this.getEAnnotation_References = function () { return _this.EAnnotationEClass.eStructuralFeatures.at(4); };
        _this.getEClassifier_ = function () { return _this.EClassifierEClass; };
        _this.getEClassifier_InstanceClassName = function () { return _this.EClassifierEClass.eStructuralFeatures.at(0); };
        _this.getEClassifier_InstanceClass = function () { return _this.EClassifierEClass.eStructuralFeatures.at(1); };
        _this.getEClassifier_DefaultValue = function () { return _this.EClassifierEClass.eStructuralFeatures.at(2); };
        _this.getEClassifier_InstanceTypeName = function () { return _this.EClassifierEClass.eStructuralFeatures.at(3); };
        _this.getEClassifier_EPackage = function () { return _this.EClassifierEClass.eStructuralFeatures.at(4); };
        _this.getEClassifier_ETypeParameters = function () { return _this.EClassifierEClass.eStructuralFeatures.at(5); };
        _this.getEClassifier__IsInstance__Object = function () { return _this.EClassifierEClass.eOperations.at(0); };
        _this.getEClassifier__GetClassifierID__ = function () { return _this.EClassifierEClass.eOperations.at(1); };
        _this.getEClass = function () { return _this.EClassEClass; };
        _this.getEClass_Abstract = function () { return _this.EClassEClass.eStructuralFeatures.at(0); };
        _this.getEClass_Interface = function () { return _this.EClassEClass.eStructuralFeatures.at(1); };
        _this.getEClass_ESuperTypes = function () { return _this.EClassEClass.eStructuralFeatures.at(2); };
        _this.getEClass_EOperations = function () { return _this.EClassEClass.eStructuralFeatures.at(3); };
        _this.getEClass_EAllAttributes = function () { return _this.EClassEClass.eStructuralFeatures.at(4); };
        _this.getEClass_EAllReferences = function () { return _this.EClassEClass.eStructuralFeatures.at(5); };
        _this.getEClass_EReferences = function () { return _this.EClassEClass.eStructuralFeatures.at(6); };
        _this.getEClass_EAttributes = function () { return _this.EClassEClass.eStructuralFeatures.at(7); };
        _this.getEClass_EAllContainments = function () { return _this.EClassEClass.eStructuralFeatures.at(8); };
        _this.getEClass_EAllOperations = function () { return _this.EClassEClass.eStructuralFeatures.at(9); };
        _this.getEClass_EAllStructuralFeatures = function () { return _this.EClassEClass.eStructuralFeatures.at(10); };
        _this.getEClass_EAllSuperTypes = function () { return _this.EClassEClass.eStructuralFeatures.at(11); };
        _this.getEClass_EIDAttribute = function () { return _this.EClassEClass.eStructuralFeatures.at(12); };
        _this.getEClass_EStructuralFeatures = function () { return _this.EClassEClass.eStructuralFeatures.at(13); };
        _this.getEClass_EGenericSuperTypes = function () { return _this.EClassEClass.eStructuralFeatures.at(14); };
        _this.getEClass_EAllGenericSuperTypes = function () { return _this.EClassEClass.eStructuralFeatures.at(15); };
        _this.getEClass__IsSuperTypeOf__SomeClass = function () { return _this.EClassEClass.eOperations.at(0); };
        _this.getEClass__GetFeatureCount__ = function () { return _this.EClassEClass.eOperations.at(1); };
        _this.getEClass__GetEStructuralFeature__FeatureID = function () { return _this.EClassEClass.eOperations.at(2); };
        _this.getEClass__GetFeatureID__Feature = function () { return _this.EClassEClass.eOperations.at(3); };
        _this.getEClass__GetEStructuralFeature__FeatureName = function () { return _this.EClassEClass.eOperations.at(4); };
        _this.getEClass__GetOperationCount__ = function () { return _this.EClassEClass.eOperations.at(5); };
        _this.getEClass__GetEOperation__OperationID = function () { return _this.EClassEClass.eOperations.at(6); };
        _this.getEClass__GetOperationID__Operation = function () { return _this.EClassEClass.eOperations.at(7); };
        _this.getEClass__GetOverride__Operation = function () { return _this.EClassEClass.eOperations.at(8); };
        _this.getEClass__GetFeatureType__Feature = function () { return _this.EClassEClass.eOperations.at(9); };
        _this.getEDataType = function () { return _this.EDataTypeEClass; };
        _this.getEDataType_Serializable = function () { return _this.EDataTypeEClass.eStructuralFeatures.at(0); };
        _this.getEEnum = function () { return _this.EEnumEClass; };
        _this.getEEnum_ELiterals = function () { return _this.EEnumEClass.eStructuralFeatures.at(0); };
        _this.getEEnum__GetEEnumLiteral__Name = function () { return _this.EEnumEClass.eOperations.at(0); };
        _this.getEEnum__GetEEnumLiteral__Value = function () { return _this.EEnumEClass.eOperations.at(1); };
        _this.getEEnum__GetEEnumLiteralByLiteral__Literal = function () { return _this.EEnumEClass.eOperations.at(2); };
        _this.getEEnumLiteral = function () { return _this.EEnumLiteralEClass; };
        _this.getEEnumLiteral_Value = function () { return _this.EEnumLiteralEClass.eStructuralFeatures.at(0); };
        _this.getEEnumLiteral_Instance = function () { return _this.EEnumLiteralEClass.eStructuralFeatures.at(1); };
        _this.getEEnumLiteral_Literal = function () { return _this.EEnumLiteralEClass.eStructuralFeatures.at(2); };
        _this.getEEnumLiteral_EEnum = function () { return _this.EEnumLiteralEClass.eStructuralFeatures.at(3); };
        _this.getEFactory = function () { return _this.EFactoryEClass; };
        _this.getEFactory_EPackage = function () { return _this.EFactoryEClass.eStructuralFeatures.at(0); };
        _this.getEFactory__Create__EClass = function () { return _this.EFactoryEClass.eOperations.at(0); };
        _this.getEFactory__CreateFromString__EDataType__LiteralValue = function () { return _this.EFactoryEClass.eOperations.at(1); };
        _this.getEFactory__ConvertToString__EDataType__InstanceValue = function () { return _this.EFactoryEClass.eOperations.at(2); };
        _this.getEObject = function () { return _this.EObjectEClass; };
        _this.getEObject__EClass__ = function () { return _this.EObjectEClass.eOperations.at(0); };
        _this.getEObject__EIsProxy__ = function () { return _this.EObjectEClass.eOperations.at(1); };
        _this.getEObject__EResource__ = function () { return _this.EObjectEClass.eOperations.at(2); };
        _this.getEObject__EContainer__ = function () { return _this.EObjectEClass.eOperations.at(3); };
        _this.getEObject__EContainingFeature__ = function () { return _this.EObjectEClass.eOperations.at(4); };
        _this.getEObject__EContainmentFeature__ = function () { return _this.EObjectEClass.eOperations.at(5); };
        _this.getEObject__EContents__ = function () { return _this.EObjectEClass.eOperations.at(6); };
        _this.getEObject__EAllContents__ = function () { return _this.EObjectEClass.eOperations.at(7); };
        _this.getEObject__ECrossReferences__ = function () { return _this.EObjectEClass.eOperations.at(8); };
        _this.getEObject__EGet__Feature = function () { return _this.EObjectEClass.eOperations.at(9); };
        _this.getEObject__EGet__Feature__Resolve = function () { return _this.EObjectEClass.eOperations.at(10); };
        _this.getEObject__ESet__Feature__NewValue = function () { return _this.EObjectEClass.eOperations.at(11); };
        _this.getEObject__EIsSet__Feature = function () { return _this.EObjectEClass.eOperations.at(12); };
        _this.getEObject__EUnset__Feature = function () { return _this.EObjectEClass.eOperations.at(13); };
        _this.getEObject__EInvoke__Operation__Arguments = function () { return _this.EObjectEClass.eOperations.at(14); };
        _this.getEOperation = function () { return _this.EOperationEClass; };
        _this.getEOperation_EContainingClass = function () { return _this.EOperationEClass.eStructuralFeatures.at(0); };
        _this.getEOperation_ETypeParameters = function () { return _this.EOperationEClass.eStructuralFeatures.at(1); };
        _this.getEOperation_EParameters = function () { return _this.EOperationEClass.eStructuralFeatures.at(2); };
        _this.getEOperation_EExceptions = function () { return _this.EOperationEClass.eStructuralFeatures.at(3); };
        _this.getEOperation_EGenericExceptions = function () { return _this.EOperationEClass.eStructuralFeatures.at(4); };
        _this.getEOperation__GetOperationID__ = function () { return _this.EOperationEClass.eOperations.at(0); };
        _this.getEOperation__IsOverrideOf__SomeOperation = function () { return _this.EOperationEClass.eOperations.at(1); };
        _this.getEPackage = function () { return _this.EPackageEClass; };
        _this.getEPackage_NsURI = function () { return _this.EPackageEClass.eStructuralFeatures.at(0); };
        _this.getEPackage_NsPrefix = function () { return _this.EPackageEClass.eStructuralFeatures.at(1); };
        _this.getEPackage_EFactoryInstance = function () { return _this.EPackageEClass.eStructuralFeatures.at(2); };
        _this.getEPackage_EClassifiers = function () { return _this.EPackageEClass.eStructuralFeatures.at(3); };
        _this.getEPackage_ESubpackages = function () { return _this.EPackageEClass.eStructuralFeatures.at(4); };
        _this.getEPackage_ESuperPackage = function () { return _this.EPackageEClass.eStructuralFeatures.at(5); };
        _this.getEPackage__GetEClassifier__Name = function () { return _this.EPackageEClass.eOperations.at(0); };
        _this.getEParameter = function () { return _this.EParameterEClass; };
        _this.getEParameter_EOperation = function () { return _this.EParameterEClass.eStructuralFeatures.at(0); };
        _this.getEReference = function () { return _this.EReferenceEClass; };
        _this.getEReference_Containment = function () { return _this.EReferenceEClass.eStructuralFeatures.at(0); };
        _this.getEReference_Container = function () { return _this.EReferenceEClass.eStructuralFeatures.at(1); };
        _this.getEReference_ResolveProxies = function () { return _this.EReferenceEClass.eStructuralFeatures.at(2); };
        _this.getEReference_EOpposite = function () { return _this.EReferenceEClass.eStructuralFeatures.at(3); };
        _this.getEReference_EReferenceType = function () { return _this.EReferenceEClass.eStructuralFeatures.at(4); };
        _this.getEReference_EKeys = function () { return _this.EReferenceEClass.eStructuralFeatures.at(5); };
        _this.getEStringToStringMapEntry = function () { return _this.EStringToStringMapEntryEClass; };
        _this.getEStringToStringMapEntry_Key = function () { return _this.EStringToStringMapEntryEClass.eStructuralFeatures.at(0); };
        _this.getEStringToStringMapEntry_Value = function () { return _this.EStringToStringMapEntryEClass.eStructuralFeatures.at(1); };
        _this.getEGenericType = function () { return _this.EGenericTypeEClass; };
        _this.getEGenericType_EUpperBound = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(0); };
        _this.getEGenericType_ETypeArguments = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(1); };
        _this.getEGenericType_ERawType = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(2); };
        _this.getEGenericType_ELowerBound = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(3); };
        _this.getEGenericType_ETypeParameter = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(4); };
        _this.getEGenericType_EClassifier = function () { return _this.EGenericTypeEClass.eStructuralFeatures.at(5); };
        _this.getEGenericType__IsInstance__Object = function () { return _this.EGenericTypeEClass.eOperations.at(0); };
        _this.getETypeParameter = function () { return _this.ETypeParameterEClass; };
        _this.getETypeParameter_EBounds = function () { return _this.ETypeParameterEClass.eStructuralFeatures.at(0); };
        _this.getEBigDecimal = function () { return _this.EBigDecimalEDataType; };
        _this.getEBigInteger = function () { return _this.EBigIntegerEDataType; };
        _this.getEBoolean = function () { return _this.EBooleanEDataType; };
        _this.getEBooleanObject = function () { return _this.EBooleanObjectEDataType; };
        _this.getEByte = function () { return _this.EByteEDataType; };
        _this.getEByteArray = function () { return _this.EByteArrayEDataType; };
        _this.getEByteObject = function () { return _this.EByteObjectEDataType; };
        _this.getEChar = function () { return _this.ECharEDataType; };
        _this.getECharacterObject = function () { return _this.ECharacterObjectEDataType; };
        _this.getEDate = function () { return _this.EDateEDataType; };
        _this.getEDiagnosticChain = function () { return _this.EDiagnosticChainEDataType; };
        _this.getEDouble = function () { return _this.EDoubleEDataType; };
        _this.getEDoubleObject = function () { return _this.EDoubleObjectEDataType; };
        _this.getEEList = function () { return _this.EEListEDataType; };
        _this.getEEnumerator = function () { return _this.EEnumeratorEDataType; };
        _this.getEFeatureMap = function () { return _this.EFeatureMapEDataType; };
        _this.getEFeatureMapEntry = function () { return _this.EFeatureMapEntryEDataType; };
        _this.getEFloat = function () { return _this.EFloatEDataType; };
        _this.getEFloatObject = function () { return _this.EFloatObjectEDataType; };
        _this.getEInt = function () { return _this.EIntEDataType; };
        _this.getEIntegerObject = function () { return _this.EIntegerObjectEDataType; };
        _this.getEJavaClass = function () { return _this.EJavaClassEDataType; };
        _this.getEJavaObject = function () { return _this.EJavaObjectEDataType; };
        _this.getELong = function () { return _this.ELongEDataType; };
        _this.getELongObject = function () { return _this.ELongObjectEDataType; };
        _this.getEMap = function () { return _this.EMapEDataType; };
        _this.getEResource = function () { return _this.EResourceEDataType; };
        _this.getEResourceSet = function () { return _this.EResourceSetEDataType; };
        _this.getEShort = function () { return _this.EShortEDataType; };
        _this.getEShortObject = function () { return _this.EShortObjectEDataType; };
        _this.getEString = function () { return _this.EStringEDataType; };
        _this.getETreeIterator = function () { return _this.ETreeIteratorEDataType; };
        _this.getEInvocationTargetException = function () { return _this.EInvocationTargetExceptionEDataType; };
        return _this;
        /*
        public static Literals = {
            EATTRIBUTE: EcorePackageImpl.eINSTANCE.getEAttribute(),
            
            EANNOTATION: EcorePackageImpl.eINSTANCE.getEAnnotation_(),
            
            ECLASS: EcorePackageImpl.eINSTANCE.getEClass(),
            
            ECLASSIFIER: EcorePackageImpl.eINSTANCE.getEClassifier_(),
            
            EDATATYPE: EcorePackageImpl.eINSTANCE.getEDataType(),
            
            EENUM: EcorePackageImpl.eINSTANCE.getEEnum(),
            
            EENUMLITERAL: EcorePackageImpl.eINSTANCE.getEEnumLiteral(),
            
            EFACTORY: EcorePackageImpl.eINSTANCE.getEFactory(),
            
            EMODELELEMENT: EcorePackageImpl.eINSTANCE.getEModelElement(),
            
            ENAMEDELEMENT: EcorePackageImpl.eINSTANCE.getENamedElement(),
            
            EOBJECT: EcorePackageImpl.eINSTANCE.getEObject(),
            
            EOPERATION: EcorePackageImpl.eINSTANCE.getEOperation(),
            
            EPACKAGE: EcorePackageImpl.eINSTANCE.getEPackage(),
            
            EPARAMETER: EcorePackageImpl.eINSTANCE.getEParameter(),
            
            EREFERENCE: EcorePackageImpl.eINSTANCE.getEReference(),
            
            ESTRUCTURALFEATURE: EcorePackageImpl.eINSTANCE.getEStructuralFeature(),
            
            ETYPEDELEMENT: EcorePackageImpl.eINSTANCE.getETypedElement(),
            
            EBIGDECIMAL: EcorePackageImpl.eINSTANCE.getEBigDecimal(),
            EBIGINTEGER: EcorePackageImpl.eINSTANCE.getEBigInteger(),
            EBOOLEAN: EcorePackageImpl.eINSTANCE.getEBoolean(),
            EBOOLEANOBJECT: EcorePackageImpl.eINSTANCE.getEBooleanObject(),
            EBYTE: EcorePackageImpl.eINSTANCE.getEByte(),
            EBYTEARRAY: EcorePackageImpl.eINSTANCE.getEByteArray(),
            EBYTEOBJECT: EcorePackageImpl.eINSTANCE.getEByteObject(),
            ECHAR: EcorePackageImpl.eINSTANCE.getEChar(),
            ECHARACTEROBJECT: EcorePackageImpl.eINSTANCE.getECharacterObject(),
            EDATE: EcorePackageImpl.eINSTANCE.getEDate(),
            EDIAGNOSTICCHAIN: EcorePackageImpl.eINSTANCE.getEDiagnosticChain(),
            EDOUBLE: EcorePackageImpl.eINSTANCE.getEDouble(),
            EDOUBLEOBJECT: EcorePackageImpl.eINSTANCE.getEDoubleObject(),
            EELIST: EcorePackageImpl.eINSTANCE.getEEList(),
            EENUMERATOR: EcorePackageImpl.eINSTANCE.getEEnumerator(),
            EFEATUREMAP: EcorePackageImpl.eINSTANCE.getEFeatureMap(),
            EFEATUREMAPENTRY: EcorePackageImpl.eINSTANCE.getEFeatureMapEntry(),
            EFLOAT: EcorePackageImpl.eINSTANCE.getEFloat(),
            EFLOATOBJECT: EcorePackageImpl.eINSTANCE.getEFloatObject(),
            EINT: EcorePackageImpl.eINSTANCE.getEInt(),
            EINTEGEROBJECT: EcorePackageImpl.eINSTANCE.getEIntegerObject(),
            EJAVACLASS: EcorePackageImpl.eINSTANCE.getEJavaClass(),
            EJAVAOBJECT: EcorePackageImpl.eINSTANCE.getEJavaObject(),
            ELONG: EcorePackageImpl.eINSTANCE.getELong(),
            ELONGOBJECT: EcorePackageImpl.eINSTANCE.getELongObject(),
            EMAP: EcorePackageImpl.eINSTANCE.getEMap(),
            ERESOURCE: EcorePackageImpl.eINSTANCE.getEResource(),
            ERESOURCESET: EcorePackageImpl.eINSTANCE.getEResourceSet(),
            ESHORT: EcorePackageImpl.eINSTANCE.getEShort(),
            ESHORTOBJECT: EcorePackageImpl.eINSTANCE.getEShortObject(),
            ESTRING: EcorePackageImpl.eINSTANCE.getEString(),
            ESTRINGTOSTRINGMAPENTRY: EcorePackageImpl.eINSTANCE.getEStringToStringMapEntry(),
            
            ETREEITERATOR: EcorePackageImpl.eINSTANCE.getETreeIterator(),
            EGENERICTYPE: EcorePackageImpl.eINSTANCE.getEGenericType(),
            
            ETYPEPARAMETER: EcorePackageImpl.eINSTANCE.getETypeParameter(),
            
            EINVOCATIONTARGETEXCEPTION: EcorePackageImpl.eINSTANCE.getEInvocationTargetException(),
            EMODELELEMENT_EANNOTATIONS: EcorePackageImpl.eINSTANCE.getEModelElement_EAnnotations(),
            ENAMEDELEMENT_NAME: EcorePackageImpl.eINSTANCE.getENamedElement_Name(),
            ETYPEDELEMENT_ORDERED: EcorePackageImpl.eINSTANCE.getETypedElement_Ordered(),
            ETYPEDELEMENT_UNIQUE: EcorePackageImpl.eINSTANCE.getETypedElement_Unique(),
            ETYPEDELEMENT_LOWERBOUND: EcorePackageImpl.eINSTANCE.getETypedElement_LowerBound(),
            ETYPEDELEMENT_UPPERBOUND: EcorePackageImpl.eINSTANCE.getETypedElement_UpperBound(),
            ETYPEDELEMENT_MANY: EcorePackageImpl.eINSTANCE.getETypedElement_Many(),
            ETYPEDELEMENT_REQUIRED: EcorePackageImpl.eINSTANCE.getETypedElement_Required(),
            ETYPEDELEMENT_ETYPE: EcorePackageImpl.eINSTANCE.getETypedElement_EType(),
            ETYPEDELEMENT_EGENERICTYPE: EcorePackageImpl.eINSTANCE.getETypedElement_EGenericType(),
            ESTRUCTURALFEATURE_CHANGEABLE: EcorePackageImpl.eINSTANCE.getEStructuralFeature_Changeable(),
            ESTRUCTURALFEATURE_VOLATILE: EcorePackageImpl.eINSTANCE.getEStructuralFeature_Volatile(),
            ESTRUCTURALFEATURE_TRANSIENT: EcorePackageImpl.eINSTANCE.getEStructuralFeature_Transient(),
            ESTRUCTURALFEATURE_DEFAULTVALUELITERAL: EcorePackageImpl.eINSTANCE.getEStructuralFeature_DefaultValueLiteral(),
            ESTRUCTURALFEATURE_DEFAULTVALUE: EcorePackageImpl.eINSTANCE.getEStructuralFeature_DefaultValue(),
            ESTRUCTURALFEATURE_UNSETTABLE: EcorePackageImpl.eINSTANCE.getEStructuralFeature_Unsettable(),
            ESTRUCTURALFEATURE_DERIVED: EcorePackageImpl.eINSTANCE.getEStructuralFeature_Derived(),
            ESTRUCTURALFEATURE_ECONTAININGCLASS: EcorePackageImpl.eINSTANCE.getEStructuralFeature_EContainingClass(),
            EATTRIBUTE_ID: EcorePackageImpl.eINSTANCE.getEAttribute_ID(),
            EATTRIBUTE_EATTRIBUTETYPE: EcorePackageImpl.eINSTANCE.getEAttribute_EAttributeType(),
            EANNOTATION_SOURCE: EcorePackageImpl.eINSTANCE.getEAnnotation_Source(),
            EANNOTATION_DETAILS: EcorePackageImpl.eINSTANCE.getEAnnotation_Details(),
            EANNOTATION_EMODELELEMENT: EcorePackageImpl.eINSTANCE.getEAnnotation_EModelElement(),
            EANNOTATION_CONTENTS: EcorePackageImpl.eINSTANCE.getEAnnotation_Contents(),
            EANNOTATION_REFERENCES: EcorePackageImpl.eINSTANCE.getEAnnotation_References(),
            ECLASSIFIER_INSTANCECLASSNAME: EcorePackageImpl.eINSTANCE.getEClassifier_InstanceClassName(),
            ECLASSIFIER_INSTANCECLASS: EcorePackageImpl.eINSTANCE.getEClassifier_InstanceClass(),
            ECLASSIFIER_DEFAULTVALUE: EcorePackageImpl.eINSTANCE.getEClassifier_DefaultValue(),
            ECLASSIFIER_INSTANCETYPENAME: EcorePackageImpl.eINSTANCE.getEClassifier_InstanceTypeName(),
            ECLASSIFIER_EPACKAGE: EcorePackageImpl.eINSTANCE.getEClassifier_EPackage(),
            ECLASSIFIER_ETYPEPARAMETERS: EcorePackageImpl.eINSTANCE.getEClassifier_ETypeParameters(),
            ECLASS_ABSTRACT: EcorePackageImpl.eINSTANCE.getEClass_Abstract(),
            ECLASS_INTERFACE: EcorePackageImpl.eINSTANCE.getEClass_Interface(),
            ECLASS_ESUPERTYPES: EcorePackageImpl.eINSTANCE.getEClass_ESuperTypes(),
            ECLASS_EOPERATIONS: EcorePackageImpl.eINSTANCE.getEClass_EOperations(),
            ECLASS_EALLATTRIBUTES: EcorePackageImpl.eINSTANCE.getEClass_EAllAttributes(),
            ECLASS_EALLREFERENCES: EcorePackageImpl.eINSTANCE.getEClass_EAllReferences(),
            ECLASS_EREFERENCES: EcorePackageImpl.eINSTANCE.getEClass_EReferences(),
            ECLASS_EATTRIBUTES: EcorePackageImpl.eINSTANCE.getEClass_EAttributes(),
            ECLASS_EALLCONTAINMENTS: EcorePackageImpl.eINSTANCE.getEClass_EAllContainments(),
            ECLASS_EALLOPERATIONS: EcorePackageImpl.eINSTANCE.getEClass_EAllOperations(),
            ECLASS_EALLSTRUCTURALFEATURES: EcorePackageImpl.eINSTANCE.getEClass_EAllStructuralFeatures(),
            ECLASS_EALLSUPERTYPES: EcorePackageImpl.eINSTANCE.getEClass_EAllSuperTypes(),
            ECLASS_EIDATTRIBUTE: EcorePackageImpl.eINSTANCE.getEClass_EIDAttribute(),
            ECLASS_ESTRUCTURALFEATURES: EcorePackageImpl.eINSTANCE.getEClass_EStructuralFeatures(),
            ECLASS_EGENERICSUPERTYPES: EcorePackageImpl.eINSTANCE.getEClass_EGenericSuperTypes(),
            ECLASS_EALLGENERICSUPERTYPES: EcorePackageImpl.eINSTANCE.getEClass_EAllGenericSuperTypes(),
            EDATATYPE_SERIALIZABLE: EcorePackageImpl.eINSTANCE.getEDataType_Serializable(),
            EENUM_ELITERALS: EcorePackageImpl.eINSTANCE.getEEnum_ELiterals(),
            EENUMLITERAL_VALUE: EcorePackageImpl.eINSTANCE.getEEnumLiteral_Value(),
            EENUMLITERAL_INSTANCE: EcorePackageImpl.eINSTANCE.getEEnumLiteral_Instance(),
            EENUMLITERAL_LITERAL: EcorePackageImpl.eINSTANCE.getEEnumLiteral_Literal(),
            EENUMLITERAL_EENUM: EcorePackageImpl.eINSTANCE.getEEnumLiteral_EEnum(),
            EFACTORY_EPACKAGE: EcorePackageImpl.eINSTANCE.getEFactory_EPackage(),
            EOPERATION_ECONTAININGCLASS: EcorePackageImpl.eINSTANCE.getEOperation_EContainingClass(),
            EOPERATION_ETYPEPARAMETERS: EcorePackageImpl.eINSTANCE.getEOperation_ETypeParameters(),
            EOPERATION_EPARAMETERS: EcorePackageImpl.eINSTANCE.getEOperation_EParameters(),
            EOPERATION_EEXCEPTIONS: EcorePackageImpl.eINSTANCE.getEOperation_EExceptions(),
            EOPERATION_EGENERICEXCEPTIONS: EcorePackageImpl.eINSTANCE.getEOperation_EGenericExceptions(),
            EPACKAGE_NSURI: EcorePackageImpl.eINSTANCE.getEPackage_NsURI(),
            EPACKAGE_NSPREFIX: EcorePackageImpl.eINSTANCE.getEPackage_NsPrefix(),
            EPACKAGE_EFACTORYINSTANCE: EcorePackageImpl.eINSTANCE.getEPackage_EFactoryInstance(),
            EPACKAGE_ECLASSIFIERS: EcorePackageImpl.eINSTANCE.getEPackage_EClassifiers(),
            EPACKAGE_ESUBPACKAGES: EcorePackageImpl.eINSTANCE.getEPackage_ESubpackages(),
            EPACKAGE_ESUPERPACKAGE: EcorePackageImpl.eINSTANCE.getEPackage_ESuperPackage(),
            EPARAMETER_EOPERATION: EcorePackageImpl.eINSTANCE.getEParameter_EOperation(),
            EREFERENCE_CONTAINMENT: EcorePackageImpl.eINSTANCE.getEReference_Containment(),
            EREFERENCE_CONTAINER: EcorePackageImpl.eINSTANCE.getEReference_Container(),
            EREFERENCE_RESOLVEPROXIES: EcorePackageImpl.eINSTANCE.getEReference_ResolveProxies(),
            EREFERENCE_EOPPOSITE: EcorePackageImpl.eINSTANCE.getEReference_EOpposite(),
            EREFERENCE_EREFERENCETYPE: EcorePackageImpl.eINSTANCE.getEReference_EReferenceType(),
            EREFERENCE_EKEYS: EcorePackageImpl.eINSTANCE.getEReference_EKeys(),
            ESTRINGTOSTRINGMAPENTRY_KEY: EcorePackageImpl.eINSTANCE.getEStringToStringMapEntry_Key(),
            ESTRINGTOSTRINGMAPENTRY_VALUE: EcorePackageImpl.eINSTANCE.getEStringToStringMapEntry_Value(),
            EGENERICTYPE_EUPPERBOUND: EcorePackageImpl.eINSTANCE.getEGenericType_EUpperBound(),
            EGENERICTYPE_ETYPEARGUMENTS: EcorePackageImpl.eINSTANCE.getEGenericType_ETypeArguments(),
            EGENERICTYPE_ERAWTYPE: EcorePackageImpl.eINSTANCE.getEGenericType_ERawType(),
            EGENERICTYPE_ELOWERBOUND: EcorePackageImpl.eINSTANCE.getEGenericType_ELowerBound(),
            EGENERICTYPE_ETYPEPARAMETER: EcorePackageImpl.eINSTANCE.getEGenericType_ETypeParameter(),
            EGENERICTYPE_ECLASSIFIER: EcorePackageImpl.eINSTANCE.getEGenericType_EClassifier(),
            ETYPEPARAMETER_EBOUNDS: EcorePackageImpl.eINSTANCE.getETypeParameter_EBounds()
        }
        */
    }
    /*
    constructor(){
        //no private constructors in TypeScript
        super(EcorePackageImpl.eNS_URI, EcoreFactoryImpl.eINSTANCE as any as EFactory);
    }
    */
    EcorePackageImpl.init = function () {
        // Obtain or create and register package
        var theEcorePackage = new EcorePackageImpl();
        theEcorePackage.ecorePackage = theEcorePackage;
        theEcorePackage.ecoreFactory = _EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_4__["EcoreFactoryImpl"].eINSTANCE;
        // Create package meta-data objects
        theEcorePackage.createPackageContents();
        // Initialize created meta-data
        theEcorePackage.initializePackageContents();
        return theEcorePackage;
    };
    EcorePackageImpl.eNAME = "ecore";
    EcorePackageImpl.eNS_URI = "http://www.eclipse.org/emf/2002/Ecore";
    EcorePackageImpl.eNS_PREFIX = "ecore";
    EcorePackageImpl.EMODELELEMENT = 8;
    EcorePackageImpl.EMODELELEMENT_FEATURE_COUNT = 1;
    EcorePackageImpl.EMODELELEMENT_OPERATION_COUNT = 1;
    EcorePackageImpl.EMODELELEMENT_EANNOTATIONS = 0;
    EcorePackageImpl.EMODELELEMENT___GETEANNOTATION__SOURCE = 0;
    EcorePackageImpl.ENAMEDELEMENT = 9;
    EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT = EcorePackageImpl.EMODELELEMENT_FEATURE_COUNT + 1;
    EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT = EcorePackageImpl.EMODELELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.ENAMEDELEMENT_EANNOTATIONS = 0;
    EcorePackageImpl.ENAMEDELEMENT_NAME = 1;
    EcorePackageImpl.ETYPEDELEMENT = 16;
    EcorePackageImpl.ETYPEDELEMENT_FEATURE_COUNT = EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT + 8;
    EcorePackageImpl.ETYPEDELEMENT_OPERATION_COUNT = EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.ETYPEDELEMENT_EANNOTATIONS = 0;
    EcorePackageImpl.ETYPEDELEMENT_NAME = 1;
    EcorePackageImpl.ETYPEDELEMENT_ORDERED = 2;
    EcorePackageImpl.ETYPEDELEMENT_UNIQUE = 3;
    EcorePackageImpl.ETYPEDELEMENT_LOWERBOUND = 4;
    EcorePackageImpl.ETYPEDELEMENT_UPPERBOUND = 5;
    EcorePackageImpl.ETYPEDELEMENT_MANY = 6;
    EcorePackageImpl.ETYPEDELEMENT_REQUIRED = 7;
    EcorePackageImpl.ETYPEDELEMENT_ETYPE = 8;
    EcorePackageImpl.ETYPEDELEMENT_EGENERICTYPE = 9;
    EcorePackageImpl.ESTRUCTURALFEATURE = 15;
    EcorePackageImpl.ESTRUCTURALFEATURE_FEATURE_COUNT = EcorePackageImpl.ETYPEDELEMENT_FEATURE_COUNT + 8;
    EcorePackageImpl.ESTRUCTURALFEATURE_OPERATION_COUNT = EcorePackageImpl.ETYPEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageImpl.ESTRUCTURALFEATURE_EANNOTATIONS = 0;
    EcorePackageImpl.ESTRUCTURALFEATURE_NAME = 1;
    EcorePackageImpl.ESTRUCTURALFEATURE_ORDERED = 2;
    EcorePackageImpl.ESTRUCTURALFEATURE_UNIQUE = 3;
    EcorePackageImpl.ESTRUCTURALFEATURE_LOWERBOUND = 4;
    EcorePackageImpl.ESTRUCTURALFEATURE_UPPERBOUND = 5;
    EcorePackageImpl.ESTRUCTURALFEATURE_MANY = 6;
    EcorePackageImpl.ESTRUCTURALFEATURE_REQUIRED = 7;
    EcorePackageImpl.ESTRUCTURALFEATURE_ETYPE = 8;
    EcorePackageImpl.ESTRUCTURALFEATURE_EGENERICTYPE = 9;
    EcorePackageImpl.ESTRUCTURALFEATURE_CHANGEABLE = 10;
    EcorePackageImpl.ESTRUCTURALFEATURE_VOLATILE = 11;
    EcorePackageImpl.ESTRUCTURALFEATURE_TRANSIENT = 12;
    EcorePackageImpl.ESTRUCTURALFEATURE_DEFAULTVALUELITERAL = 13;
    EcorePackageImpl.ESTRUCTURALFEATURE_DEFAULTVALUE = 14;
    EcorePackageImpl.ESTRUCTURALFEATURE_UNSETTABLE = 15;
    EcorePackageImpl.ESTRUCTURALFEATURE_DERIVED = 16;
    EcorePackageImpl.ESTRUCTURALFEATURE_ECONTAININGCLASS = 17;
    EcorePackageImpl.ESTRUCTURALFEATURE___GETFEATUREID = 0;
    EcorePackageImpl.ESTRUCTURALFEATURE___GETCONTAINERCLASS = 1;
    EcorePackageImpl.EATTRIBUTE = 0;
    EcorePackageImpl.EATTRIBUTE_FEATURE_COUNT = EcorePackageImpl.ESTRUCTURALFEATURE_FEATURE_COUNT + 2;
    EcorePackageImpl.EATTRIBUTE_OPERATION_COUNT = EcorePackageImpl.ESTRUCTURALFEATURE_OPERATION_COUNT + 0;
    EcorePackageImpl.EATTRIBUTE_EANNOTATIONS = 0;
    EcorePackageImpl.EATTRIBUTE_NAME = 1;
    EcorePackageImpl.EATTRIBUTE_ORDERED = 2;
    EcorePackageImpl.EATTRIBUTE_UNIQUE = 3;
    EcorePackageImpl.EATTRIBUTE_LOWERBOUND = 4;
    EcorePackageImpl.EATTRIBUTE_UPPERBOUND = 5;
    EcorePackageImpl.EATTRIBUTE_MANY = 6;
    EcorePackageImpl.EATTRIBUTE_REQUIRED = 7;
    EcorePackageImpl.EATTRIBUTE_ETYPE = 8;
    EcorePackageImpl.EATTRIBUTE_EGENERICTYPE = 9;
    EcorePackageImpl.EATTRIBUTE_CHANGEABLE = 10;
    EcorePackageImpl.EATTRIBUTE_VOLATILE = 11;
    EcorePackageImpl.EATTRIBUTE_TRANSIENT = 12;
    EcorePackageImpl.EATTRIBUTE_DEFAULTVALUELITERAL = 13;
    EcorePackageImpl.EATTRIBUTE_DEFAULTVALUE = 14;
    EcorePackageImpl.EATTRIBUTE_UNSETTABLE = 15;
    EcorePackageImpl.EATTRIBUTE_DERIVED = 16;
    EcorePackageImpl.EATTRIBUTE_ECONTAININGCLASS = 17;
    EcorePackageImpl.EATTRIBUTE_ID = 18;
    EcorePackageImpl.EATTRIBUTE_EATTRIBUTETYPE = 19;
    EcorePackageImpl.EANNOTATION = 1;
    EcorePackageImpl.EANNOTATION_FEATURE_COUNT = EcorePackageImpl.EMODELELEMENT_FEATURE_COUNT + 5;
    EcorePackageImpl.EANNOTATION_OPERATION_COUNT = EcorePackageImpl.EMODELELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.EANNOTATION_EANNOTATIONS = 0;
    EcorePackageImpl.EANNOTATION_SOURCE = 1;
    EcorePackageImpl.EANNOTATION_DETAILS = 2;
    EcorePackageImpl.EANNOTATION_EMODELELEMENT = 3;
    EcorePackageImpl.EANNOTATION_CONTENTS = 4;
    EcorePackageImpl.EANNOTATION_REFERENCES = 5;
    EcorePackageImpl.ECLASSIFIER = 3;
    EcorePackageImpl.ECLASSIFIER_FEATURE_COUNT = EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT + 6;
    EcorePackageImpl.ECLASSIFIER_OPERATION_COUNT = EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageImpl.ECLASSIFIER_EANNOTATIONS = 0;
    EcorePackageImpl.ECLASSIFIER_NAME = 1;
    EcorePackageImpl.ECLASSIFIER_INSTANCECLASSNAME = 2;
    EcorePackageImpl.ECLASSIFIER_INSTANCECLASS = 3;
    EcorePackageImpl.ECLASSIFIER_DEFAULTVALUE = 4;
    EcorePackageImpl.ECLASSIFIER_INSTANCETYPENAME = 5;
    EcorePackageImpl.ECLASSIFIER_EPACKAGE = 6;
    EcorePackageImpl.ECLASSIFIER_ETYPEPARAMETERS = 7;
    EcorePackageImpl.ECLASSIFIER___ISINSTANCE__OBJECT = 0;
    EcorePackageImpl.ECLASSIFIER___GETCLASSIFIERID = 1;
    EcorePackageImpl.ECLASS = 2;
    EcorePackageImpl.ECLASS_FEATURE_COUNT = EcorePackageImpl.ECLASSIFIER_FEATURE_COUNT + 16;
    EcorePackageImpl.ECLASS_OPERATION_COUNT = EcorePackageImpl.ECLASSIFIER_OPERATION_COUNT + 10;
    EcorePackageImpl.ECLASS_EANNOTATIONS = 0;
    EcorePackageImpl.ECLASS_NAME = 1;
    EcorePackageImpl.ECLASS_INSTANCECLASSNAME = 2;
    EcorePackageImpl.ECLASS_INSTANCECLASS = 3;
    EcorePackageImpl.ECLASS_DEFAULTVALUE = 4;
    EcorePackageImpl.ECLASS_INSTANCETYPENAME = 5;
    EcorePackageImpl.ECLASS_EPACKAGE = 6;
    EcorePackageImpl.ECLASS_ETYPEPARAMETERS = 7;
    EcorePackageImpl.ECLASS_ABSTRACT = 8;
    EcorePackageImpl.ECLASS_INTERFACE = 9;
    EcorePackageImpl.ECLASS_ESUPERTYPES = 10;
    EcorePackageImpl.ECLASS_EOPERATIONS = 11;
    EcorePackageImpl.ECLASS_EALLATTRIBUTES = 12;
    EcorePackageImpl.ECLASS_EALLREFERENCES = 13;
    EcorePackageImpl.ECLASS_EREFERENCES = 14;
    EcorePackageImpl.ECLASS_EATTRIBUTES = 15;
    EcorePackageImpl.ECLASS_EALLCONTAINMENTS = 16;
    EcorePackageImpl.ECLASS_EALLOPERATIONS = 17;
    EcorePackageImpl.ECLASS_EALLSTRUCTURALFEATURES = 18;
    EcorePackageImpl.ECLASS_EALLSUPERTYPES = 19;
    EcorePackageImpl.ECLASS_EIDATTRIBUTE = 20;
    EcorePackageImpl.ECLASS_ESTRUCTURALFEATURES = 21;
    EcorePackageImpl.ECLASS_EGENERICSUPERTYPES = 22;
    EcorePackageImpl.ECLASS_EALLGENERICSUPERTYPES = 23;
    EcorePackageImpl.ECLASS___ISSUPERTYPEOF__SOMECLASS = 0;
    EcorePackageImpl.ECLASS___GETFEATURECOUNT = 1;
    EcorePackageImpl.ECLASS___GETESTRUCTURALFEATURE__FEATUREID = 2;
    EcorePackageImpl.ECLASS___GETFEATUREID__FEATURE = 3;
    EcorePackageImpl.ECLASS___GETESTRUCTURALFEATURE__FEATURENAME = 4;
    EcorePackageImpl.ECLASS___GETOPERATIONCOUNT = 5;
    EcorePackageImpl.ECLASS___GETEOPERATION__OPERATIONID = 6;
    EcorePackageImpl.ECLASS___GETOPERATIONID__OPERATION = 7;
    EcorePackageImpl.ECLASS___GETOVERRIDE__OPERATION = 8;
    EcorePackageImpl.ECLASS___GETFEATURETYPE__FEATURE = 9;
    EcorePackageImpl.EDATATYPE = 4;
    EcorePackageImpl.EDATATYPE_FEATURE_COUNT = EcorePackageImpl.ECLASSIFIER_FEATURE_COUNT + 1;
    EcorePackageImpl.EDATATYPE_OPERATION_COUNT = EcorePackageImpl.ECLASSIFIER_OPERATION_COUNT + 0;
    EcorePackageImpl.EDATATYPE_EANNOTATIONS = 0;
    EcorePackageImpl.EDATATYPE_NAME = 1;
    EcorePackageImpl.EDATATYPE_INSTANCECLASSNAME = 2;
    EcorePackageImpl.EDATATYPE_INSTANCECLASS = 3;
    EcorePackageImpl.EDATATYPE_DEFAULTVALUE = 4;
    EcorePackageImpl.EDATATYPE_INSTANCETYPENAME = 5;
    EcorePackageImpl.EDATATYPE_EPACKAGE = 6;
    EcorePackageImpl.EDATATYPE_ETYPEPARAMETERS = 7;
    EcorePackageImpl.EDATATYPE_SERIALIZABLE = 8;
    EcorePackageImpl.EENUM = 5;
    EcorePackageImpl.EENUM_FEATURE_COUNT = EcorePackageImpl.EDATATYPE_FEATURE_COUNT + 1;
    EcorePackageImpl.EENUM_OPERATION_COUNT = EcorePackageImpl.EDATATYPE_OPERATION_COUNT + 3;
    EcorePackageImpl.EENUM_EANNOTATIONS = 0;
    EcorePackageImpl.EENUM_NAME = 1;
    EcorePackageImpl.EENUM_INSTANCECLASSNAME = 2;
    EcorePackageImpl.EENUM_INSTANCECLASS = 3;
    EcorePackageImpl.EENUM_DEFAULTVALUE = 4;
    EcorePackageImpl.EENUM_INSTANCETYPENAME = 5;
    EcorePackageImpl.EENUM_EPACKAGE = 6;
    EcorePackageImpl.EENUM_ETYPEPARAMETERS = 7;
    EcorePackageImpl.EENUM_SERIALIZABLE = 8;
    EcorePackageImpl.EENUM_ELITERALS = 9;
    EcorePackageImpl.EENUM___GETEENUMLITERAL__NAME = 0;
    EcorePackageImpl.EENUM___GETEENUMLITERAL__VALUE = 1;
    EcorePackageImpl.EENUM___GETEENUMLITERALBYLITERAL__LITERAL = 2;
    EcorePackageImpl.EENUMLITERAL = 6;
    EcorePackageImpl.EENUMLITERAL_FEATURE_COUNT = EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT + 4;
    EcorePackageImpl.EENUMLITERAL_OPERATION_COUNT = EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.EENUMLITERAL_EANNOTATIONS = 0;
    EcorePackageImpl.EENUMLITERAL_NAME = 1;
    EcorePackageImpl.EENUMLITERAL_VALUE = 2;
    EcorePackageImpl.EENUMLITERAL_INSTANCE = 3;
    EcorePackageImpl.EENUMLITERAL_LITERAL = 4;
    EcorePackageImpl.EENUMLITERAL_EENUM = 5;
    EcorePackageImpl.EFACTORY = 7;
    EcorePackageImpl.EFACTORY_FEATURE_COUNT = EcorePackageImpl.EMODELELEMENT_FEATURE_COUNT + 1;
    EcorePackageImpl.EFACTORY_OPERATION_COUNT = EcorePackageImpl.EMODELELEMENT_OPERATION_COUNT + 3;
    EcorePackageImpl.EFACTORY_EANNOTATIONS = 0;
    EcorePackageImpl.EFACTORY_EPACKAGE = 1;
    EcorePackageImpl.EFACTORY___CREATE__ECLASS = 0;
    EcorePackageImpl.EFACTORY___CREATEFROMSTRING__EDATATYPE__LITERALVALUE = 1;
    EcorePackageImpl.EFACTORY___CONVERTTOSTRING__EDATATYPE__INSTANCEVALUE = 2;
    EcorePackageImpl.EOBJECT = 10;
    EcorePackageImpl.EOBJECT_FEATURE_COUNT = 0;
    EcorePackageImpl.EOBJECT_OPERATION_COUNT = 15;
    EcorePackageImpl.EOBJECT___ECLASS = 0;
    EcorePackageImpl.EOBJECT___EISPROXY = 1;
    EcorePackageImpl.EOBJECT___ERESOURCE = 2;
    EcorePackageImpl.EOBJECT___ECONTAINER = 3;
    EcorePackageImpl.EOBJECT___ECONTAININGFEATURE = 4;
    EcorePackageImpl.EOBJECT___ECONTAINMENTFEATURE = 5;
    EcorePackageImpl.EOBJECT___ECONTENTS = 6;
    EcorePackageImpl.EOBJECT___EALLCONTENTS = 7;
    EcorePackageImpl.EOBJECT___ECROSSREFERENCES = 8;
    EcorePackageImpl.EOBJECT___EGET__FEATURE = 9;
    EcorePackageImpl.EOBJECT___EGET__FEATURE__RESOLVE = 10;
    EcorePackageImpl.EOBJECT___ESET__FEATURE__NEWVALUE = 11;
    EcorePackageImpl.EOBJECT___EISSET__FEATURE = 12;
    EcorePackageImpl.EOBJECT___EUNSET__FEATURE = 13;
    EcorePackageImpl.EOBJECT___EINVOKE__OPERATION__ARGUMENTS = 14;
    EcorePackageImpl.EOPERATION = 11;
    EcorePackageImpl.EOPERATION_FEATURE_COUNT = EcorePackageImpl.ETYPEDELEMENT_FEATURE_COUNT + 5;
    EcorePackageImpl.EOPERATION_OPERATION_COUNT = EcorePackageImpl.ETYPEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageImpl.EOPERATION_EANNOTATIONS = 0;
    EcorePackageImpl.EOPERATION_NAME = 1;
    EcorePackageImpl.EOPERATION_ORDERED = 2;
    EcorePackageImpl.EOPERATION_UNIQUE = 3;
    EcorePackageImpl.EOPERATION_LOWERBOUND = 4;
    EcorePackageImpl.EOPERATION_UPPERBOUND = 5;
    EcorePackageImpl.EOPERATION_MANY = 6;
    EcorePackageImpl.EOPERATION_REQUIRED = 7;
    EcorePackageImpl.EOPERATION_ETYPE = 8;
    EcorePackageImpl.EOPERATION_EGENERICTYPE = 9;
    EcorePackageImpl.EOPERATION_ECONTAININGCLASS = 10;
    EcorePackageImpl.EOPERATION_ETYPEPARAMETERS = 11;
    EcorePackageImpl.EOPERATION_EPARAMETERS = 12;
    EcorePackageImpl.EOPERATION_EEXCEPTIONS = 13;
    EcorePackageImpl.EOPERATION_EGENERICEXCEPTIONS = 14;
    EcorePackageImpl.EOPERATION___GETOPERATIONID = 0;
    EcorePackageImpl.EOPERATION___ISOVERRIDEOF__SOMEOPERATION = 1;
    EcorePackageImpl.EPACKAGE = 12;
    EcorePackageImpl.EPACKAGE_FEATURE_COUNT = EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT + 6;
    EcorePackageImpl.EPACKAGE_OPERATION_COUNT = EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT + 1;
    EcorePackageImpl.EPACKAGE_EANNOTATIONS = 0;
    EcorePackageImpl.EPACKAGE_NAME = 1;
    EcorePackageImpl.EPACKAGE_NSURI = 2;
    EcorePackageImpl.EPACKAGE_NSPREFIX = 3;
    EcorePackageImpl.EPACKAGE_EFACTORYINSTANCE = 4;
    EcorePackageImpl.EPACKAGE_ECLASSIFIERS = 5;
    EcorePackageImpl.EPACKAGE_ESUBPACKAGES = 6;
    EcorePackageImpl.EPACKAGE_ESUPERPACKAGE = 7;
    EcorePackageImpl.EPACKAGE___GETECLASSIFIER__NAME = 0;
    EcorePackageImpl.EPARAMETER = 13;
    EcorePackageImpl.EPARAMETER_FEATURE_COUNT = EcorePackageImpl.ETYPEDELEMENT_FEATURE_COUNT + 1;
    EcorePackageImpl.EPARAMETER_OPERATION_COUNT = EcorePackageImpl.ETYPEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.EPARAMETER_EANNOTATIONS = 0;
    EcorePackageImpl.EPARAMETER_NAME = 1;
    EcorePackageImpl.EPARAMETER_ORDERED = 2;
    EcorePackageImpl.EPARAMETER_UNIQUE = 3;
    EcorePackageImpl.EPARAMETER_LOWERBOUND = 4;
    EcorePackageImpl.EPARAMETER_UPPERBOUND = 5;
    EcorePackageImpl.EPARAMETER_MANY = 6;
    EcorePackageImpl.EPARAMETER_REQUIRED = 7;
    EcorePackageImpl.EPARAMETER_ETYPE = 8;
    EcorePackageImpl.EPARAMETER_EGENERICTYPE = 9;
    EcorePackageImpl.EPARAMETER_EOPERATION = 10;
    EcorePackageImpl.EREFERENCE = 14;
    EcorePackageImpl.EREFERENCE_FEATURE_COUNT = EcorePackageImpl.ESTRUCTURALFEATURE_FEATURE_COUNT + 6;
    EcorePackageImpl.EREFERENCE_OPERATION_COUNT = EcorePackageImpl.ESTRUCTURALFEATURE_OPERATION_COUNT + 0;
    EcorePackageImpl.EREFERENCE_EANNOTATIONS = 0;
    EcorePackageImpl.EREFERENCE_NAME = 1;
    EcorePackageImpl.EREFERENCE_ORDERED = 2;
    EcorePackageImpl.EREFERENCE_UNIQUE = 3;
    EcorePackageImpl.EREFERENCE_LOWERBOUND = 4;
    EcorePackageImpl.EREFERENCE_UPPERBOUND = 5;
    EcorePackageImpl.EREFERENCE_MANY = 6;
    EcorePackageImpl.EREFERENCE_REQUIRED = 7;
    EcorePackageImpl.EREFERENCE_ETYPE = 8;
    EcorePackageImpl.EREFERENCE_EGENERICTYPE = 9;
    EcorePackageImpl.EREFERENCE_CHANGEABLE = 10;
    EcorePackageImpl.EREFERENCE_VOLATILE = 11;
    EcorePackageImpl.EREFERENCE_TRANSIENT = 12;
    EcorePackageImpl.EREFERENCE_DEFAULTVALUELITERAL = 13;
    EcorePackageImpl.EREFERENCE_DEFAULTVALUE = 14;
    EcorePackageImpl.EREFERENCE_UNSETTABLE = 15;
    EcorePackageImpl.EREFERENCE_DERIVED = 16;
    EcorePackageImpl.EREFERENCE_ECONTAININGCLASS = 17;
    EcorePackageImpl.EREFERENCE_CONTAINMENT = 18;
    EcorePackageImpl.EREFERENCE_CONTAINER = 19;
    EcorePackageImpl.EREFERENCE_RESOLVEPROXIES = 20;
    EcorePackageImpl.EREFERENCE_EOPPOSITE = 21;
    EcorePackageImpl.EREFERENCE_EREFERENCETYPE = 22;
    EcorePackageImpl.EREFERENCE_EKEYS = 23;
    EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY = 48;
    EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_FEATURE_COUNT = 2;
    EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_OPERATION_COUNT = 0;
    EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_KEY = 0;
    EcorePackageImpl.ESTRINGTOSTRINGMAPENTRY_VALUE = 1;
    EcorePackageImpl.EGENERICTYPE = 50;
    EcorePackageImpl.EGENERICTYPE_FEATURE_COUNT = 6;
    EcorePackageImpl.EGENERICTYPE_OPERATION_COUNT = 1;
    EcorePackageImpl.EGENERICTYPE_EUPPERBOUND = 0;
    EcorePackageImpl.EGENERICTYPE_ETYPEARGUMENTS = 1;
    EcorePackageImpl.EGENERICTYPE_ERAWTYPE = 2;
    EcorePackageImpl.EGENERICTYPE_ELOWERBOUND = 3;
    EcorePackageImpl.EGENERICTYPE_ETYPEPARAMETER = 4;
    EcorePackageImpl.EGENERICTYPE_ECLASSIFIER = 5;
    EcorePackageImpl.EGENERICTYPE___ISINSTANCE__OBJECT = 0;
    EcorePackageImpl.ETYPEPARAMETER = 51;
    EcorePackageImpl.ETYPEPARAMETER_FEATURE_COUNT = EcorePackageImpl.ENAMEDELEMENT_FEATURE_COUNT + 1;
    EcorePackageImpl.ETYPEPARAMETER_OPERATION_COUNT = EcorePackageImpl.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageImpl.ETYPEPARAMETER_EANNOTATIONS = 0;
    EcorePackageImpl.ETYPEPARAMETER_NAME = 1;
    EcorePackageImpl.ETYPEPARAMETER_EBOUNDS = 2;
    EcorePackageImpl.EBIGDECIMAL = 17;
    EcorePackageImpl.EBIGINTEGER = 18;
    EcorePackageImpl.EBOOLEAN = 19;
    EcorePackageImpl.EBOOLEANOBJECT = 20;
    EcorePackageImpl.EBYTE = 21;
    EcorePackageImpl.EBYTEARRAY = 22;
    EcorePackageImpl.EBYTEOBJECT = 23;
    EcorePackageImpl.ECHAR = 24;
    EcorePackageImpl.ECHARACTEROBJECT = 25;
    EcorePackageImpl.EDATE = 26;
    EcorePackageImpl.EDIAGNOSTICCHAIN = 27;
    EcorePackageImpl.EDOUBLE = 28;
    EcorePackageImpl.EDOUBLEOBJECT = 29;
    EcorePackageImpl.EELIST = 30;
    EcorePackageImpl.EENUMERATOR = 31;
    EcorePackageImpl.EFEATUREMAP = 32;
    EcorePackageImpl.EFEATUREMAPENTRY = 33;
    EcorePackageImpl.EFLOAT = 34;
    EcorePackageImpl.EFLOATOBJECT = 35;
    EcorePackageImpl.EINT = 36;
    EcorePackageImpl.EINTEGEROBJECT = 37;
    EcorePackageImpl.EJAVACLASS = 38;
    EcorePackageImpl.EJAVAOBJECT = 39;
    EcorePackageImpl.ELONG = 40;
    EcorePackageImpl.ELONGOBJECT = 41;
    EcorePackageImpl.EMAP = 42;
    EcorePackageImpl.ERESOURCE = 43;
    EcorePackageImpl.ERESOURCESET = 44;
    EcorePackageImpl.ESHORT = 45;
    EcorePackageImpl.ESHORTOBJECT = 46;
    EcorePackageImpl.ESTRING = 47;
    EcorePackageImpl.ETREEITERATOR = 49;
    EcorePackageImpl.EINVOCATIONTARGETEXCEPTION = 52;
    /*Important: Call init() AFTER metaobject ids have been assigned.*/
    EcorePackageImpl.eINSTANCE = EcorePackageImpl.init();
    return EcorePackageImpl;
}(_EPackageImpl__WEBPACK_IMPORTED_MODULE_15__["EPackageImpl"]));



/***/ }),

/***/ "./node_modules/crossecore/src/EcorePackageLiterals.ts":
/*!*************************************************************!*\
  !*** ./node_modules/crossecore/src/EcorePackageLiterals.ts ***!
  \*************************************************************/
/*! exports provided: EcorePackageLiterals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EcorePackageLiterals", function() { return EcorePackageLiterals; });
var EcorePackageLiterals = /** @class */ (function () {
    function EcorePackageLiterals() {
    }
    EcorePackageLiterals.EMODELELEMENT = 8;
    EcorePackageLiterals.EMODELELEMENT_FEATURE_COUNT = 1;
    EcorePackageLiterals.EMODELELEMENT_OPERATION_COUNT = 1;
    EcorePackageLiterals.EMODELELEMENT_EANNOTATIONS = 0;
    EcorePackageLiterals.ENAMEDELEMENT = 9;
    EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT = EcorePackageLiterals.EMODELELEMENT_FEATURE_COUNT + 1;
    EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT = EcorePackageLiterals.EMODELELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.ENAMEDELEMENT_EANNOTATIONS = 0;
    EcorePackageLiterals.ENAMEDELEMENT_NAME = 1;
    EcorePackageLiterals.ETYPEDELEMENT = 16;
    EcorePackageLiterals.ETYPEDELEMENT_FEATURE_COUNT = EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT + 8;
    EcorePackageLiterals.ETYPEDELEMENT_OPERATION_COUNT = EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.ETYPEDELEMENT_EANNOTATIONS = 0;
    EcorePackageLiterals.ETYPEDELEMENT_NAME = 1;
    EcorePackageLiterals.ETYPEDELEMENT_ORDERED = 2;
    EcorePackageLiterals.ETYPEDELEMENT_UNIQUE = 3;
    EcorePackageLiterals.ETYPEDELEMENT_LOWERBOUND = 4;
    EcorePackageLiterals.ETYPEDELEMENT_UPPERBOUND = 5;
    EcorePackageLiterals.ETYPEDELEMENT_MANY = 6;
    EcorePackageLiterals.ETYPEDELEMENT_REQUIRED = 7;
    EcorePackageLiterals.ETYPEDELEMENT_ETYPE = 8;
    EcorePackageLiterals.ETYPEDELEMENT_EGENERICTYPE = 9;
    EcorePackageLiterals.ESTRUCTURALFEATURE = 15;
    EcorePackageLiterals.ESTRUCTURALFEATURE_FEATURE_COUNT = EcorePackageLiterals.ETYPEDELEMENT_FEATURE_COUNT + 8;
    EcorePackageLiterals.ESTRUCTURALFEATURE_OPERATION_COUNT = EcorePackageLiterals.ETYPEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageLiterals.ESTRUCTURALFEATURE_EANNOTATIONS = 0;
    EcorePackageLiterals.ESTRUCTURALFEATURE_NAME = 1;
    EcorePackageLiterals.ESTRUCTURALFEATURE_ORDERED = 2;
    EcorePackageLiterals.ESTRUCTURALFEATURE_UNIQUE = 3;
    EcorePackageLiterals.ESTRUCTURALFEATURE_LOWERBOUND = 4;
    EcorePackageLiterals.ESTRUCTURALFEATURE_UPPERBOUND = 5;
    EcorePackageLiterals.ESTRUCTURALFEATURE_MANY = 6;
    EcorePackageLiterals.ESTRUCTURALFEATURE_REQUIRED = 7;
    EcorePackageLiterals.ESTRUCTURALFEATURE_ETYPE = 8;
    EcorePackageLiterals.ESTRUCTURALFEATURE_EGENERICTYPE = 9;
    EcorePackageLiterals.ESTRUCTURALFEATURE_CHANGEABLE = 10;
    EcorePackageLiterals.ESTRUCTURALFEATURE_VOLATILE = 11;
    EcorePackageLiterals.ESTRUCTURALFEATURE_TRANSIENT = 12;
    EcorePackageLiterals.ESTRUCTURALFEATURE_DEFAULTVALUELITERAL = 13;
    EcorePackageLiterals.ESTRUCTURALFEATURE_DEFAULTVALUE = 14;
    EcorePackageLiterals.ESTRUCTURALFEATURE_UNSETTABLE = 15;
    EcorePackageLiterals.ESTRUCTURALFEATURE_DERIVED = 16;
    EcorePackageLiterals.ESTRUCTURALFEATURE_ECONTAININGCLASS = 17;
    EcorePackageLiterals.EATTRIBUTE = 0;
    EcorePackageLiterals.EATTRIBUTE_FEATURE_COUNT = EcorePackageLiterals.ESTRUCTURALFEATURE_FEATURE_COUNT + 2;
    EcorePackageLiterals.EATTRIBUTE_OPERATION_COUNT = EcorePackageLiterals.ESTRUCTURALFEATURE_OPERATION_COUNT + 0;
    EcorePackageLiterals.EATTRIBUTE_EANNOTATIONS = 0;
    EcorePackageLiterals.EATTRIBUTE_NAME = 1;
    EcorePackageLiterals.EATTRIBUTE_ORDERED = 2;
    EcorePackageLiterals.EATTRIBUTE_UNIQUE = 3;
    EcorePackageLiterals.EATTRIBUTE_LOWERBOUND = 4;
    EcorePackageLiterals.EATTRIBUTE_UPPERBOUND = 5;
    EcorePackageLiterals.EATTRIBUTE_MANY = 6;
    EcorePackageLiterals.EATTRIBUTE_REQUIRED = 7;
    EcorePackageLiterals.EATTRIBUTE_ETYPE = 8;
    EcorePackageLiterals.EATTRIBUTE_EGENERICTYPE = 9;
    EcorePackageLiterals.EATTRIBUTE_CHANGEABLE = 10;
    EcorePackageLiterals.EATTRIBUTE_VOLATILE = 11;
    EcorePackageLiterals.EATTRIBUTE_TRANSIENT = 12;
    EcorePackageLiterals.EATTRIBUTE_DEFAULTVALUELITERAL = 13;
    EcorePackageLiterals.EATTRIBUTE_DEFAULTVALUE = 14;
    EcorePackageLiterals.EATTRIBUTE_UNSETTABLE = 15;
    EcorePackageLiterals.EATTRIBUTE_DERIVED = 16;
    EcorePackageLiterals.EATTRIBUTE_ECONTAININGCLASS = 17;
    EcorePackageLiterals.EATTRIBUTE_ID = 18;
    EcorePackageLiterals.EATTRIBUTE_EATTRIBUTETYPE = 19;
    EcorePackageLiterals.EANNOTATION = 1;
    EcorePackageLiterals.EANNOTATION_FEATURE_COUNT = EcorePackageLiterals.EMODELELEMENT_FEATURE_COUNT + 5;
    EcorePackageLiterals.EANNOTATION_OPERATION_COUNT = EcorePackageLiterals.EMODELELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.EANNOTATION_EANNOTATIONS = 0;
    EcorePackageLiterals.EANNOTATION_SOURCE = 1;
    EcorePackageLiterals.EANNOTATION_DETAILS = 2;
    EcorePackageLiterals.EANNOTATION_EMODELELEMENT = 3;
    EcorePackageLiterals.EANNOTATION_CONTENTS = 4;
    EcorePackageLiterals.EANNOTATION_REFERENCES = 5;
    EcorePackageLiterals.ECLASSIFIER = 3;
    EcorePackageLiterals.ECLASSIFIER_FEATURE_COUNT = EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT + 6;
    EcorePackageLiterals.ECLASSIFIER_OPERATION_COUNT = EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageLiterals.ECLASSIFIER_EANNOTATIONS = 0;
    EcorePackageLiterals.ECLASSIFIER_NAME = 1;
    EcorePackageLiterals.ECLASSIFIER_INSTANCECLASSNAME = 2;
    EcorePackageLiterals.ECLASSIFIER_INSTANCECLASS = 3;
    EcorePackageLiterals.ECLASSIFIER_DEFAULTVALUE = 4;
    EcorePackageLiterals.ECLASSIFIER_INSTANCETYPENAME = 5;
    EcorePackageLiterals.ECLASSIFIER_EPACKAGE = 6;
    EcorePackageLiterals.ECLASSIFIER_ETYPEPARAMETERS = 7;
    EcorePackageLiterals.ECLASS = 2;
    EcorePackageLiterals.ECLASS_FEATURE_COUNT = EcorePackageLiterals.ECLASSIFIER_FEATURE_COUNT + 16;
    EcorePackageLiterals.ECLASS_OPERATION_COUNT = EcorePackageLiterals.ECLASSIFIER_OPERATION_COUNT + 10;
    EcorePackageLiterals.ECLASS_EANNOTATIONS = 0;
    EcorePackageLiterals.ECLASS_NAME = 1;
    EcorePackageLiterals.ECLASS_INSTANCECLASSNAME = 2;
    EcorePackageLiterals.ECLASS_INSTANCECLASS = 3;
    EcorePackageLiterals.ECLASS_DEFAULTVALUE = 4;
    EcorePackageLiterals.ECLASS_INSTANCETYPENAME = 5;
    EcorePackageLiterals.ECLASS_EPACKAGE = 6;
    EcorePackageLiterals.ECLASS_ETYPEPARAMETERS = 7;
    EcorePackageLiterals.ECLASS_ABSTRACT = 8;
    EcorePackageLiterals.ECLASS_INTERFACE = 9;
    EcorePackageLiterals.ECLASS_ESUPERTYPES = 10;
    EcorePackageLiterals.ECLASS_EOPERATIONS = 11;
    EcorePackageLiterals.ECLASS_EALLATTRIBUTES = 12;
    EcorePackageLiterals.ECLASS_EALLREFERENCES = 13;
    EcorePackageLiterals.ECLASS_EREFERENCES = 14;
    EcorePackageLiterals.ECLASS_EATTRIBUTES = 15;
    EcorePackageLiterals.ECLASS_EALLCONTAINMENTS = 16;
    EcorePackageLiterals.ECLASS_EALLOPERATIONS = 17;
    EcorePackageLiterals.ECLASS_EALLSTRUCTURALFEATURES = 18;
    EcorePackageLiterals.ECLASS_EALLSUPERTYPES = 19;
    EcorePackageLiterals.ECLASS_EIDATTRIBUTE = 20;
    EcorePackageLiterals.ECLASS_ESTRUCTURALFEATURES = 21;
    EcorePackageLiterals.ECLASS_EGENERICSUPERTYPES = 22;
    EcorePackageLiterals.ECLASS_EALLGENERICSUPERTYPES = 23;
    EcorePackageLiterals.EDATATYPE = 4;
    EcorePackageLiterals.EDATATYPE_FEATURE_COUNT = EcorePackageLiterals.ECLASSIFIER_FEATURE_COUNT + 1;
    EcorePackageLiterals.EDATATYPE_OPERATION_COUNT = EcorePackageLiterals.ECLASSIFIER_OPERATION_COUNT + 0;
    EcorePackageLiterals.EDATATYPE_EANNOTATIONS = 0;
    EcorePackageLiterals.EDATATYPE_NAME = 1;
    EcorePackageLiterals.EDATATYPE_INSTANCECLASSNAME = 2;
    EcorePackageLiterals.EDATATYPE_INSTANCECLASS = 3;
    EcorePackageLiterals.EDATATYPE_DEFAULTVALUE = 4;
    EcorePackageLiterals.EDATATYPE_INSTANCETYPENAME = 5;
    EcorePackageLiterals.EDATATYPE_EPACKAGE = 6;
    EcorePackageLiterals.EDATATYPE_ETYPEPARAMETERS = 7;
    EcorePackageLiterals.EDATATYPE_SERIALIZABLE = 8;
    EcorePackageLiterals.EENUM = 5;
    EcorePackageLiterals.EENUM_FEATURE_COUNT = EcorePackageLiterals.EDATATYPE_FEATURE_COUNT + 1;
    EcorePackageLiterals.EENUM_OPERATION_COUNT = EcorePackageLiterals.EDATATYPE_OPERATION_COUNT + 3;
    EcorePackageLiterals.EENUM_EANNOTATIONS = 0;
    EcorePackageLiterals.EENUM_NAME = 1;
    EcorePackageLiterals.EENUM_INSTANCECLASSNAME = 2;
    EcorePackageLiterals.EENUM_INSTANCECLASS = 3;
    EcorePackageLiterals.EENUM_DEFAULTVALUE = 4;
    EcorePackageLiterals.EENUM_INSTANCETYPENAME = 5;
    EcorePackageLiterals.EENUM_EPACKAGE = 6;
    EcorePackageLiterals.EENUM_ETYPEPARAMETERS = 7;
    EcorePackageLiterals.EENUM_SERIALIZABLE = 8;
    EcorePackageLiterals.EENUM_ELITERALS = 9;
    EcorePackageLiterals.EENUMLITERAL = 6;
    EcorePackageLiterals.EENUMLITERAL_FEATURE_COUNT = EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT + 4;
    EcorePackageLiterals.EENUMLITERAL_OPERATION_COUNT = EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.EENUMLITERAL_EANNOTATIONS = 0;
    EcorePackageLiterals.EENUMLITERAL_NAME = 1;
    EcorePackageLiterals.EENUMLITERAL_VALUE = 2;
    EcorePackageLiterals.EENUMLITERAL_INSTANCE = 3;
    EcorePackageLiterals.EENUMLITERAL_LITERAL = 4;
    EcorePackageLiterals.EENUMLITERAL_EENUM = 5;
    EcorePackageLiterals.EFACTORY = 7;
    EcorePackageLiterals.EFACTORY_FEATURE_COUNT = EcorePackageLiterals.EMODELELEMENT_FEATURE_COUNT + 1;
    EcorePackageLiterals.EFACTORY_OPERATION_COUNT = EcorePackageLiterals.EMODELELEMENT_OPERATION_COUNT + 3;
    EcorePackageLiterals.EFACTORY_EANNOTATIONS = 0;
    EcorePackageLiterals.EFACTORY_EPACKAGE = 1;
    EcorePackageLiterals.EOBJECT = 10;
    EcorePackageLiterals.EOBJECT_FEATURE_COUNT = 0;
    EcorePackageLiterals.EOBJECT_OPERATION_COUNT = 15;
    EcorePackageLiterals.EOPERATION = 11;
    EcorePackageLiterals.EOPERATION_FEATURE_COUNT = EcorePackageLiterals.ETYPEDELEMENT_FEATURE_COUNT + 5;
    EcorePackageLiterals.EOPERATION_OPERATION_COUNT = EcorePackageLiterals.ETYPEDELEMENT_OPERATION_COUNT + 2;
    EcorePackageLiterals.EOPERATION_EANNOTATIONS = 0;
    EcorePackageLiterals.EOPERATION_NAME = 1;
    EcorePackageLiterals.EOPERATION_ORDERED = 2;
    EcorePackageLiterals.EOPERATION_UNIQUE = 3;
    EcorePackageLiterals.EOPERATION_LOWERBOUND = 4;
    EcorePackageLiterals.EOPERATION_UPPERBOUND = 5;
    EcorePackageLiterals.EOPERATION_MANY = 6;
    EcorePackageLiterals.EOPERATION_REQUIRED = 7;
    EcorePackageLiterals.EOPERATION_ETYPE = 8;
    EcorePackageLiterals.EOPERATION_EGENERICTYPE = 9;
    EcorePackageLiterals.EOPERATION_ECONTAININGCLASS = 10;
    EcorePackageLiterals.EOPERATION_ETYPEPARAMETERS = 11;
    EcorePackageLiterals.EOPERATION_EPARAMETERS = 12;
    EcorePackageLiterals.EOPERATION_EEXCEPTIONS = 13;
    EcorePackageLiterals.EOPERATION_EGENERICEXCEPTIONS = 14;
    EcorePackageLiterals.EPACKAGE = 12;
    EcorePackageLiterals.EPACKAGE_FEATURE_COUNT = EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT + 6;
    EcorePackageLiterals.EPACKAGE_OPERATION_COUNT = EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT + 1;
    EcorePackageLiterals.EPACKAGE_EANNOTATIONS = 0;
    EcorePackageLiterals.EPACKAGE_NAME = 1;
    EcorePackageLiterals.EPACKAGE_NSURI = 2;
    EcorePackageLiterals.EPACKAGE_NSPREFIX = 3;
    EcorePackageLiterals.EPACKAGE_EFACTORYINSTANCE = 4;
    EcorePackageLiterals.EPACKAGE_ECLASSIFIERS = 5;
    EcorePackageLiterals.EPACKAGE_ESUBPACKAGES = 6;
    EcorePackageLiterals.EPACKAGE_ESUPERPACKAGE = 7;
    EcorePackageLiterals.EPARAMETER = 13;
    EcorePackageLiterals.EPARAMETER_FEATURE_COUNT = EcorePackageLiterals.ETYPEDELEMENT_FEATURE_COUNT + 1;
    EcorePackageLiterals.EPARAMETER_OPERATION_COUNT = EcorePackageLiterals.ETYPEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.EPARAMETER_EANNOTATIONS = 0;
    EcorePackageLiterals.EPARAMETER_NAME = 1;
    EcorePackageLiterals.EPARAMETER_ORDERED = 2;
    EcorePackageLiterals.EPARAMETER_UNIQUE = 3;
    EcorePackageLiterals.EPARAMETER_LOWERBOUND = 4;
    EcorePackageLiterals.EPARAMETER_UPPERBOUND = 5;
    EcorePackageLiterals.EPARAMETER_MANY = 6;
    EcorePackageLiterals.EPARAMETER_REQUIRED = 7;
    EcorePackageLiterals.EPARAMETER_ETYPE = 8;
    EcorePackageLiterals.EPARAMETER_EGENERICTYPE = 9;
    EcorePackageLiterals.EPARAMETER_EOPERATION = 10;
    EcorePackageLiterals.EREFERENCE = 14;
    EcorePackageLiterals.EREFERENCE_FEATURE_COUNT = EcorePackageLiterals.ESTRUCTURALFEATURE_FEATURE_COUNT + 6;
    EcorePackageLiterals.EREFERENCE_OPERATION_COUNT = EcorePackageLiterals.ESTRUCTURALFEATURE_OPERATION_COUNT + 0;
    EcorePackageLiterals.EREFERENCE_EANNOTATIONS = 0;
    EcorePackageLiterals.EREFERENCE_NAME = 1;
    EcorePackageLiterals.EREFERENCE_ORDERED = 2;
    EcorePackageLiterals.EREFERENCE_UNIQUE = 3;
    EcorePackageLiterals.EREFERENCE_LOWERBOUND = 4;
    EcorePackageLiterals.EREFERENCE_UPPERBOUND = 5;
    EcorePackageLiterals.EREFERENCE_MANY = 6;
    EcorePackageLiterals.EREFERENCE_REQUIRED = 7;
    EcorePackageLiterals.EREFERENCE_ETYPE = 8;
    EcorePackageLiterals.EREFERENCE_EGENERICTYPE = 9;
    EcorePackageLiterals.EREFERENCE_CHANGEABLE = 10;
    EcorePackageLiterals.EREFERENCE_VOLATILE = 11;
    EcorePackageLiterals.EREFERENCE_TRANSIENT = 12;
    EcorePackageLiterals.EREFERENCE_DEFAULTVALUELITERAL = 13;
    EcorePackageLiterals.EREFERENCE_DEFAULTVALUE = 14;
    EcorePackageLiterals.EREFERENCE_UNSETTABLE = 15;
    EcorePackageLiterals.EREFERENCE_DERIVED = 16;
    EcorePackageLiterals.EREFERENCE_ECONTAININGCLASS = 17;
    EcorePackageLiterals.EREFERENCE_CONTAINMENT = 18;
    EcorePackageLiterals.EREFERENCE_CONTAINER = 19;
    EcorePackageLiterals.EREFERENCE_RESOLVEPROXIES = 20;
    EcorePackageLiterals.EREFERENCE_EOPPOSITE = 21;
    EcorePackageLiterals.EREFERENCE_EREFERENCETYPE = 22;
    EcorePackageLiterals.EREFERENCE_EKEYS = 23;
    EcorePackageLiterals.ESTRINGTOSTRINGMAPENTRY = 48;
    EcorePackageLiterals.ESTRINGTOSTRINGMAPENTRY_FEATURE_COUNT = 2;
    EcorePackageLiterals.ESTRINGTOSTRINGMAPENTRY_OPERATION_COUNT = 0;
    EcorePackageLiterals.ESTRINGTOSTRINGMAPENTRY_KEY = 0;
    EcorePackageLiterals.ESTRINGTOSTRINGMAPENTRY_VALUE = 1;
    EcorePackageLiterals.EGENERICTYPE = 50;
    EcorePackageLiterals.EGENERICTYPE_FEATURE_COUNT = 6;
    EcorePackageLiterals.EGENERICTYPE_OPERATION_COUNT = 1;
    EcorePackageLiterals.EGENERICTYPE_EUPPERBOUND = 0;
    EcorePackageLiterals.EGENERICTYPE_ETYPEARGUMENTS = 1;
    EcorePackageLiterals.EGENERICTYPE_ERAWTYPE = 2;
    EcorePackageLiterals.EGENERICTYPE_ELOWERBOUND = 3;
    EcorePackageLiterals.EGENERICTYPE_ETYPEPARAMETER = 4;
    EcorePackageLiterals.EGENERICTYPE_ECLASSIFIER = 5;
    EcorePackageLiterals.ETYPEPARAMETER = 51;
    EcorePackageLiterals.ETYPEPARAMETER_FEATURE_COUNT = EcorePackageLiterals.ENAMEDELEMENT_FEATURE_COUNT + 1;
    EcorePackageLiterals.ETYPEPARAMETER_OPERATION_COUNT = EcorePackageLiterals.ENAMEDELEMENT_OPERATION_COUNT + 0;
    EcorePackageLiterals.ETYPEPARAMETER_EANNOTATIONS = 0;
    EcorePackageLiterals.ETYPEPARAMETER_NAME = 1;
    EcorePackageLiterals.ETYPEPARAMETER_EBOUNDS = 2;
    EcorePackageLiterals.EBIGDECIMAL = 17;
    EcorePackageLiterals.EBIGINTEGER = 18;
    EcorePackageLiterals.EBOOLEAN = 19;
    EcorePackageLiterals.EBOOLEANOBJECT = 20;
    EcorePackageLiterals.EBYTE = 21;
    EcorePackageLiterals.EBYTEARRAY = 22;
    EcorePackageLiterals.EBYTEOBJECT = 23;
    EcorePackageLiterals.ECHAR = 24;
    EcorePackageLiterals.ECHARACTEROBJECT = 25;
    EcorePackageLiterals.EDATE = 26;
    EcorePackageLiterals.EDIAGNOSTICCHAIN = 27;
    EcorePackageLiterals.EDOUBLE = 28;
    EcorePackageLiterals.EDOUBLEOBJECT = 29;
    EcorePackageLiterals.EELIST = 30;
    EcorePackageLiterals.EENUMERATOR = 31;
    EcorePackageLiterals.EFEATUREMAP = 32;
    EcorePackageLiterals.EFEATUREMAPENTRY = 33;
    EcorePackageLiterals.EFLOAT = 34;
    EcorePackageLiterals.EFLOATOBJECT = 35;
    EcorePackageLiterals.EINT = 36;
    EcorePackageLiterals.EINTEGEROBJECT = 37;
    EcorePackageLiterals.EJAVACLASS = 38;
    EcorePackageLiterals.EJAVAOBJECT = 39;
    EcorePackageLiterals.ELONG = 40;
    EcorePackageLiterals.ELONGOBJECT = 41;
    EcorePackageLiterals.EMAP = 42;
    EcorePackageLiterals.ERESOURCE = 43;
    EcorePackageLiterals.ERESOURCESET = 44;
    EcorePackageLiterals.ESHORT = 45;
    EcorePackageLiterals.ESHORTOBJECT = 46;
    EcorePackageLiterals.ESTRING = 47;
    EcorePackageLiterals.ETREEITERATOR = 49;
    EcorePackageLiterals.EINVOCATIONTARGETEXCEPTION = 52;
    return EcorePackageLiterals;
}());



/***/ }),

/***/ "./node_modules/crossecore/src/NotificationImpl.ts":
/*!*********************************************************!*\
  !*** ./node_modules/crossecore/src/NotificationImpl.ts ***!
  \*********************************************************/
/*! exports provided: NotificationImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationImpl", function() { return NotificationImpl; });
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var NotificationImpl = /** @class */ (function () {
    /*
     public NotificationImpl(int eventType, object oldValue, object newValue): this(eventType, oldValue, newValue, NO_INDEX)
     {

     }

     public NotificationImpl(int eventType, object oldValue, object newValue, bool isSetChange): this(eventType, oldValue, newValue, isSetChange ? IS_SET_CHANGE_INDEX : NO_INDEX)
     {

     }
     */
    function NotificationImpl(eventType, oldValue, newValue, position, wasSet) {
        var _this = this;
        /**
         * !!! NO CONSTRUCTOR OVERLOADING ALLOWED IN TYPESCRIPT !!!
         */
        /*
        public constructor(eventType:number, oldValue:any, newValue:any, position:number)
        {

            this.eventType = eventType;
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.position = position;
            this.primitiveType = NotificationImpl.PRIMITIVE_TYPE_OBJECT;

        }
        */
        this.add = function (notification) {
            return _this.next.add(notification);
        };
        this.dispatch = function () {
            var notifier = _this.getNotifier();
            if (notifier != null && _this.getEventType() != -1) {
                notifier.eNotify(_this);
            }
            if (_this.next != null) {
                _this.next.dispatch();
            }
        };
        this.eventType = eventType;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.position = position;
        this.primitiveType = NotificationImpl.PRIMITIVE_TYPE_OBJECT;
        if (wasSet != undefined && !wasSet) {
            this.position = NotificationImpl.IS_SET_CHANGE_INDEX - position - 1;
        }
    }
    NotificationImpl.prototype.getNotifier = function () {
        return null;
    };
    NotificationImpl.prototype.getEventType = function () {
        return this.eventType;
    };
    NotificationImpl.prototype.getNewValue = function () {
        return this.newValue;
    };
    NotificationImpl.SET = 1;
    NotificationImpl.UNSET = 2;
    NotificationImpl.ADD = 2;
    NotificationImpl.REMOVE = 3;
    NotificationImpl.ADD_MANY = 5;
    NotificationImpl.REMOVE_MANY = 6;
    NotificationImpl.MOVE = 7;
    NotificationImpl.NO_INDEX = -1;
    NotificationImpl.IS_SET_CHANGE_INDEX = NotificationImpl.NO_INDEX - 1;
    NotificationImpl.NO_FEATURE_ID = -1;
    NotificationImpl.PRIMITIVE_TYPE_OBJECT = -1;
    return NotificationImpl;
}());



/***/ }),

/***/ "./node_modules/crossecore/src/OrderedSet.ts":
/*!***************************************************!*\
  !*** ./node_modules/crossecore/src/OrderedSet.ts ***!
  \***************************************************/
/*! exports provided: OrderedSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrderedSet", function() { return OrderedSet; });
/* harmony import */ var _AbstractCollection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCollection */ "./node_modules/crossecore/src/AbstractCollection.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var OrderedSet = /** @class */ (function (_super) {
    __extends(OrderedSet, _super);
    function OrderedSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isUnique = function () {
            return true;
        };
        _this.at = function (index) {
            return _this[index];
        };
        _this.select = function (lambda) {
            var result = new OrderedSet();
            _this.filter(lambda).forEach(function (element) { result.add(element); });
            return result;
        };
        _this.collect = function (lambda) {
            var result = new OrderedSet();
            for (var element in _this) {
                result.add(lambda.call(element));
            }
            return result;
        };
        _this.collect2 = function (lambda) {
            var result = new OrderedSet();
            for (var element in _this) {
                var e = lambda.call(element);
                for (var i = 0; i < e.size(); i++) {
                    var ee = e[i];
                    result.add(ee);
                }
            }
            return result;
        };
        return _this;
    }
    return OrderedSet;
}(_AbstractCollection__WEBPACK_IMPORTED_MODULE_0__["AbstractCollection"]));



/***/ }),

/***/ "./node_modules/crossecore/src/Set.ts":
/*!********************************************!*\
  !*** ./node_modules/crossecore/src/Set.ts ***!
  \********************************************/
/*! exports provided: Set */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Set", function() { return Set; });
/* harmony import */ var _AbstractCollection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCollection */ "./node_modules/crossecore/src/AbstractCollection.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg
 */

var Set = /** @class */ (function (_super) {
    __extends(Set, _super);
    function Set() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isUnique = function () {
            return true;
        };
        _this.select = function (lambda) {
            var result = new Set();
            _this.filter(lambda).forEach(function (element) {
                result.add(element);
            });
            return result;
        };
        _this.asSequence = function () {
            var result = new Set();
            for (var _i = 0, _a = _this; _i < _a.length; _i++) {
                var item = _a[_i];
                result.push(item);
            }
            return result;
        };
        return _this;
    }
    return Set;
}(_AbstractCollection__WEBPACK_IMPORTED_MODULE_0__["AbstractCollection"]));



/***/ }),

/***/ "./node_modules/crossecore/src/XmiResource.ts":
/*!****************************************************!*\
  !*** ./node_modules/crossecore/src/XmiResource.ts ***!
  \****************************************************/
/*! exports provided: XmiResource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XmiResource", function() { return XmiResource; });
/* harmony import */ var _EcorePackageImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EcorePackageImpl */ "./node_modules/crossecore/src/EcorePackageImpl.ts");
/* harmony import */ var _EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EcoreFactoryImpl */ "./node_modules/crossecore/src/EcoreFactoryImpl.ts");
/* harmony import */ var _EReferenceImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EReferenceImpl */ "./node_modules/crossecore/src/EReferenceImpl.ts");
/* harmony import */ var _EClassImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EClassImpl */ "./node_modules/crossecore/src/EClassImpl.ts");
/* harmony import */ var _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ENamedElementImpl */ "./node_modules/crossecore/src/ENamedElementImpl.ts");
/* harmony import */ var _EAttributeImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EAttributeImpl */ "./node_modules/crossecore/src/EAttributeImpl.ts");
/* harmony import */ var _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EDataTypeImpl */ "./node_modules/crossecore/src/EDataTypeImpl.ts");
/* CrossEcore is a cross-platform modeling framework that generates C#, TypeScript,
 * JavaScript, Swift code from Ecore models with embedded OCL (http://www.crossecore.org/).
 * The original Eclipse Modeling Framework is available at https://www.eclipse.org/modeling/emf/.
 *
 * contributor: Simon Schwichtenberg, Peter Digas
 */







var format = __webpack_require__(/*! xml-formatter */ "./node_modules/xml-formatter/index.js");
var XmiResource = /** @class */ (function () {
    function XmiResource(epackage, efactory, domParser) {
        var _this = this;
        this.factory = _EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_1__["EcoreFactoryImpl"].eINSTANCE;
        this.epackage = _EcorePackageImpl__WEBPACK_IMPORTED_MODULE_0__["EcorePackageImpl"].eINSTANCE; //TODO make dynamic
        this.error_occured = false;
        // für BA erstellt
        // HOW TO USE: übergebe alle relevanten EObjects als Array in die Funktion save -> wird zu einem XMI String serialisiert
        this.save = function (eobjects) {
            if (null == eobjects) {
                console.error("Error: no eobjects passed!");
                return "";
            }
            // Duplikate rausfiltern
            eobjects = _this.filterDuplicates(eobjects);
            if (!_this.validateMulitiplicities(eobjects)) {
                return "";
            }
            _this.doc = document.implementation.createDocument("", "", null);
            // wenn es nur ein EObject gibt, braucht man kein äußeres xmi:XMI
            if (eobjects.length > 1) {
                var outer = _this.doc.createElement("xmi:XMI");
                outer.setAttribute("xmi:version", "2.0");
                outer.setAttribute("xmlns:xmi", "http://www.omg.org/XMI");
                outer.setAttribute("xmlns:" + _this.epackage.name, _this.epackage.nsURI);
                _this.doc.appendChild(outer);
            }
            if (!_this.collectReferencesToSerialize(eobjects)) {
                return "";
            }
            for (var _i = 0, eobjects_1 = eobjects; _i < eobjects_1.length; _i++) {
                var eobject = eobjects_1[_i];
                _this.process_eobject(eobject, eobjects.length == 1);
            }
            if (1 == eobjects.length) {
                var eclass = eobjects[0].eClass();
                var name_1 = _this.epackage.name + ':' + eclass.name;
                _this.doc.getElementsByTagName(name_1)[0].setAttribute("xmi:version", "2.0");
                _this.doc.getElementsByTagName(name_1)[0].setAttribute("xmlns:xmi", "http://www.omg.org/XMI");
                _this.doc.getElementsByTagName(name_1)[0].setAttribute("xmlns:" + _this.epackage.name, _this.epackage.nsURI);
            }
            if (_this.error_occured) {
                return "";
            }
            var serializer = new XMLSerializer();
            var xmlStr = serializer.serializeToString(_this.doc);
            xmlStr = '<?xml version="1.0" encoding="ASCII"?>'.concat(xmlStr);
            xmlStr = xmlStr.trim();
            xmlStr = format(xmlStr, {
                collapseContent: true
            });
            // für Kompatibilität mit EMF
            var re = new RegExp(_this.epackage.name, 'g');
            xmlStr = xmlStr.replace(re, _this.epackage.nsPrefix);
            return xmlStr;
        };
        // für BA erstellt
        // damit nur Referenzen zu EObjects serialisiert werden, die auch selbst serialisiert werden
        this.collectReferencesToSerialize = function (eobjects) {
            var ret = true;
            for (var _i = 0, eobjects_2 = eobjects; _i < eobjects_2.length; _i++) {
                var eobject = eobjects_2[_i];
                // wenn dassele EObject mehrfach serialisiert werden soll oder auch nochmal in anderen
                // containments liegt, gebe falsch zurück
                var registered_eobject = _this.eobjectRegistry[eobject._uuid];
                if (registered_eobject !== undefined && registered_eobject != null) {
                    console.error("ERROR: TRYING TO SERIALIZE SAME EOBJECT MULTIPLE TIMES");
                    return false;
                }
                _this.eobjectRegistry[eobject._uuid] = eobject;
                var eclass = eobject.eClass();
                var references = eclass.eAllReferences;
                for (var _a = 0, references_1 = references; _a < references_1.length; _a++) {
                    var reference = references_1[_a];
                    if (reference.containment) {
                        if (reference.many) {
                            var contained_eobjects = eobject.eGet(reference);
                            var array_contained = [];
                            for (var _b = 0, contained_eobjects_1 = contained_eobjects; _b < contained_eobjects_1.length; _b++) {
                                var cont_eobject = contained_eobjects_1[_b];
                                array_contained.push(cont_eobject);
                            }
                            ret = ret && _this.collectReferencesToSerialize(array_contained);
                        }
                        else {
                            var contained_eobject = eobject.eGet(reference);
                            var array_contained = [];
                            array_contained.push(contained_eobject);
                            ret = ret && _this.collectReferencesToSerialize(array_contained);
                        }
                    }
                }
            }
            return ret;
        };
        // für BA erstellt
        this.process_eobject = function (eobject, only_one_eobject_to_serialize) {
            if (only_one_eobject_to_serialize === void 0) { only_one_eobject_to_serialize = false; }
            var eclass = eobject.eClass();
            var name = _this.epackage.name + ':' + eclass.name;
            var element = _this.doc.createElement(name);
            element.setAttribute("xmi:id", "" + eobject._uuid);
            var attributes = eclass.eAllAttributes;
            var references = eclass.eAllReferences;
            _this.addAttributes(eobject, attributes, element);
            var crossrefs = new Array();
            var containments = new Array();
            for (var _i = 0, references_2 = references; _i < references_2.length; _i++) {
                var reference = references_2[_i];
                if (reference.containment) {
                    containments.push(reference);
                }
                else {
                    crossrefs.push(reference);
                }
            }
            _this.addReferences(eobject, crossrefs, element);
            if (only_one_eobject_to_serialize) {
                _this.doc.appendChild(element);
            }
            else {
                _this.doc.getElementsByTagName("xmi:XMI")[0].appendChild(element);
            }
            for (var _a = 0, containments_1 = containments; _a < containments_1.length; _a++) {
                var ct = containments_1[_a];
                _this.process_containments(eobject, ct, element, ct.name);
            }
        };
        // für BA erstellt
        this.process_containments = function (parent_eobject, reference, element, name) {
            var child_eobjects = parent_eobject.eGet(reference);
            child_eobjects = _this.filterDuplicates(child_eobjects);
            for (var _i = 0, child_eobjects_1 = child_eobjects; _i < child_eobjects_1.length; _i++) {
                var eobject = child_eobjects_1[_i];
                var eclass = eobject.eClass();
                var attributes = eclass.eAllAttributes;
                var references = eclass.eAllReferences;
                var containment_element = _this.doc.createElement(name);
                containment_element.setAttribute("xmi:type", _this.epackage.name + ':' + eclass.name);
                containment_element.setAttribute("xmi:id", "" + eobject._uuid);
                _this.addAttributes(eobject, attributes, containment_element);
                var crossrefs = new Array();
                var containments = new Array();
                for (var _a = 0, references_3 = references; _a < references_3.length; _a++) {
                    var reference_1 = references_3[_a];
                    if (reference_1.containment) {
                        containments.push(reference_1);
                    }
                    else {
                        crossrefs.push(reference_1);
                    }
                }
                _this.addReferences(eobject, crossrefs, containment_element);
                element.appendChild(containment_element);
                // für jedes Containment, rufe rekursiv die Funktion auf
                for (var _b = 0, containments_2 = containments; _b < containments_2.length; _b++) {
                    var ct = containments_2[_b];
                    if (ct.containment) {
                        _this.process_containments(eobject, ct, containment_element, ct.name);
                    }
                }
            }
        };
        // für BA erstellt
        // fügt beim Serialisieren non-Containment Referenzen hinzu
        this.addReferences = function (eobject, crossrefs, element) {
            for (var _i = 0, crossrefs_1 = crossrefs; _i < crossrefs_1.length; _i++) {
                var cf = crossrefs_1[_i];
                var ecf = eobject.eGet(cf);
                if (cf != null && !cf.containment && !cf.derived && !cf.transient && ecf != cf.defaultValueLiteral) {
                    if (cf.many) {
                        var references = ecf;
                        var allref = "";
                        for (var _a = 0, references_4 = references; _a < references_4.length; _a++) {
                            var r = references_4[_a];
                            if (null == r) {
                                _this.error_occured = true;
                                continue;
                            }
                            // wenn EObject nicht serialisiert wird, auch Referenz nicht serialisieren
                            var registered_eobject = _this.eobjectRegistry[r._uuid];
                            if (undefined === registered_eobject || null == registered_eobject) {
                                _this.error_occured = true;
                                continue;
                            }
                            // Referenzen werden nicht mehrfach serialisiert
                            if (allref.includes(r._uuid + "")) {
                                continue;
                            }
                            allref += r._uuid + " ";
                        }
                        allref = allref.trim();
                        if ("" == allref) {
                            continue;
                        }
                        element.setAttribute(cf.name, allref);
                    }
                    else {
                        if (null == ecf) {
                            _this.error_occured = true;
                            continue;
                        }
                        // wenn EObject nicht serialisiert wird, auch Referenz nicht serialisieren
                        var registered_eobject = _this.eobjectRegistry[ecf._uuid];
                        if (undefined === registered_eobject || null == registered_eobject) {
                            _this.error_occured = true;
                            continue;
                        }
                        element.setAttribute(cf.name, "" + ecf._uuid);
                    }
                }
            }
        };
        // für BA erstellt
        this.addAttributes = function (eobject, attributes, element) {
            for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                var attribute = attributes_1[_i];
                var eattr = eobject.eGet(attribute);
                // Attributwert nicht Standardwert, da sonst unnötige Information serialisiert werden
                if (attribute != null && !attribute.derived && !attribute.transient
                    && eattr != null && eattr != attribute.defaultValueLiteral) {
                    if (attribute.many) {
                        for (var _a = 0, eattr_1 = eattr; _a < eattr_1.length; _a++) {
                            var single_attribute = eattr_1[_a];
                            var attr_elem = _this.doc.createElement(attribute.name);
                            if ("EChar" == attribute.eType.name) {
                                attr_elem.innerHTML = ("" + single_attribute).charCodeAt(0) + "";
                            }
                            else {
                                attr_elem.innerHTML = "" + single_attribute;
                            }
                            element.appendChild(attr_elem);
                        }
                    }
                    else {
                        if ("EChar" == attribute.eType.name) {
                            element.setAttribute(attribute.name, ("" + eattr).charCodeAt(0) + "");
                        }
                        else {
                            element.setAttribute(attribute.name, "" + eattr);
                        }
                    }
                }
            }
        };
        // modifiziert für BA
        // HOW TO USE: übergebe eine XMI und erhalte alle darin enthaltenen EObjects als Array zurück
        this.load = function (xml) {
            if ("" == xml) {
                console.error("ERROR: empty instance document");
                return null;
            }
            // beim parsen störenden Teil der XMI entfernen
            xml = xml.replace('<?xml version="1.0" encoding="ASCII"?>', '');
            var parser = _this.domParser;
            var xmlDoc = parser.parseFromString(xml, "text/xml");
            // ab hier BA Teil
            if (xmlDoc.getElementsByTagName("parsererror").length > 0) {
                console.error("Error while parsing Ecore instance document!");
                return null;
            }
            var eobjects = new Array();
            // wenn es nur ein EObject gibt, dann gibt es kein äußeres xmi:XMI
            if (0 == xmlDoc.getElementsByTagName("xmi:XMI").length) {
                _this.rootnode(xmlDoc.childNodes[0]);
                eobjects.push(_this.root);
            }
            else {
                for (var i = 0; xmlDoc.childNodes[0].childNodes[i] != null; i++) {
                    if ('#text' == xmlDoc.childNodes[0].childNodes[i].nodeName) {
                        continue;
                    }
                    else {
                        _this.rootnode(xmlDoc.childNodes[0].childNodes[i]);
                        eobjects.push(_this.root);
                    }
                }
            }
            // lateResolve aus der for Schleife entfernt, damit es nur einmal am Schluss ausgeführt wird und die verbleibenden Referenzen hinzufügt
            // damit haben auch Verschiebungen der Reihenfolge in der XMI keine Auswirkungen mehr
            if (!_this.lateResolve()) {
                return null;
            }
            // this.recAllEObjectsCheck(eobjects);
            // eobjects = this.checkAllBidirectionalReferences(eobjects);
            if (!_this.validateMulitiplicities(eobjects)) {
                return null;
            }
            if (_this.error_occured) {
                return null;
            }
            return _this.filterDuplicates(eobjects);
        };
        this.rootnode = function (node) {
            var classifierId = node.nodeName.split(':')[1];
            var eclassifier = _this.epackage.getEClassifier(classifierId);
            if (eclassifier instanceof _EClassImpl__WEBPACK_IMPORTED_MODULE_3__["EClassImpl"]) {
                var eclass = eclassifier;
                _this.root = _this.factory.create(eclass);
                _this.addEStructuralFeatures(_this.root, node);
                // this.lateResolve();
            }
        };
        /*
        protected resolveEList = (specification:string)=>{
            let result = new Array<EObject>();
            let supertypes = specification.split(' ');
    
            if (supertypes != null)
            {
                for(let i=0;i<supertypes.length;i++){
                    //for (string s in supertypes)
    
                    let s = supertypes[i];
    
                    let supertype = this.resolveEObject(s) as EClass;
    
                    //TODO assure it is eclass
                    result.push(supertype);
                }
            }
            return result;
        }
        */
        // modifiziert für BA
        this.resolveEObject = function (specification) {
            if (specification === null) {
                return null;
            }
            else if (specification.lastIndexOf("#//") === 0) {
                var name_2 = specification.replace("#//", "");
                var segments = name_2.split("/");
                var queue = new Array();
                for (var i = 0; i < segments.length; i++) {
                    var segment = segments[i];
                    queue.push(segment);
                }
                return _this.resolveRecurr(queue, _this.root);
            }
            else if (specification.indexOf("http://www.eclipse.org/emf/2002/Ecore#") !== -1) {
                //ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString
                var index = specification.indexOf("http://www.eclipse.org/emf/2002/Ecore#//");
                var name_3 = specification.substring(index + 40, specification.length);
                var segments = name_3.split("/");
                var queue = new Array();
                for (var i = 0; i < segments.length; i++) {
                    var segment = segments[i];
                    queue.push(segment);
                }
                return _this.resolveRecurr(queue, _EcorePackageImpl__WEBPACK_IMPORTED_MODULE_0__["EcorePackageImpl"].eINSTANCE);
            }
            // ab hier BA Teil
            else {
                // gebe registriertes Objekt für die UUID zurück
                var eobj_from_registry = _this.eobjectRegistry[specification];
                if (eobj_from_registry == null) {
                    // wird bei lateResolve eine Referenz nicht aufgelöst, wird eine Fehlermeldung ausgegeben
                    console.error("ERROR: REFERENCE " + specification + " CANNOT BE RESOLVED!");
                    return null;
                }
                return _this.eobjectRegistry[specification];
            }
        };
        this.resolveRecurr = function (path, current) {
            if (path.length === 0) {
                return current;
            }
            var segment = path.shift();
            //FIXME: eContents needs to return Array
            var econtents = current.eContents();
            for (var i = 0; i < econtents.length; i++) {
                var content = econtents[i];
                if (content instanceof _ENamedElementImpl__WEBPACK_IMPORTED_MODULE_4__["ENamedElementImpl"]) {
                    if (content.name === segment) {
                        return _this.resolveRecurr(path, content);
                    }
                }
            }
        };
        // modifiziert für BA
        this.addEStructuralFeatures = function (eobject, node) {
            for (var i = 0; i < node.attributes.length; i++) {
                var attribute = node.attributes[i];
                var name_4 = attribute.name;
                var value = attribute.value;
                _this.addEStructuralFeaturesHelper(eobject, name_4, value);
            }
            for (var i = 0; i < node.childNodes.length; i++) {
                var child = node.childNodes[i];
                if (child.nodeType === child.ELEMENT_NODE) {
                    var element = child;
                    if (0 == element.attributes.length && element.innerHTML != "") {
                        _this.addEStructuralFeaturesHelper(eobject, element.tagName, element.innerHTML, true);
                        continue;
                    }
                    var containment_name = element.localName;
                    var containment = eobject.eClass().getEStructuralFeature(containment_name);
                    if (undefined === containment || null == containment) {
                        console.error("ERROR: UNKNOWN CONTAINMENT NAME!");
                        _this.error_occured = true;
                    }
                    if (containment instanceof _EReferenceImpl__WEBPACK_IMPORTED_MODULE_2__["EReferenceImpl"]) {
                        var containment_er = containment;
                        if (containment_er.containment) {
                            var classifierId2 = containment.eType.name;
                            for (var i_1 = 0; i_1 < element.attributes.length; i_1++) {
                                if (element.attributes[i_1].name === 'xmi:type') {
                                    classifierId2 = element.attributes[i_1].value.split(':')[1];
                                    break;
                                }
                            }
                            var eclassifier2 = _this.epackage.getEClassifier(classifierId2);
                            if (eclassifier2 instanceof _EClassImpl__WEBPACK_IMPORTED_MODULE_3__["EClassImpl"]) {
                                if (containment_er.eType.name === "EStringToStringMapEntry") {
                                    //TODO
                                    console.log("EStringToStringMapEntry");
                                }
                                else {
                                    var eclass2 = eclassifier2;
                                    var eobject2 = _this.factory.create(eclass2);
                                    if (containment_er.many) {
                                        _this.addEStructuralFeatures(eobject2, element); //TODO is Element cast safe here?
                                        var items = eobject.eGet(containment_er);
                                        var copy = items.slice();
                                        copy.push(eobject2);
                                        eobject.eSet(containment_er, copy);
                                    }
                                    else {
                                        _this.addEStructuralFeatures(eobject2, element); //TODO is Element cast safe here?
                                        (eobject2);
                                        eobject.eSet(containment_er, eobject2);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        // modifiziert für BA
        this.lateResolve = function () {
            var _loop_1 = function (job) {
                eobject = job.eObject;
                feature = job.eStructuralFeature;
                path = job.value;
                if (!feature.many) {
                    var eobj_to_add = _this.resolveEObject(path);
                    // bei unaufgelösbaren Referenzen
                    if (null == eobj_to_add) {
                        console.error("ERROR: REFERENCE " + path + " CANNOT BE RESOLVED!");
                        return { value: false };
                    }
                    // Prüfen ob Referenz den richtigen Datentyp hat
                    if (feature.eType.instanceClass.name === eobj_to_add.constructor.name
                        || eobj_to_add instanceof feature.eType.instanceClass) {
                        eobject.eSet(feature, eobj_to_add);
                    }
                    else {
                        console.error("ERROR: WRONG REFERENCE DATA TYPE!");
                        return { value: false };
                    }
                }
                else if (feature.many) {
                    var eobj_to_add_1 = _this.resolveEObject(path);
                    if (null == eobj_to_add_1) {
                        console.error("ERROR: REFERENCE " + path + " CANNOT BE RESOLVED!");
                        return { value: false };
                    }
                    // für bidirektionale Anpassungen mit ordered Eigenschaft
                    var temp_array = eobject.eGet(feature);
                    if (temp_array.some(function (e) { return _this.equal_uuid(e, eobj_to_add_1); })) {
                        // temp_array.remove(eobj_to_add);
                        temp_array.splice(temp_array.findIndex(function (e) { return _this.equal_uuid(e, eobj_to_add_1); }), 1);
                    }
                    // Prüfen ob Referenz den richtigen Datentyp hat
                    if (feature.eType.instanceClass.name === eobj_to_add_1.constructor.name
                        || eobj_to_add_1 instanceof feature.eType.instanceClass) {
                        // push statt add verwenden, um keine automatische bidirektionale Anpassung zu triggern!!!
                        eobject.eGet(feature).push(eobj_to_add_1);
                        // eobject.eGet(feature).add(eobj_to_add);
                        // eobject.eSet(feature, this.resolveEList(path));
                    }
                    else {
                        console.error("ERROR: WRONG REFERENCE DATA TYPE!");
                        return { value: false };
                    }
                }
            };
            var eobject, feature, path;
            for (var _i = 0, _a = _this.resolveJobs; _i < _a.length; _i++) {
                var job = _a[_i];
                var state_1 = _loop_1(job);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            return true;
        };
        // für BA erstellt
        this.validateMulitiplicities = function (eobjects) {
            for (var _i = 0, eobjects_3 = eobjects; _i < eobjects_3.length; _i++) {
                var eobject = eobjects_3[_i];
                var eclass = eobject.eClass();
                for (var _a = 0, _b = eclass.eAllAttributes; _a < _b.length; _a++) {
                    var attribute = _b[_a];
                    if (attribute.many) {
                        var eattr = eobject.eGet(attribute);
                        if ((null == eattr && attribute.lowerBound > 0)
                            || (eattr != null
                                && (eattr.length < attribute.lowerBound
                                    || (attribute.upperBound >= 0 && eattr.length > attribute.upperBound)))) {
                            console.error("Multiplicity constraint violated!");
                            return false;
                        }
                    }
                    else {
                        var eattr = eobject.eGet(attribute);
                        if ((null == eattr && attribute.lowerBound > 0)
                            || (eattr != null && eattr.length < attribute.lowerBound)) {
                            console.error("Multiplicity constraint violated!");
                            return false;
                        }
                    }
                }
                // hier werden sowohl normale Referenzen als auch Containments aus Einhaltung der Multiplizitäten geprüft
                for (var _c = 0, _d = eclass.eAllReferences; _c < _d.length; _c++) {
                    var reference = _d[_c];
                    if (reference.many) {
                        var eref = eobject.eGet(reference);
                        if ((null == eref && reference.lowerBound > 0)
                            || (eref != null
                                && (eref.length < reference.lowerBound
                                    || (reference.upperBound >= 0 && eref.length > reference.upperBound)))) {
                            console.error("Multiplicity constraint violated!");
                            return false;
                        }
                    }
                    else {
                        var eref = eobject.eGet(reference);
                        if ((eref != null && eref.length < reference.lowerBound)
                            || (null == eref && (reference.lowerBound > 0))) {
                            console.error("Multiplicity constraint violated!");
                            return false;
                        }
                    }
                    if (reference.containment) {
                        var containment = reference;
                        var ret = _this.validateMulitiplicities(eobject.eGet(containment));
                        if (!ret) {
                            return false;
                        }
                    }
                }
            }
            return true;
        };
        this.factory = efactory;
        this.epackage = epackage;
        this.domParser = domParser;
        this.resolveJobs = [];
        this.eobjectRegistry = {};
    }
    XmiResource.prototype.filterDuplicates = function (eobjects) {
        return eobjects.filter(function (a, b, c) { return c.findIndex(function (d) { return d._uuid === a._uuid; }) === b; });
    };
    // modifiziert für BA
    XmiResource.prototype.addEStructuralFeaturesHelper = function (eobject, attr_name, attr_value, attribute_has_multiple_values) {
        if (attribute_has_multiple_values === void 0) { attribute_has_multiple_values = false; }
        if (attr_name === 'xmi:id') {
            // UUID-Object Paar registrieren, damit später die Referenzen aufgelöst werden können.
            // falls es mehrere Objekte mit derselben UUID gibt, gebe eine Fehlermeldung aus.
            if (this.eobjectRegistry[attr_value] !== undefined && this.eobjectRegistry[attr_value] != null) {
                eobject._uuid = "";
                console.error("ERROR: THE SAME UUID IS USED FOR DIFFERENT EOBJECTS!");
                return;
            }
            eobject._uuid = attr_value;
            this.eobjectRegistry[attr_value] = eobject;
            return;
        }
        else if (attr_name.includes("xmlns") || attr_name === "xmi:version" || attr_name === "xmi:type") {
            return;
        }
        var estructuralfeature = eobject.eClass().getEStructuralFeature(attr_name);
        if (estructuralfeature instanceof _EAttributeImpl__WEBPACK_IMPORTED_MODULE_5__["EAttributeImpl"] && !estructuralfeature.transient
            && !estructuralfeature.derived) {
            var etype = estructuralfeature.eType;
            var value = attr_value;
            if (etype.ePackage.nsURI === "http://www.eclipse.org/emf/2002/Ecore") {
                if (etype.name == "EBigDecimal") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EBigInteger") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EBoolean") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add("true" == value ? true : false);
                    }
                    else {
                        eobject.eSet(estructuralfeature, "true" == value ? true : false);
                    }
                }
                else if (etype.name == "EBooleanObject") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EByteArray") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EByteObject") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EChar") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(String.fromCharCode(value));
                    }
                    else {
                        eobject.eSet(estructuralfeature, String.fromCharCode(value));
                    }
                }
                else if (etype.name == "ECharacterObject") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EDate") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(Date.parse(value));
                    }
                    else {
                        eobject.eSet(estructuralfeature, Date.parse(value));
                    }
                }
                else if (etype.name == "EDateEDiagnosticChain") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EDiagnosticChain") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EDouble") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(+value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, +value);
                    }
                }
                else if (etype.name == "EDoubleObject") {
                    throw new Error('not implemented');
                }
                //EEList
                //EEnumerator
                //EFeatureMap
                //EFeatureMapEntry
                else if (etype.name == "EFloat") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(+value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, +value);
                    }
                }
                else if (etype.name == "EFloatObject") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EInt") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(+value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, +value);
                    }
                }
                else if (etype.name == "EIntegerObject") {
                    throw new Error('not implemented');
                }
                //EJavaClass
                //EJavaObject
                else if (etype.name == "ELong") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(+value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, +value);
                    }
                }
                else if (etype.name == "ELongObject") {
                    throw new Error('not implemented');
                }
                //EMap
                //EResource
                //EResourceSet
                else if (etype.name == "EShort") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(+value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, +value);
                    }
                }
                else if (etype.name == "EShortObject") {
                    throw new Error('not implemented');
                }
                else if (etype.name == "EString") {
                    if (attribute_has_multiple_values && estructuralfeature.many) {
                        eobject.eGet(estructuralfeature).add(value);
                    }
                    else {
                        eobject.eSet(estructuralfeature, value);
                    }
                }
                //ETreeIterator
                //EInvocationTargetException
            }
            // z.B. für enums
            else if (etype instanceof _EDataTypeImpl__WEBPACK_IMPORTED_MODULE_6__["EDataTypeImpl"]) {
                //TODO use namespace-factory map
                var literalvalue = this.factory.createFromString(etype, value);
                eobject.eSet(estructuralfeature, literalvalue);
            }
        }
        else if (estructuralfeature instanceof _EReferenceImpl__WEBPACK_IMPORTED_MODULE_2__["EReferenceImpl"]) {
            if (!estructuralfeature.containment) {
                this.resolve(eobject, estructuralfeature, attr_value);
            }
        }
        else {
            console.error("ERROR: NON-EXISTENT ATTRIBUTE OR REFERENCE NAME!");
            this.error_occured = true;
        }
    };
    // modifiziert für BA
    XmiResource.prototype.resolve = function (eobject, estructuralfeature, value) {
        var all_ids = value.split(" ");
        for (var i = 0; i < all_ids.length; i++) {
            var id = all_ids[i];
            /*
            if(false && this.eobjectRegistry[id]!==undefined && this.eobjectRegistry[id] != null) {

                if(estructuralfeature.many){
                    //TODO eGet is call by reference
                    (eobject.eGet(estructuralfeature) as AbstractCollection<EObject>).add(this.eobjectRegistry[id]);
                }
                else{
                    eobject.eSet(estructuralfeature, this.eobjectRegistry[id]);
                }
    
    
            }
            else{
            */
            // durch spätes auflösen aller Referenzen erspart man sich Probleme mit Ordnungen
            var resolveJob = {
                "eObject": eobject,
                "eStructuralFeature": estructuralfeature,
                "value": id
            };
            this.resolveJobs.push(resolveJob);
            // }
        }
    };
    XmiResource.prototype.equal_uuid = function (a, b) {
        return a._uuid === b._uuid;
    };
    return XmiResource;
}());



/***/ }),

/***/ "./node_modules/deep-eql/index.js":
/*!****************************************!*\
  !*** ./node_modules/deep-eql/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals Symbol: false, Uint8Array: false, WeakMap: false */
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");
function FakeMap() {
    this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}
FakeMap.prototype = {
    get: function getMap(key) {
        return key[this._key];
    },
    set: function setMap(key, value) {
        if (Object.isExtensible(key)) {
            Object.defineProperty(key, this._key, {
                value: value,
                configurable: true,
            });
        }
    },
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/
function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
        return null;
    }
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
        var result = leftHandMap.get(rightHandOperand);
        if (typeof result === 'boolean') {
            return result;
        }
    }
    return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/
function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
        return;
    }
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
        leftHandMap.set(rightHandOperand, result);
    }
    else {
        leftHandMap = new MemoizeMap();
        leftHandMap.set(rightHandOperand, result);
        memoizeMap.set(leftHandOperand, leftHandMap);
    }
}
/*!
 * Primary Export
 */
module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */
function deepEqual(leftHandOperand, rightHandOperand, options) {
    // If we have a comparator, we can't assume anything; so bail to its check first.
    if (options && options.comparator) {
        return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
    }
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) {
        return simpleResult;
    }
    // Deeper comparisons are pushed through to a larger function
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */
function simpleEqual(leftHandOperand, rightHandOperand) {
    // Equal references (except for Numbers) can be returned early
    if (leftHandOperand === rightHandOperand) {
        // Handle +-0 cases
        return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
    }
    // handle NaN cases
    if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
        rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
    ) {
        return true;
    }
    // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
    // strings, and undefined, can be compared by reference.
    if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
        // Easy out b/c it would have passed the first equality check
        return false;
    }
    return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/
function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
    options = options || {};
    options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
    var comparator = options && options.comparator;
    // Check if a memoized result exists.
    var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
    if (memoizeResultLeft !== null) {
        return memoizeResultLeft;
    }
    var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
    if (memoizeResultRight !== null) {
        return memoizeResultRight;
    }
    // If a comparator is present, use it.
    if (comparator) {
        var comparatorResult = comparator(leftHandOperand, rightHandOperand);
        // Comparators may return null, in which case we want to go back to default behavior.
        if (comparatorResult === false || comparatorResult === true) {
            memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
            return comparatorResult;
        }
        // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
        // what to do, we need to make sure to return the basic tests first before we move on.
        var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
        if (simpleResult !== null) {
            // Don't memoize this, it takes longer to set/retrieve than to just compare.
            return simpleResult;
        }
    }
    var leftHandType = type(leftHandOperand);
    if (leftHandType !== type(rightHandOperand)) {
        memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
        return false;
    }
    // Temporarily set the operands in the memoize object to prevent blowing the stack
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
    var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
    return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
    switch (leftHandType) {
        case 'String':
        case 'Number':
        case 'Boolean':
        case 'Date':
            // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
            return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
        case 'Promise':
        case 'Symbol':
        case 'function':
        case 'WeakMap':
        case 'WeakSet':
        case 'Error':
            return leftHandOperand === rightHandOperand;
        case 'Arguments':
        case 'Int8Array':
        case 'Uint8Array':
        case 'Uint8ClampedArray':
        case 'Int16Array':
        case 'Uint16Array':
        case 'Int32Array':
        case 'Uint32Array':
        case 'Float32Array':
        case 'Float64Array':
        case 'Array':
            return iterableEqual(leftHandOperand, rightHandOperand, options);
        case 'RegExp':
            return regexpEqual(leftHandOperand, rightHandOperand);
        case 'Generator':
            return generatorEqual(leftHandOperand, rightHandOperand, options);
        case 'DataView':
            return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
        case 'ArrayBuffer':
            return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
        case 'Set':
            return entriesEqual(leftHandOperand, rightHandOperand, options);
        case 'Map':
            return entriesEqual(leftHandOperand, rightHandOperand, options);
        default:
            return objectEqual(leftHandOperand, rightHandOperand, options);
    }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */
function regexpEqual(leftHandOperand, rightHandOperand) {
    return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function entriesEqual(leftHandOperand, rightHandOperand, options) {
    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
    if (leftHandOperand.size !== rightHandOperand.size) {
        return false;
    }
    if (leftHandOperand.size === 0) {
        return true;
    }
    var leftHandItems = [];
    var rightHandItems = [];
    leftHandOperand.forEach(function gatherEntries(key, value) {
        leftHandItems.push([key, value]);
    });
    rightHandOperand.forEach(function gatherEntries(key, value) {
        rightHandItems.push([key, value]);
    });
    return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function iterableEqual(leftHandOperand, rightHandOperand, options) {
    var length = leftHandOperand.length;
    if (length !== rightHandOperand.length) {
        return false;
    }
    if (length === 0) {
        return true;
    }
    var index = -1;
    while (++index < length) {
        if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
            return false;
        }
    }
    return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function generatorEqual(leftHandOperand, rightHandOperand, options) {
    return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */
function hasIteratorFunction(target) {
    return typeof Symbol !== 'undefined' &&
        typeof target === 'object' &&
        typeof Symbol.iterator !== 'undefined' &&
        typeof target[Symbol.iterator] === 'function';
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */
function getIteratorEntries(target) {
    if (hasIteratorFunction(target)) {
        try {
            return getGeneratorEntries(target[Symbol.iterator]());
        }
        catch (iteratorError) {
            return [];
        }
    }
    return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */
function getGeneratorEntries(generator) {
    var generatorResult = generator.next();
    var accumulator = [generatorResult.value];
    while (generatorResult.done === false) {
        generatorResult = generator.next();
        accumulator.push(generatorResult.value);
    }
    return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */
function getEnumerableKeys(target) {
    var keys = [];
    for (var key in target) {
        keys.push(key);
    }
    return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
    var length = keys.length;
    if (length === 0) {
        return true;
    }
    for (var i = 0; i < length; i += 1) {
        if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
            return false;
        }
    }
    return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */
function objectEqual(leftHandOperand, rightHandOperand, options) {
    var leftHandKeys = getEnumerableKeys(leftHandOperand);
    var rightHandKeys = getEnumerableKeys(rightHandOperand);
    if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
        leftHandKeys.sort();
        rightHandKeys.sort();
        if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
            return false;
        }
        return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
    }
    var leftHandEntries = getIteratorEntries(leftHandOperand);
    var rightHandEntries = getIteratorEntries(rightHandOperand);
    if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
        leftHandEntries.sort();
        rightHandEntries.sort();
        return iterableEqual(leftHandEntries, rightHandEntries, options);
    }
    if (leftHandKeys.length === 0 &&
        leftHandEntries.length === 0 &&
        rightHandKeys.length === 0 &&
        rightHandEntries.length === 0) {
        return true;
    }
    return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */
function isPrimitive(value) {
    return value === null || typeof value !== 'object';
}


/***/ }),

/***/ "./node_modules/get-func-name/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-func-name/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */
var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
    if (typeof aFunc !== 'function') {
        return null;
    }
    var name = '';
    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
        // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
        var match = toString.call(aFunc).match(functionNameMatch);
        if (match) {
            name = match[1];
        }
    }
    else {
        // If we've got a `name` property we just use it
        name = aFunc.name;
    }
    return name;
}
module.exports = getFuncName;


/***/ }),

/***/ "./node_modules/pathval/index.js":
/*!***************************************!*\
  !*** ./node_modules/pathval/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */
/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */
function hasProperty(obj, name) {
    if (typeof obj === 'undefined' || obj === null) {
        return false;
    }
    // The `in` operator does not work with primitives.
    return name in Object(obj);
}
/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */
function parsePath(path) {
    var str = path.replace(/([^\\])\[/g, '$1.[');
    var parts = str.match(/(\\\.|[^.]+?)+/g);
    return parts.map(function mapMatches(value) {
        var regexp = /^\[(\d+)\]$/;
        var mArr = regexp.exec(value);
        var parsed = null;
        if (mArr) {
            parsed = { i: parseFloat(mArr[1]) };
        }
        else {
            parsed = { p: value.replace(/\\([.\[\]])/g, '$1') };
        }
        return parsed;
    });
}
/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */
function internalGetPathValue(obj, parsed, pathDepth) {
    var temporaryValue = obj;
    var res = null;
    pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);
    for (var i = 0; i < pathDepth; i++) {
        var part = parsed[i];
        if (temporaryValue) {
            if (typeof part.p === 'undefined') {
                temporaryValue = temporaryValue[part.i];
            }
            else {
                temporaryValue = temporaryValue[part.p];
            }
            if (i === (pathDepth - 1)) {
                res = temporaryValue;
            }
        }
    }
    return res;
}
/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */
function internalSetPathValue(obj, val, parsed) {
    var tempObj = obj;
    var pathDepth = parsed.length;
    var part = null;
    // Here we iterate through every part of the path
    for (var i = 0; i < pathDepth; i++) {
        var propName = null;
        var propVal = null;
        part = parsed[i];
        // If it's the last part of the path, we set the 'propName' value with the property name
        if (i === (pathDepth - 1)) {
            propName = typeof part.p === 'undefined' ? part.i : part.p;
            // Now we set the property with the name held by 'propName' on object with the desired val
            tempObj[propName] = val;
        }
        else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
            tempObj = tempObj[part.p];
        }
        else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
            tempObj = tempObj[part.i];
        }
        else {
            // If the obj doesn't have the property we create one with that name to define it
            var next = parsed[i + 1];
            // Here we set the name of the property which will be defined
            propName = typeof part.p === 'undefined' ? part.i : part.p;
            // Here we decide if this property will be an array or a new object
            propVal = typeof next.p === 'undefined' ? [] : {};
            tempObj[propName] = propVal;
            tempObj = tempObj[propName];
        }
    }
}
/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */
function getPathInfo(obj, path) {
    var parsed = parsePath(path);
    var last = parsed[parsed.length - 1];
    var info = {
        parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
        name: last.p || last.i,
        value: internalGetPathValue(obj, parsed),
    };
    info.exists = hasProperty(info.parent, info.name);
    return info;
}
/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */
function getPathValue(obj, path) {
    var info = getPathInfo(obj, path);
    return info.value;
}
/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */
function setPathValue(obj, path, val) {
    var parsed = parsePath(path);
    internalSetPathValue(obj, val, parsed);
    return obj;
}
module.exports = {
    hasProperty: hasProperty,
    getPathInfo: getPathInfo,
    getPathValue: getPathValue,
    setPathValue: setPathValue,
};


/***/ }),

/***/ "./node_modules/type-detect/type-detect.js":
/*!*************************************************!*\
  !*** ./node_modules/type-detect/type-detect.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
     true ? module.exports = factory() :
        undefined;
}(this, (function () {
    'use strict';
    /* !
     * type-detect
     * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
     * MIT Licensed
     */
    var promiseExists = typeof Promise === 'function';
    /* eslint-disable no-undef */
    var globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist
    var symbolExists = typeof Symbol !== 'undefined';
    var mapExists = typeof Map !== 'undefined';
    var setExists = typeof Set !== 'undefined';
    var weakMapExists = typeof WeakMap !== 'undefined';
    var weakSetExists = typeof WeakSet !== 'undefined';
    var dataViewExists = typeof DataView !== 'undefined';
    var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
    var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
    var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
    var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
    var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
    var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
    var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
    var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
    var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
    var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
    var toStringLeftSliceLength = 8;
    var toStringRightSliceLength = -1;
    /**
     * ### typeOf (obj)
     *
     * Uses `Object.prototype.toString` to determine the type of an object,
     * normalising behaviour across engine versions & well optimised.
     *
     * @param {Mixed} object
     * @return {String} object type
     * @api public
     */
    function typeDetect(obj) {
        /* ! Speed optimisation
         * Pre:
         *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
         *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
         *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
         *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
         *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
         * Post:
         *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
         *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
         *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
         *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
         *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
         */
        var typeofObj = typeof obj;
        if (typeofObj !== 'object') {
            return typeofObj;
        }
        /* ! Speed optimisation
         * Pre:
         *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
         * Post:
         *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
         */
        if (obj === null) {
            return 'null';
        }
        /* ! Spec Conformance
         * Test: `Object.prototype.toString.call(window)``
         *  - Node === "[object global]"
         *  - Chrome === "[object global]"
         *  - Firefox === "[object Window]"
         *  - PhantomJS === "[object Window]"
         *  - Safari === "[object Window]"
         *  - IE 11 === "[object Window]"
         *  - IE Edge === "[object Window]"
         * Test: `Object.prototype.toString.call(this)``
         *  - Chrome Worker === "[object global]"
         *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
         *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
         *  - IE 11 Worker === "[object WorkerGlobalScope]"
         *  - IE Edge Worker === "[object WorkerGlobalScope]"
         */
        if (obj === globalObject) {
            return 'global';
        }
        /* ! Speed optimisation
         * Pre:
         *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
         * Post:
         *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
         */
        if (Array.isArray(obj) &&
            (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {
            return 'Array';
        }
        // Not caching existence of `window` and related properties due to potential
        // for `window` to be unset before tests in quasi-browser environments.
        if (typeof window === 'object' && window !== null) {
            /* ! Spec Conformance
             * (https://html.spec.whatwg.org/multipage/browsers.html#location)
             * WhatWG HTML$7.7.3 - The `Location` interface
             * Test: `Object.prototype.toString.call(window.location)``
             *  - IE <=11 === "[object Object]"
             *  - IE Edge <=13 === "[object Object]"
             */
            if (typeof window.location === 'object' && obj === window.location) {
                return 'Location';
            }
            /* ! Spec Conformance
             * (https://html.spec.whatwg.org/#document)
             * WhatWG HTML$3.1.1 - The `Document` object
             * Note: Most browsers currently adher to the W3C DOM Level 2 spec
             *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
             *       which suggests that browsers should use HTMLTableCellElement for
             *       both TD and TH elements. WhatWG separates these.
             *       WhatWG HTML states:
             *         > For historical reasons, Window objects must also have a
             *         > writable, configurable, non-enumerable property named
             *         > HTMLDocument whose value is the Document interface object.
             * Test: `Object.prototype.toString.call(document)``
             *  - Chrome === "[object HTMLDocument]"
             *  - Firefox === "[object HTMLDocument]"
             *  - Safari === "[object HTMLDocument]"
             *  - IE <=10 === "[object Document]"
             *  - IE 11 === "[object HTMLDocument]"
             *  - IE Edge <=13 === "[object HTMLDocument]"
             */
            if (typeof window.document === 'object' && obj === window.document) {
                return 'Document';
            }
            if (typeof window.navigator === 'object') {
                /* ! Spec Conformance
                 * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
                 * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
                 * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
                 *  - IE <=10 === "[object MSMimeTypesCollection]"
                 */
                if (typeof window.navigator.mimeTypes === 'object' &&
                    obj === window.navigator.mimeTypes) {
                    return 'MimeTypeArray';
                }
                /* ! Spec Conformance
                 * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
                 * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
                 * Test: `Object.prototype.toString.call(navigator.plugins)``
                 *  - IE <=10 === "[object MSPluginsCollection]"
                 */
                if (typeof window.navigator.plugins === 'object' &&
                    obj === window.navigator.plugins) {
                    return 'PluginArray';
                }
            }
            if ((typeof window.HTMLElement === 'function' ||
                typeof window.HTMLElement === 'object') &&
                obj instanceof window.HTMLElement) {
                /* ! Spec Conformance
                * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
                * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
                * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
                *  - IE <=10 === "[object HTMLBlockElement]"
                */
                if (obj.tagName === 'BLOCKQUOTE') {
                    return 'HTMLQuoteElement';
                }
                /* ! Spec Conformance
                 * (https://html.spec.whatwg.org/#htmltabledatacellelement)
                 * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
                 * Note: Most browsers currently adher to the W3C DOM Level 2 spec
                 *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
                 *       which suggests that browsers should use HTMLTableCellElement for
                 *       both TD and TH elements. WhatWG separates these.
                 * Test: Object.prototype.toString.call(document.createElement('td'))
                 *  - Chrome === "[object HTMLTableCellElement]"
                 *  - Firefox === "[object HTMLTableCellElement]"
                 *  - Safari === "[object HTMLTableCellElement]"
                 */
                if (obj.tagName === 'TD') {
                    return 'HTMLTableDataCellElement';
                }
                /* ! Spec Conformance
                 * (https://html.spec.whatwg.org/#htmltableheadercellelement)
                 * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
                 * Note: Most browsers currently adher to the W3C DOM Level 2 spec
                 *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
                 *       which suggests that browsers should use HTMLTableCellElement for
                 *       both TD and TH elements. WhatWG separates these.
                 * Test: Object.prototype.toString.call(document.createElement('th'))
                 *  - Chrome === "[object HTMLTableCellElement]"
                 *  - Firefox === "[object HTMLTableCellElement]"
                 *  - Safari === "[object HTMLTableCellElement]"
                 */
                if (obj.tagName === 'TH') {
                    return 'HTMLTableHeaderCellElement';
                }
            }
        }
        /* ! Speed optimisation
        * Pre:
        *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
        *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
        *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
        *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
        *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
        *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
        *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
        *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
        *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
        * Post:
        *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
        *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
        *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
        *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
        *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
        *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
        *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
        *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
        *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
        */
        var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);
        if (typeof stringTag === 'string') {
            return stringTag;
        }
        var objPrototype = Object.getPrototypeOf(obj);
        /* ! Speed optimisation
        * Pre:
        *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
        *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
        * Post:
        *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
        *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
        */
        if (objPrototype === RegExp.prototype) {
            return 'RegExp';
        }
        /* ! Speed optimisation
        * Pre:
        *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
        * Post:
        *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
        */
        if (objPrototype === Date.prototype) {
            return 'Date';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
         * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
         * Test: `Object.prototype.toString.call(Promise.resolve())``
         *  - Chrome <=47 === "[object Object]"
         *  - Edge <=20 === "[object Object]"
         *  - Firefox 29-Latest === "[object Promise]"
         *  - Safari 7.1-Latest === "[object Promise]"
         */
        if (promiseExists && objPrototype === Promise.prototype) {
            return 'Promise';
        }
        /* ! Speed optimisation
        * Pre:
        *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
        * Post:
        *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
        */
        if (setExists && objPrototype === Set.prototype) {
            return 'Set';
        }
        /* ! Speed optimisation
        * Pre:
        *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
        * Post:
        *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
        */
        if (mapExists && objPrototype === Map.prototype) {
            return 'Map';
        }
        /* ! Speed optimisation
        * Pre:
        *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
        * Post:
        *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
        */
        if (weakSetExists && objPrototype === WeakSet.prototype) {
            return 'WeakSet';
        }
        /* ! Speed optimisation
        * Pre:
        *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
        * Post:
        *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
        */
        if (weakMapExists && objPrototype === WeakMap.prototype) {
            return 'WeakMap';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
         * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
         * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
         *  - Edge <=13 === "[object Object]"
         */
        if (dataViewExists && objPrototype === DataView.prototype) {
            return 'DataView';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
         * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
         * Test: `Object.prototype.toString.call(new Map().entries())``
         *  - Edge <=13 === "[object Object]"
         */
        if (mapExists && objPrototype === mapIteratorPrototype) {
            return 'Map Iterator';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
         * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
         * Test: `Object.prototype.toString.call(new Set().entries())``
         *  - Edge <=13 === "[object Object]"
         */
        if (setExists && objPrototype === setIteratorPrototype) {
            return 'Set Iterator';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
         * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
         * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
         *  - Edge <=13 === "[object Object]"
         */
        if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
            return 'Array Iterator';
        }
        /* ! Spec Conformance
         * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
         * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
         * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
         *  - Edge <=13 === "[object Object]"
         */
        if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
            return 'String Iterator';
        }
        /* ! Speed optimisation
        * Pre:
        *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
        * Post:
        *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
        */
        if (objPrototype === null) {
            return 'Object';
        }
        return Object
            .prototype
            .toString
            .call(obj)
            .slice(toStringLeftSliceLength, toStringRightSliceLength);
    }
    return typeDetect;
})));


/***/ }),

/***/ "./node_modules/xml-formatter/index.js":
/*!*********************************************!*\
  !*** ./node_modules/xml-formatter/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @typedef {Object} XMLFormatterOptions
 *  @property {String} [indentation='    '] The value used for indentation
 *  @property {function(node): boolean} [filter] Return false to exclude the node.
 *  @property {Boolean} [collapseContent=false] True to keep content in the same line as the element. Only works if element contains at least one text node
 *  @property {String} [lineSeparator='\r\n'] The line separator to use
 *  @property {String} [whiteSpaceAtEndOfSelfclosingTag=false] to either end ad self closing tag with `<tag/>` or `<tag />`
 */
/**
 * @typedef {Object} XMLFormatterState
 * @param {String} content
 * @param {Number} level
 * @param {XMLFormatterOptions} options
 */
/**
 * @param {XMLFormatterState} state
 * @return {void}
 */
function newLine(state) {
    if (!state.options.indentation && !state.options.lineSeparator)
        return;
    state.content += state.options.lineSeparator;
    var i;
    for (i = 0; i < state.level; i++) {
        state.content += state.options.indentation;
    }
}
/**
 * @param {XMLFormatterState} state
 * @param {String} content
 * @return {void}
 */
function appendContent(state, content) {
    state.content += content;
}
/**
 * @param {Object} node
 * @param {XMLFormatterState} state
 * @param {Boolean} preserveSpace
 * @return {void}
 */
function processNode(node, state, preserveSpace) {
    if (typeof node.content === 'string') {
        processContentNode(node, state, preserveSpace);
    }
    else if (node.type === 'Element') {
        processElementNode(node, state, preserveSpace);
    }
    else if (node.type === 'ProcessingInstruction') {
        processProcessingIntruction(node, state, preserveSpace);
    }
    else {
        throw new Error('Unknown node type: ' + node.type);
    }
}
/**
 * @param {Object} node
 * @param {XMLFormatterState} state
 * @param {Boolean} preserveSpace
 * @return {void}
 */
function processContentNode(node, state, preserveSpace) {
    if (!preserveSpace) {
        node.content = node.content.trim();
    }
    if (node.content.length > 0) {
        if (!preserveSpace && state.content.length > 0) {
            newLine(state);
        }
        appendContent(state, node.content);
    }
}
/**
 * @param {Object} node
 * @param {XMLFormatterState} state
 * @param {Boolean} preserveSpace
 * @return {void}
 */
function processElementNode(node, state, preserveSpace) {
    if (!preserveSpace && state.content.length > 0) {
        newLine(state);
    }
    appendContent(state, '<' + node.name);
    processAttributes(state, node.attributes);
    if (node.children === null) {
        var selfClosingNodeClosingTag = state.options.whiteSpaceAtEndOfSelfclosingTag ? ' />' : '/>';
        // self-closing node
        appendContent(state, selfClosingNodeClosingTag);
    }
    else if (node.children.length === 0) {
        // empty node
        appendContent(state, '></' + node.name + '>');
    }
    else {
        appendContent(state, '>');
        state.level++;
        var nodePreserveSpace_1 = node.attributes['xml:space'] === 'preserve';
        if (!nodePreserveSpace_1 && state.options.collapseContent) {
            var containsTextNodes = node.children.some(function (child) {
                return child.type === 'Text' && child.content.trim() !== '';
            });
            if (containsTextNodes) {
                nodePreserveSpace_1 = true;
            }
        }
        node.children.forEach(function (child) {
            processNode(child, state, preserveSpace || nodePreserveSpace_1, state.options);
        });
        state.level--;
        if (!preserveSpace && !nodePreserveSpace_1) {
            newLine(state);
        }
        appendContent(state, '</' + node.name + '>');
    }
}
/**
 * @param {XMLFormatterState} state
 * @param {Record<String, String>} attributes
 * @return {void}
 */
function processAttributes(state, attributes) {
    Object.keys(attributes).forEach(function (attr) {
        var escaped = attributes[attr].replace(/"/g, '&quot;');
        appendContent(state, ' ' + attr + '="' + escaped + '"');
    });
}
/**
 * @param {Object} node
 * @param {XMLFormatterState} state
 * @return {void}
 */
function processProcessingIntruction(node, state) {
    if (state.content.length > 0) {
        newLine(state);
    }
    appendContent(state, '<?' + node.name);
    processAttributes(state, node.attributes);
    appendContent(state, '?>');
}
/**
 * Converts the given XML into human readable format.
 *
 * @param {String} xml
 * @param {XMLFormatterOptions} options
 * @returns {string}
 */
function format(xml, options) {
    if (options === void 0) { options = {}; }
    options.indentation = 'indentation' in options ? options.indentation : '    ';
    options.collapseContent = options.collapseContent === true;
    options.lineSeparator = 'lineSeparator' in options ? options.lineSeparator : '\r\n';
    options.whiteSpaceAtEndOfSelfclosingTag = !!options.whiteSpaceAtEndOfSelfclosingTag;
    var parser = __webpack_require__(/*! xml-parser-xo */ "./node_modules/xml-parser-xo/index.js");
    var parsedXml = parser(xml, { filter: options.filter });
    var state = { content: '', level: 0, options: options };
    if (parsedXml.declaration) {
        processProcessingIntruction(parsedXml.declaration, state);
    }
    parsedXml.children.forEach(function (child) {
        processNode(child, state, false);
    });
    return state.content;
}
module.exports = format;


/***/ }),

/***/ "./node_modules/xml-parser-xo/index.js":
/*!*********************************************!*\
  !*** ./node_modules/xml-parser-xo/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * @typedef {Object} ParsingOptions
 *  @property {function(node)} filter Returns false to exclude a node. Default is true.
 */
/**
 * Parse the given XML string into an object.
 *
 * @param {String} xml
 * @param {ParsingOptions} [options]
 * @return {Object}
 * @api public
 */
function parse(xml, options) {
    if (options === void 0) { options = {}; }
    options.filter = options.filter || (function () { return true; });
    function nextChild() {
        return tag() || content() || comment() || cdata();
    }
    function nextRootChild() {
        match(/\s*/);
        return tag(true) || comment() || doctype() || processingInstruction(false);
    }
    function document() {
        var decl = declaration();
        var children = [];
        var documentRootNode;
        var child = nextRootChild();
        while (child) {
            if (child.node.type === 'Element') {
                if (documentRootNode) {
                    throw new Error('Found multiple root nodes');
                }
                documentRootNode = child.node;
            }
            if (!child.excluded) {
                children.push(child.node);
            }
            child = nextRootChild();
        }
        if (!documentRootNode) {
            throw new Error('Failed to parse XML');
        }
        return {
            declaration: decl ? decl.node : null,
            root: documentRootNode,
            children: children
        };
    }
    function declaration() {
        return processingInstruction(true);
    }
    function processingInstruction(matchDeclaration) {
        var m = matchDeclaration ? match(/^<\?(xml)\s*/) : match(/^<\?([\w-:.]+)\s*/);
        if (!m)
            return;
        // tag
        var node = {
            name: m[1],
            type: 'ProcessingInstruction',
            attributes: {}
        };
        // attributes
        while (!(eos() || is('?>'))) {
            var attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        match(/\?>/);
        return {
            excluded: matchDeclaration ? false : options.filter(node) === false,
            node: node
        };
    }
    function tag(matchRoot) {
        var m = match(/^<([\w-:.]+)\s*/);
        if (!m)
            return;
        // name
        var node = {
            type: 'Element',
            name: m[1],
            attributes: {},
            children: []
        };
        // attributes
        while (!(eos() || is('>') || is('?>') || is('/>'))) {
            var attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        var excluded = matchRoot ? false : options.filter(node) === false;
        // self closing tag
        if (match(/^\s*\/>/)) {
            node.children = null;
            return {
                excluded: excluded,
                node: node
            };
        }
        match(/\??>/);
        if (!excluded) {
            // children
            var child = nextChild();
            while (child) {
                if (!child.excluded) {
                    node.children.push(child.node);
                }
                child = nextChild();
            }
        }
        // closing
        match(/^<\/[\w-:.]+>/);
        return {
            excluded: excluded,
            node: node
        };
    }
    function doctype() {
        var m = match(/^<!DOCTYPE\s+[^>]*>/);
        if (m) {
            var node = {
                type: 'DocumentType',
                content: m[0]
            };
            return {
                excluded: options.filter(node) === false,
                node: node
            };
        }
    }
    function cdata() {
        if (xml.startsWith('<![CDATA[')) {
            var endPositionStart = xml.indexOf(']]>');
            if (endPositionStart > -1) {
                var endPositionFinish = endPositionStart + 3;
                var node = {
                    type: 'CDATA',
                    content: xml.substring(0, endPositionFinish)
                };
                xml = xml.slice(endPositionFinish);
                return {
                    excluded: options.filter(node) === false,
                    node: node
                };
            }
        }
    }
    function comment() {
        var m = match(/^<!--[\s\S]*?-->/);
        if (m) {
            var node = {
                type: 'Comment',
                content: m[0]
            };
            return {
                excluded: options.filter(node) === false,
                node: node
            };
        }
    }
    function content() {
        var m = match(/^([^<]+)/);
        if (m) {
            var node = {
                type: 'Text',
                content: m[1]
            };
            return {
                excluded: options.filter(node) === false,
                node: node
            };
        }
    }
    function attribute() {
        var m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);
        if (!m)
            return;
        return { name: m[1], value: strip(m[2]) };
    }
    /**
     * Strip quotes from `val`.
     */
    function strip(val) {
        return val.replace(/^['"]|['"]$/g, '');
    }
    /**
     * Match `re` and advance the string.
     */
    function match(re) {
        var m = xml.match(re);
        if (!m)
            return;
        xml = xml.slice(m[0].length);
        return m;
    }
    /**
     * End-of-source.
     */
    function eos() {
        return 0 === xml.length;
    }
    /**
     * Check for `prefix`.
     */
    function is(prefix) {
        return 0 === xml.indexOf(prefix);
    }
    xml = xml.trim();
    return document();
}
module.exports = parse;


/***/ }),

/***/ "./src/webpage/AnimatedPictureBase.ts":
/*!********************************************!*\
  !*** ./src/webpage/AnimatedPictureBase.ts ***!
  \********************************************/
/*! exports provided: AnimatedPictureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimatedPictureBase", function() { return AnimatedPictureBase; });
/* harmony import */ var webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpage/PictureImpl */ "./src/webpage/PictureImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var AnimatedPictureBase = /** @class */ (function (_super) {
    __extends(AnimatedPictureBase, _super);
    function AnimatedPictureBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._repeat = false;
        return _this;
    }
    Object.defineProperty(AnimatedPictureBase.prototype, "repeat", {
        get: function () {
            return this._repeat;
        },
        set: function (value) {
            this._repeat = value;
        },
        enumerable: false,
        configurable: true
    });
    AnimatedPictureBase.prototype.eStaticClass = function () {
        return AnimatedPictureBase.eStaticClass;
    };
    AnimatedPictureBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__INFORMATION:
                return this.information;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__NUMBER:
                return this.number;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__HASH:
                return this.hash;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__REPEAT:
                return this.repeat;
        }
        //return this.eGetFromPicture(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    AnimatedPictureBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageLiterals"].ANIMATED_PICTURE__REPEAT:
                this.repeat = newValue;
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return AnimatedPictureBase;
}(webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_0__["PictureImpl"]));



/***/ }),

/***/ "./src/webpage/AnimatedPictureImpl.ts":
/*!********************************************!*\
  !*** ./src/webpage/AnimatedPictureImpl.ts ***!
  \********************************************/
/*! exports provided: AnimatedPictureImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimatedPictureImpl", function() { return AnimatedPictureImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_AnimatedPictureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/AnimatedPictureBase */ "./src/webpage/AnimatedPictureBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var AnimatedPictureImpl = /** @class */ (function (_super) {
    __extends(AnimatedPictureImpl, _super);
    function AnimatedPictureImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimatedPictureImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return AnimatedPictureImpl;
}(webpage_AnimatedPictureBase__WEBPACK_IMPORTED_MODULE_1__["AnimatedPictureBase"]));



/***/ }),

/***/ "./src/webpage/ArticleBase.ts":
/*!************************************!*\
  !*** ./src/webpage/ArticleBase.ts ***!
  \************************************/
/*! exports provided: ArticleBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArticleBase", function() { return ArticleBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var ecore_ENotificationImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecore/ENotificationImpl */ "./node_modules/crossecore/src/ENotificationImpl.ts");
/* harmony import */ var ecore_NotificationImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ecore/NotificationImpl */ "./node_modules/crossecore/src/NotificationImpl.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
/* harmony import */ var webpage_ArticleType__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! webpage/ArticleType */ "./src/webpage/ArticleType.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ArticleBase = /** @class */ (function (_super) {
    __extends(ArticleBase, _super);
    function ArticleBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = '';
        _this._articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_6__["ArticleType"].REVIEW;
        _this._flags = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        _this._number = 0.0;
        _this._chapters = null;
        _this._authors = null;
        _this._picture = null;
        _this._related = null;
        _this._sources = null;
        return _this;
    }
    Object.defineProperty(ArticleBase.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "articletype", {
        get: function () {
            return this._articletype;
        },
        set: function (value) {
            this._articletype = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "flags", {
        get: function () {
            if (this._flags === null) {
                this._flags = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._flags;
        },
        set: function (value) {
            this._flags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "number", {
        get: function () {
            return this._number;
        },
        set: function (value) {
            this._number = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "chapters", {
        get: function () {
            if (this._chapters === null) {
                this._chapters = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__CHAPTERS, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__CHAPTERS);
            }
            return this._chapters;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "authors", {
        get: function () {
            if (this._authors === null) {
                this._authors = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__AUTHORS, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].PERSON__ARTICLES);
            }
            return this._authors;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "picture", {
        get: function () {
            return this._picture;
        },
        set: function (value) {
            var oldvalue = this._picture;
            this._picture = value;
            if (this.eNotificationRequired()) {
                this.eNotify(new ecore_ENotificationImpl__WEBPACK_IMPORTED_MODULE_2__["ENotificationImpl"](this, ecore_NotificationImpl__WEBPACK_IMPORTED_MODULE_3__["NotificationImpl"].SET, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__PICTURE, oldvalue, value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "related", {
        get: function () {
            if (this._related === null) {
                this._related = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__RELATED, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__RELATED);
            }
            return this._related;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArticleBase.prototype, "sources", {
        get: function () {
            if (this._sources === null) {
                this._sources = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__SOURCES, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__SOURCES);
            }
            return this._sources;
        },
        enumerable: false,
        configurable: true
    });
    ArticleBase.prototype.eStaticClass = function () {
        return ArticleBase.eStaticClass;
    };
    ArticleBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__AUTHORS:
                return this.authors.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromArticle = this.eInverseAdd;
    ArticleBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__AUTHORS:
                return this.authors.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromArticle = this.eInverseRemove;
    ArticleBase.prototype.basicSetPicture = function (newobj, msgs) {
        var oldobj = this._picture;
        this._picture = newobj;
        if (this.eNotificationRequired()) {
            var notification = new ecore_ENotificationImpl__WEBPACK_IMPORTED_MODULE_2__["ENotificationImpl"](this, ecore_NotificationImpl__WEBPACK_IMPORTED_MODULE_3__["NotificationImpl"].SET, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__PICTURE, oldobj, newobj);
            if (msgs == null) {
                msgs = notification;
            }
            else {
                msgs.add(notification);
            }
        }
        return msgs;
    };
    ArticleBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__CHAPTERS:
                return this.chapters;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__AUTHORS:
                return this.authors;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__PICTURE:
                return this.picture;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__ARTICLETYPE:
                return this.articletype;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__RELATED:
                return this.related;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__SOURCES:
                return this.sources;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__FLAGS:
                return this.flags;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__NUMBER:
                return this.number;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    ArticleBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__NAME:
                this.name = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__ARTICLETYPE:
                this.articletype = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__FLAGS:
                this.flags.clear();
                this.flags.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__NUMBER:
                this.number = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__CHAPTERS:
                this.chapters.clear();
                this.chapters.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__AUTHORS:
                this.authors.clear();
                this.authors.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__PICTURE:
                this.picture = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__RELATED:
                this.related.clear();
                this.related.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_5__["WebpagePackageLiterals"].ARTICLE__SOURCES:
                this.sources.clear();
                this.sources.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return ArticleBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_4__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/ArticleImpl.ts":
/*!************************************!*\
  !*** ./src/webpage/ArticleImpl.ts ***!
  \************************************/
/*! exports provided: ArticleImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArticleImpl", function() { return ArticleImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_ArticleBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/ArticleBase */ "./src/webpage/ArticleBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var ArticleImpl = /** @class */ (function (_super) {
    __extends(ArticleImpl, _super);
    function ArticleImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArticleImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return ArticleImpl;
}(webpage_ArticleBase__WEBPACK_IMPORTED_MODULE_1__["ArticleBase"]));



/***/ }),

/***/ "./src/webpage/ArticleType.ts":
/*!************************************!*\
  !*** ./src/webpage/ArticleType.ts ***!
  \************************************/
/*! exports provided: ArticleType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArticleType", function() { return ArticleType; });
var ArticleType = /** @class */ (function () {
    function ArticleType(value, name, literal) {
        this.value = value;
        this.name = name;
        this.literal = literal;
    }
    ArticleType.get_string = function (literal) {
        for (var i = 0; i < this.VALUES_ARRAY.length; i++) {
            var result = this.VALUES_ARRAY[i];
            if (result.toString() === literal) {
                return result;
            }
        }
        return null;
    };
    ArticleType.getByName = function (name) {
        for (var i = 0; i < this.VALUES_ARRAY.length; i++) {
            var result = this.VALUES_ARRAY[i];
            if (result.getName() == name) {
                return result;
            }
        }
        return null;
    };
    ArticleType.get_number = function (value) {
        switch (value) {
            case this.REVIEW_VALUE: return this.REVIEW;
            case this.STUDY_VALUE: return this.STUDY;
        }
        return null;
    };
    ArticleType.prototype.getLiteral = function () {
        return this.literal;
    };
    ArticleType.prototype.getName = function () {
        return this.name;
    };
    ArticleType.prototype.getValue = function () {
        return this.value;
    };
    ArticleType.prototype.toString = function () {
        return this.literal;
    };
    ArticleType.REVIEW_VALUE = 0;
    ArticleType.STUDY_VALUE = 1;
    ArticleType.REVIEW = new ArticleType(0, "REVIEW", "REVIEW");
    ArticleType.STUDY = new ArticleType(1, "STUDY", "STUDY");
    ArticleType.VALUES_ARRAY = [
        ArticleType.REVIEW,
        ArticleType.STUDY
    ];
    return ArticleType;
}());



/***/ }),

/***/ "./src/webpage/CategoryBase.ts":
/*!*************************************!*\
  !*** ./src/webpage/CategoryBase.ts ***!
  \*************************************/
/*! exports provided: CategoryBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryBase", function() { return CategoryBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var CategoryBase = /** @class */ (function (_super) {
    __extends(CategoryBase, _super);
    function CategoryBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = '';
        _this._number = 0;
        _this._articles = null;
        return _this;
    }
    Object.defineProperty(CategoryBase.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryBase.prototype, "number", {
        get: function () {
            return this._number;
        },
        set: function (value) {
            this._number = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryBase.prototype, "articles", {
        get: function () {
            if (this._articles === null) {
                this._articles = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__ARTICLES, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__ARTICLES);
            }
            return this._articles;
        },
        enumerable: false,
        configurable: true
    });
    CategoryBase.prototype.eStaticClass = function () {
        return CategoryBase.eStaticClass;
    };
    CategoryBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__ARTICLES:
                return this.articles;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__NUMBER:
                return this.number;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    CategoryBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__NAME:
                this.name = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__NUMBER:
                this.number = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CATEGORY__ARTICLES:
                this.articles.clear();
                this.articles.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return CategoryBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/CategoryImpl.ts":
/*!*************************************!*\
  !*** ./src/webpage/CategoryImpl.ts ***!
  \*************************************/
/*! exports provided: CategoryImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CategoryImpl", function() { return CategoryImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_CategoryBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/CategoryBase */ "./src/webpage/CategoryBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var CategoryImpl = /** @class */ (function (_super) {
    __extends(CategoryImpl, _super);
    function CategoryImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CategoryImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return CategoryImpl;
}(webpage_CategoryBase__WEBPACK_IMPORTED_MODULE_1__["CategoryBase"]));



/***/ }),

/***/ "./src/webpage/ChapterBase.ts":
/*!************************************!*\
  !*** ./src/webpage/ChapterBase.ts ***!
  \************************************/
/*! exports provided: ChapterBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChapterBase", function() { return ChapterBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var ChapterBase = /** @class */ (function (_super) {
    __extends(ChapterBase, _super);
    function ChapterBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._title = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        _this._subSection = false;
        _this._letters = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        return _this;
    }
    Object.defineProperty(ChapterBase.prototype, "title", {
        get: function () {
            if (this._title === null) {
                this._title = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._title;
        },
        set: function (value) {
            this._title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterBase.prototype, "subSection", {
        get: function () {
            return this._subSection;
        },
        set: function (value) {
            this._subSection = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChapterBase.prototype, "letters", {
        get: function () {
            if (this._letters === null) {
                this._letters = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._letters;
        },
        set: function (value) {
            this._letters = value;
        },
        enumerable: false,
        configurable: true
    });
    ChapterBase.prototype.eStaticClass = function () {
        return ChapterBase.eStaticClass;
    };
    ChapterBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__TITLE:
                return this.title;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__SUB_SECTION:
                return this.subSection;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__LETTERS:
                return this.letters;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    ChapterBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__TITLE:
                this.title.clear();
                this.title.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__SUB_SECTION:
                this.subSection = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].CHAPTER__LETTERS:
                this.letters.clear();
                this.letters.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return ChapterBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/ChapterImpl.ts":
/*!************************************!*\
  !*** ./src/webpage/ChapterImpl.ts ***!
  \************************************/
/*! exports provided: ChapterImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChapterImpl", function() { return ChapterImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_ChapterBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/ChapterBase */ "./src/webpage/ChapterBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var ChapterImpl = /** @class */ (function (_super) {
    __extends(ChapterImpl, _super);
    function ChapterImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChapterImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return ChapterImpl;
}(webpage_ChapterBase__WEBPACK_IMPORTED_MODULE_1__["ChapterBase"]));



/***/ }),

/***/ "./src/webpage/PersonBase.ts":
/*!***********************************!*\
  !*** ./src/webpage/PersonBase.ts ***!
  \***********************************/
/*! exports provided: PersonBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PersonBase", function() { return PersonBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var PersonBase = /** @class */ (function (_super) {
    __extends(PersonBase, _super);
    function PersonBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        _this._surname = '';
        _this._age = 0;
        _this._access_key = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
        _this._articles = null;
        return _this;
    }
    Object.defineProperty(PersonBase.prototype, "name", {
        get: function () {
            if (this._name === null) {
                this._name = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonBase.prototype, "surname", {
        get: function () {
            return this._surname;
        },
        set: function (value) {
            this._surname = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonBase.prototype, "age", {
        get: function () {
            return this._age;
        },
        set: function (value) {
            this._age = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonBase.prototype, "access_key", {
        get: function () {
            if (this._access_key === null) {
                this._access_key = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
            }
            return this._access_key;
        },
        set: function (value) {
            this._access_key = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonBase.prototype, "articles", {
        get: function () {
            if (this._articles === null) {
                this._articles = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ARTICLES, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].ARTICLE__AUTHORS);
            }
            return this._articles;
        },
        enumerable: false,
        configurable: true
    });
    PersonBase.prototype.eStaticClass = function () {
        return PersonBase.eStaticClass;
    };
    PersonBase.prototype.eInverseAdd = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ARTICLES:
                return this.articles.basicAdd(otherEnd, msgs);
        }
        //return this.eInverseAddFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseAdd.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseAddFromPerson = this.eInverseAdd;
    PersonBase.prototype.eInverseRemove = function (otherEnd, featureID, msgs) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ARTICLES:
                return this.articles.basicRemove(otherEnd, msgs);
        }
        //return this.eInverseRemoveFromBasicEObjectImpl(otherEnd, featureID, msgs);
        return _super.prototype.eInverseRemove.call(this, otherEnd, featureID, msgs);
    };
    //public eInverseRemoveFromPerson = this.eInverseRemove;
    PersonBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ARTICLES:
                return this.articles;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__SURNAME:
                return this.surname;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__AGE:
                return this.age;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ACCESS_KEY:
                return this.access_key;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    PersonBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__NAME:
                this.name.clear();
                this.name.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__SURNAME:
                this.surname = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__AGE:
                this.age = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ACCESS_KEY:
                this.access_key.clear();
                this.access_key.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].PERSON__ARTICLES:
                this.articles.clear();
                this.articles.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return PersonBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/PersonImpl.ts":
/*!***********************************!*\
  !*** ./src/webpage/PersonImpl.ts ***!
  \***********************************/
/*! exports provided: PersonImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PersonImpl", function() { return PersonImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_PersonBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/PersonBase */ "./src/webpage/PersonBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var PersonImpl = /** @class */ (function (_super) {
    __extends(PersonImpl, _super);
    function PersonImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PersonImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return PersonImpl;
}(webpage_PersonBase__WEBPACK_IMPORTED_MODULE_1__["PersonBase"]));



/***/ }),

/***/ "./src/webpage/PictureBase.ts":
/*!************************************!*\
  !*** ./src/webpage/PictureBase.ts ***!
  \************************************/
/*! exports provided: PictureBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PictureBase", function() { return PictureBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var PictureBase = /** @class */ (function (_super) {
    __extends(PictureBase, _super);
    function PictureBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = '';
        _this._information = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        _this._number = 0;
        _this._hash = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        return _this;
    }
    Object.defineProperty(PictureBase.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PictureBase.prototype, "information", {
        get: function () {
            if (this._information === null) {
                this._information = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._information;
        },
        set: function (value) {
            this._information = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PictureBase.prototype, "number", {
        get: function () {
            return this._number;
        },
        set: function (value) {
            this._number = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PictureBase.prototype, "hash", {
        get: function () {
            if (this._hash === null) {
                this._hash = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._hash;
        },
        set: function (value) {
            this._hash = value;
        },
        enumerable: false,
        configurable: true
    });
    PictureBase.prototype.eStaticClass = function () {
        return PictureBase.eStaticClass;
    };
    PictureBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__INFORMATION:
                return this.information;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__NUMBER:
                return this.number;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__HASH:
                return this.hash;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    PictureBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__NAME:
                this.name = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__INFORMATION:
                this.information.clear();
                this.information.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__NUMBER:
                this.number = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].PICTURE__HASH:
                this.hash.clear();
                this.hash.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return PictureBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_1__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/PictureImpl.ts":
/*!************************************!*\
  !*** ./src/webpage/PictureImpl.ts ***!
  \************************************/
/*! exports provided: PictureImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PictureImpl", function() { return PictureImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_PictureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/PictureBase */ "./src/webpage/PictureBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var PictureImpl = /** @class */ (function (_super) {
    __extends(PictureImpl, _super);
    function PictureImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PictureImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return PictureImpl;
}(webpage_PictureBase__WEBPACK_IMPORTED_MODULE_1__["PictureBase"]));



/***/ }),

/***/ "./src/webpage/SourceBase.ts":
/*!***********************************!*\
  !*** ./src/webpage/SourceBase.ts ***!
  \***********************************/
/*! exports provided: SourceBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SourceBase", function() { return SourceBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var SourceBase = /** @class */ (function (_super) {
    __extends(SourceBase, _super);
    function SourceBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._title = '';
        _this._url = '';
        _this._page_no = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        _this._authors = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
        return _this;
    }
    Object.defineProperty(SourceBase.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (value) {
            this._title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceBase.prototype, "url", {
        get: function () {
            return this._url;
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceBase.prototype, "page_no", {
        get: function () {
            if (this._page_no === null) {
                this._page_no = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._page_no;
        },
        set: function (value) {
            this._page_no = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SourceBase.prototype, "authors", {
        get: function () {
            if (this._authors === null) {
                this._authors = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
            }
            return this._authors;
        },
        set: function (value) {
            this._authors = value;
        },
        enumerable: false,
        configurable: true
    });
    SourceBase.prototype.eStaticClass = function () {
        return SourceBase.eStaticClass;
    };
    SourceBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__TITLE:
                return this.title;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__URL:
                return this.url;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__PAGE_NO:
                return this.page_no;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__AUTHORS:
                return this.authors;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    SourceBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__TITLE:
                this.title = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__URL:
                this.url = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__PAGE_NO:
                this.page_no.clear();
                this.page_no.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].SOURCE__AUTHORS:
                this.authors.clear();
                this.authors.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return SourceBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/SourceImpl.ts":
/*!***********************************!*\
  !*** ./src/webpage/SourceImpl.ts ***!
  \***********************************/
/*! exports provided: SourceImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SourceImpl", function() { return SourceImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_SourceBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/SourceBase */ "./src/webpage/SourceBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var SourceImpl = /** @class */ (function (_super) {
    __extends(SourceImpl, _super);
    function SourceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SourceImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return SourceImpl;
}(webpage_SourceBase__WEBPACK_IMPORTED_MODULE_1__["SourceBase"]));



/***/ }),

/***/ "./src/webpage/StudentBase.ts":
/*!************************************!*\
  !*** ./src/webpage/StudentBase.ts ***!
  \************************************/
/*! exports provided: StudentBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudentBase", function() { return StudentBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/PersonImpl */ "./src/webpage/PersonImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var StudentBase = /** @class */ (function (_super) {
    __extends(StudentBase, _super);
    function StudentBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._matrikelnr = 0;
        _this._grades = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
        return _this;
    }
    Object.defineProperty(StudentBase.prototype, "matrikelnr", {
        get: function () {
            return this._matrikelnr;
        },
        set: function (value) {
            this._matrikelnr = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StudentBase.prototype, "grades", {
        get: function () {
            if (this._grades === null) {
                this._grades = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"]();
            }
            return this._grades;
        },
        set: function (value) {
            this._grades = value;
        },
        enumerable: false,
        configurable: true
    });
    StudentBase.prototype.eStaticClass = function () {
        return StudentBase.eStaticClass;
    };
    StudentBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__ARTICLES:
                return this.articles;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__SURNAME:
                return this.surname;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__AGE:
                return this.age;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__ACCESS_KEY:
                return this.access_key;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__MATRIKELNR:
                return this.matrikelnr;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__GRADES:
                return this.grades;
        }
        //return this.eGetFromPerson(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    StudentBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__MATRIKELNR:
                this.matrikelnr = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_2__["WebpagePackageLiterals"].STUDENT__GRADES:
                this.grades.clear();
                this.grades.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return StudentBase;
}(webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_1__["PersonImpl"]));



/***/ }),

/***/ "./src/webpage/StudentImpl.ts":
/*!************************************!*\
  !*** ./src/webpage/StudentImpl.ts ***!
  \************************************/
/*! exports provided: StudentImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudentImpl", function() { return StudentImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_StudentBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/StudentBase */ "./src/webpage/StudentBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var StudentImpl = /** @class */ (function (_super) {
    __extends(StudentImpl, _super);
    function StudentImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StudentImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return StudentImpl;
}(webpage_StudentBase__WEBPACK_IMPORTED_MODULE_1__["StudentBase"]));



/***/ }),

/***/ "./src/webpage/WebpageFactoryImpl.ts":
/*!*******************************************!*\
  !*** ./src/webpage/WebpageFactoryImpl.ts ***!
  \*******************************************/
/*! exports provided: WebpageFactoryImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebpageFactoryImpl", function() { return WebpageFactoryImpl; });
/* harmony import */ var ecore_EFactoryImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/EFactoryImpl */ "./node_modules/crossecore/src/EFactoryImpl.ts");
/* harmony import */ var ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/AllInstances */ "./node_modules/crossecore/src/AllInstances.ts");
/* harmony import */ var webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/StudentImpl */ "./src/webpage/StudentImpl.ts");
/* harmony import */ var webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/WebsiteImpl */ "./src/webpage/WebsiteImpl.ts");
/* harmony import */ var webpage_AnimatedPictureImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! webpage/AnimatedPictureImpl */ "./src/webpage/AnimatedPictureImpl.ts");
/* harmony import */ var webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webpage/CategoryImpl */ "./src/webpage/CategoryImpl.ts");
/* harmony import */ var webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! webpage/WebpagePackageImpl */ "./src/webpage/WebpagePackageImpl.ts");
/* harmony import */ var webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! webpage/PictureImpl */ "./src/webpage/PictureImpl.ts");
/* harmony import */ var webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! webpage/PersonImpl */ "./src/webpage/PersonImpl.ts");
/* harmony import */ var webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! webpage/ChapterImpl */ "./src/webpage/ChapterImpl.ts");
/* harmony import */ var webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! webpage/SourceImpl */ "./src/webpage/SourceImpl.ts");
/* harmony import */ var webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! webpage/ArticleImpl */ "./src/webpage/ArticleImpl.ts");
/* harmony import */ var webpage_ArticleType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! webpage/ArticleType */ "./src/webpage/ArticleType.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();













var WebpageFactoryImpl = /** @class */ (function (_super) {
    __extends(WebpageFactoryImpl, _super);
    function WebpageFactoryImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createWebsite = function () {
            var theWebsite = new webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_3__["WebsiteImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theWebsite, "Website");
            return theWebsite;
        };
        _this.createCategory = function () {
            var theCategory = new webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_5__["CategoryImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theCategory, "Category");
            return theCategory;
        };
        _this.createArticle = function () {
            var theArticle = new webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_11__["ArticleImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theArticle, "Article");
            return theArticle;
        };
        _this.createPerson = function () {
            var thePerson = new webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_8__["PersonImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(thePerson, "Person");
            return thePerson;
        };
        _this.createStudent = function () {
            var theStudent = new webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_2__["StudentImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theStudent, "Student");
            return theStudent;
        };
        _this.createChapter = function () {
            var theChapter = new webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_9__["ChapterImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theChapter, "Chapter");
            return theChapter;
        };
        _this.createPicture = function () {
            var thePicture = new webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_7__["PictureImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(thePicture, "Picture");
            return thePicture;
        };
        _this.createSource = function () {
            var theSource = new webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_10__["SourceImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theSource, "Source");
            return theSource;
        };
        _this.createAnimatedPicture = function () {
            var theAnimatedPicture = new webpage_AnimatedPictureImpl__WEBPACK_IMPORTED_MODULE_4__["AnimatedPictureImpl"]();
            ecore_AllInstances__WEBPACK_IMPORTED_MODULE_1__["AllInstances"].INSTANCE.put(theAnimatedPicture, "AnimatedPicture");
            return theAnimatedPicture;
        };
        return _this;
    }
    WebpageFactoryImpl.init = function () {
        return new WebpageFactoryImpl();
    };
    WebpageFactoryImpl.prototype.create = function (eClass) {
        switch (eClass.getClassifierID()) {
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].WEBSITE: return this.createWebsite();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].CATEGORY: return this.createCategory();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].ARTICLE: return this.createArticle();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].PERSON: return this.createPerson();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].STUDENT: return this.createStudent();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].CHAPTER: return this.createChapter();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].PICTURE: return this.createPicture();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].SOURCE: return this.createSource();
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].ANIMATEDPICTURE: return this.createAnimatedPicture();
            default:
                throw new Error("The class '" + eClass.name + "' is not a valid classifier");
        }
    };
    WebpageFactoryImpl.prototype.createFromString = function (eDataType, initialValue) {
        switch (eDataType.getClassifierID()) {
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].ARTICLETYPE:
                return this.createArticleTypeFromString(eDataType, initialValue);
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    };
    WebpageFactoryImpl.prototype.convertToString = function (eDataType, instanceValue) {
        switch (eDataType.getClassifierID()) {
            case webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_6__["WebpagePackageImpl"].ARTICLETYPE:
                return this.convertArticleTypeToString(eDataType, instanceValue);
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    };
    WebpageFactoryImpl.prototype.createArticleTypeFromString = function (eDataType, initialValue) {
        var result = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_12__["ArticleType"].get_string(initialValue);
        if (result == null)
            throw new Error("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.name + "'");
        return result;
    };
    WebpageFactoryImpl.prototype.convertArticleTypeToString = function (eDataType, instanceValue) {
        return instanceValue === null ? null : instanceValue.toString();
    };
    WebpageFactoryImpl.eINSTANCE = WebpageFactoryImpl.init();
    return WebpageFactoryImpl;
}(ecore_EFactoryImpl__WEBPACK_IMPORTED_MODULE_0__["EFactoryImpl"]));



/***/ }),

/***/ "./src/webpage/WebpagePackageImpl.ts":
/*!*******************************************!*\
  !*** ./src/webpage/WebpagePackageImpl.ts ***!
  \*******************************************/
/*! exports provided: WebpagePackageImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebpagePackageImpl", function() { return WebpagePackageImpl; });
/* harmony import */ var ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/EPackageImpl */ "./node_modules/crossecore/src/EPackageImpl.ts");
/* harmony import */ var ecore_EcorePackageImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/EcorePackageImpl */ "./node_modules/crossecore/src/EcorePackageImpl.ts");
/* harmony import */ var ecore_EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecore/EcoreFactoryImpl */ "./node_modules/crossecore/src/EcoreFactoryImpl.ts");
/* harmony import */ var webpage_ArticleBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/ArticleBase */ "./src/webpage/ArticleBase.ts");
/* harmony import */ var webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! webpage/StudentImpl */ "./src/webpage/StudentImpl.ts");
/* harmony import */ var webpage_CategoryBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webpage/CategoryBase */ "./src/webpage/CategoryBase.ts");
/* harmony import */ var webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! webpage/WebsiteImpl */ "./src/webpage/WebsiteImpl.ts");
/* harmony import */ var webpage_SourceBase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! webpage/SourceBase */ "./src/webpage/SourceBase.ts");
/* harmony import */ var webpage_AnimatedPictureImpl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! webpage/AnimatedPictureImpl */ "./src/webpage/AnimatedPictureImpl.ts");
/* harmony import */ var webpage_PictureBase__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! webpage/PictureBase */ "./src/webpage/PictureBase.ts");
/* harmony import */ var webpage_ChapterBase__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! webpage/ChapterBase */ "./src/webpage/ChapterBase.ts");
/* harmony import */ var webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! webpage/CategoryImpl */ "./src/webpage/CategoryImpl.ts");
/* harmony import */ var webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! webpage/PictureImpl */ "./src/webpage/PictureImpl.ts");
/* harmony import */ var webpage_AnimatedPictureBase__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! webpage/AnimatedPictureBase */ "./src/webpage/AnimatedPictureBase.ts");
/* harmony import */ var webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! webpage/PersonImpl */ "./src/webpage/PersonImpl.ts");
/* harmony import */ var webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! webpage/ChapterImpl */ "./src/webpage/ChapterImpl.ts");
/* harmony import */ var webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! webpage/SourceImpl */ "./src/webpage/SourceImpl.ts");
/* harmony import */ var webpage_WebsiteBase__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! webpage/WebsiteBase */ "./src/webpage/WebsiteBase.ts");
/* harmony import */ var webpage_StudentBase__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! webpage/StudentBase */ "./src/webpage/StudentBase.ts");
/* harmony import */ var webpage_PersonBase__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! webpage/PersonBase */ "./src/webpage/PersonBase.ts");
/* harmony import */ var webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! webpage/ArticleImpl */ "./src/webpage/ArticleImpl.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





















var WebpagePackageImpl = /** @class */ (function (_super) {
    __extends(WebpagePackageImpl, _super);
    function WebpagePackageImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isCreated = false;
        _this.createPackageContents = function () {
            if (_this.isCreated)
                return;
            _this.isCreated = true;
            _this.WebsiteEClass = _this.createEClass(WebpagePackageImpl.WEBSITE);
            webpage_WebsiteBase__WEBPACK_IMPORTED_MODULE_17__["WebsiteBase"].eStaticClass = _this.WebsiteEClass;
            _this.createEAttribute(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__NAME);
            _this.createEAttribute(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__TITLE);
            _this.createEAttribute(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__DESCRIPTION);
            _this.createEReference(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__CATEGORIES);
            _this.createEReference(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__PICTURES);
            _this.createEAttribute(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__NUMBER);
            _this.createEAttribute(_this.WebsiteEClass, WebpagePackageImpl.WEBSITE__LINKS);
            _this.CategoryEClass = _this.createEClass(WebpagePackageImpl.CATEGORY);
            webpage_CategoryBase__WEBPACK_IMPORTED_MODULE_5__["CategoryBase"].eStaticClass = _this.CategoryEClass;
            _this.createEAttribute(_this.CategoryEClass, WebpagePackageImpl.CATEGORY__NAME);
            _this.createEReference(_this.CategoryEClass, WebpagePackageImpl.CATEGORY__ARTICLES);
            _this.createEAttribute(_this.CategoryEClass, WebpagePackageImpl.CATEGORY__NUMBER);
            _this.ArticleEClass = _this.createEClass(WebpagePackageImpl.ARTICLE);
            webpage_ArticleBase__WEBPACK_IMPORTED_MODULE_3__["ArticleBase"].eStaticClass = _this.ArticleEClass;
            _this.createEAttribute(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__NAME);
            _this.createEReference(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__CHAPTERS);
            _this.createEReference(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__AUTHORS);
            _this.createEReference(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__PICTURE);
            _this.createEAttribute(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__ARTICLETYPE);
            _this.createEReference(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__RELATED);
            _this.createEReference(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__SOURCES);
            _this.createEAttribute(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__FLAGS);
            _this.createEAttribute(_this.ArticleEClass, WebpagePackageImpl.ARTICLE__NUMBER);
            _this.PersonEClass = _this.createEClass(WebpagePackageImpl.PERSON);
            webpage_PersonBase__WEBPACK_IMPORTED_MODULE_19__["PersonBase"].eStaticClass = _this.PersonEClass;
            _this.createEAttribute(_this.PersonEClass, WebpagePackageImpl.PERSON__NAME);
            _this.createEReference(_this.PersonEClass, WebpagePackageImpl.PERSON__ARTICLES);
            _this.createEAttribute(_this.PersonEClass, WebpagePackageImpl.PERSON__SURNAME);
            _this.createEAttribute(_this.PersonEClass, WebpagePackageImpl.PERSON__AGE);
            _this.createEAttribute(_this.PersonEClass, WebpagePackageImpl.PERSON__ACCESS_KEY);
            _this.StudentEClass = _this.createEClass(WebpagePackageImpl.STUDENT);
            webpage_StudentBase__WEBPACK_IMPORTED_MODULE_18__["StudentBase"].eStaticClass = _this.StudentEClass;
            _this.createEAttribute(_this.StudentEClass, WebpagePackageImpl.STUDENT__MATRIKELNR);
            _this.createEAttribute(_this.StudentEClass, WebpagePackageImpl.STUDENT__GRADES);
            _this.ChapterEClass = _this.createEClass(WebpagePackageImpl.CHAPTER);
            webpage_ChapterBase__WEBPACK_IMPORTED_MODULE_10__["ChapterBase"].eStaticClass = _this.ChapterEClass;
            _this.createEAttribute(_this.ChapterEClass, WebpagePackageImpl.CHAPTER__TITLE);
            _this.createEAttribute(_this.ChapterEClass, WebpagePackageImpl.CHAPTER__SUB_SECTION);
            _this.createEAttribute(_this.ChapterEClass, WebpagePackageImpl.CHAPTER__LETTERS);
            _this.PictureEClass = _this.createEClass(WebpagePackageImpl.PICTURE);
            webpage_PictureBase__WEBPACK_IMPORTED_MODULE_9__["PictureBase"].eStaticClass = _this.PictureEClass;
            _this.createEAttribute(_this.PictureEClass, WebpagePackageImpl.PICTURE__NAME);
            _this.createEAttribute(_this.PictureEClass, WebpagePackageImpl.PICTURE__INFORMATION);
            _this.createEAttribute(_this.PictureEClass, WebpagePackageImpl.PICTURE__NUMBER);
            _this.createEAttribute(_this.PictureEClass, WebpagePackageImpl.PICTURE__HASH);
            _this.SourceEClass = _this.createEClass(WebpagePackageImpl.SOURCE);
            webpage_SourceBase__WEBPACK_IMPORTED_MODULE_7__["SourceBase"].eStaticClass = _this.SourceEClass;
            _this.createEAttribute(_this.SourceEClass, WebpagePackageImpl.SOURCE__TITLE);
            _this.createEAttribute(_this.SourceEClass, WebpagePackageImpl.SOURCE__URL);
            _this.createEAttribute(_this.SourceEClass, WebpagePackageImpl.SOURCE__PAGE_NO);
            _this.createEAttribute(_this.SourceEClass, WebpagePackageImpl.SOURCE__AUTHORS);
            _this.AnimatedPictureEClass = _this.createEClass(WebpagePackageImpl.ANIMATEDPICTURE);
            webpage_AnimatedPictureBase__WEBPACK_IMPORTED_MODULE_13__["AnimatedPictureBase"].eStaticClass = _this.AnimatedPictureEClass;
            _this.createEAttribute(_this.AnimatedPictureEClass, WebpagePackageImpl.ANIMATED_PICTURE__REPEAT);
            _this.ArticleTypeEEnum = _this.createEEnum(WebpagePackageImpl.ARTICLETYPE);
        };
        _this.isInitialized = false;
        _this.initializePackageContents = function () {
            if (_this.isInitialized)
                return;
            _this.isInitialized = true;
            // Initialize package
            _this.name = WebpagePackageImpl.eNAME;
            _this.nsPrefix = WebpagePackageImpl.eNS_PREFIX;
            _this.nsURI = WebpagePackageImpl.eNS_URI;
            _this.StudentEClass.eSuperTypes.add(_this.getPerson());
            _this.AnimatedPictureEClass.eSuperTypes.add(_this.getPicture());
            var op = null;
            _this.initEClass(_this.WebsiteEClass, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], "Website", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getWebsite_Name(), _this.ecorePackage.getEString(), "name", null, 0, 1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getWebsite_Title(), _this.ecorePackage.getEString(), "title", null, 0, 1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getWebsite_Description(), _this.ecorePackage.getEString(), "description", null, 0, 1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getWebsite_Number(), _this.ecorePackage.getEDouble(), "number", "0.0", 0, 1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getWebsite_Links(), _this.ecorePackage.getEString(), "links", null, 0, -1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getWebsite_Categories(), _this.getCategory(), null, "categories", null, 0, -1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getWebsite_Pictures(), _this.getPicture(), null, "pictures", null, 1, -1, webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_6__["WebsiteImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.CategoryEClass, webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_11__["CategoryImpl"], "Category", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getCategory_Name(), _this.ecorePackage.getEString(), "name", null, 0, 1, webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_11__["CategoryImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getCategory_Number(), _this.ecorePackage.getEShort(), "number", "0", 0, 1, webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_11__["CategoryImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getCategory_Articles(), _this.getArticle(), null, "articles", null, 0, -1, webpage_CategoryImpl__WEBPACK_IMPORTED_MODULE_11__["CategoryImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.ArticleEClass, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], "Article", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getArticle_Name(), _this.ecorePackage.getEString(), "name", null, 0, 1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getArticle_Articletype(), _this.getArticleType(), "articletype", "REVIEW", 0, 1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getArticle_Flags(), _this.ecorePackage.getEBoolean(), "flags", null, 0, -1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getArticle_Number(), _this.ecorePackage.getEFloat(), "number", "0.0", 0, 1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getArticle_Chapters(), _this.getChapter(), null, "chapters", null, 0, -1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getArticle_Authors(), _this.getPerson(), _this.getPerson_Articles(), "authors", null, 1, -1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getArticle_Picture(), _this.getPicture(), null, "picture", null, 1, 1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getArticle_Related(), _this.getArticle(), null, "related", null, 0, -1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getArticle_Sources(), _this.getSource(), null, "sources", null, 0, -1, webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_20__["ArticleImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.PersonEClass, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], "Person", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getPerson_Name(), _this.ecorePackage.getEString(), "name", null, 0, -1, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPerson_Surname(), _this.ecorePackage.getEString(), "surname", null, 0, 1, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPerson_Age(), _this.ecorePackage.getEShort(), "age", "0", 0, 1, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPerson_Access_key(), _this.ecorePackage.getEChar(), "access_key", null, 0, 256, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEReference(_this.getPerson_Articles(), _this.getArticle(), _this.getArticle_Authors(), "articles", null, 0, -1, webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_14__["PersonImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_COMPOSITE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_RESOLVE_PROXIES, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.StudentEClass, webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_4__["StudentImpl"], "Student", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getStudent_Matrikelnr(), _this.ecorePackage.getELong(), "matrikelnr", "0", 0, 1, webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_4__["StudentImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getStudent_Grades(), _this.ecorePackage.getEFloat(), "grades", null, 0, -1, webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_4__["StudentImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.ChapterEClass, webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_15__["ChapterImpl"], "Chapter", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getChapter_Title(), _this.ecorePackage.getEString(), "title", null, 0, -1, webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_15__["ChapterImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getChapter_SubSection(), _this.ecorePackage.getEBoolean(), "subSection", "false", 0, 1, webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_15__["ChapterImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getChapter_Letters(), _this.ecorePackage.getEChar(), "letters", null, 0, -1, webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_15__["ChapterImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.PictureEClass, webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__["PictureImpl"], "Picture", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getPicture_Name(), _this.ecorePackage.getEString(), "name", null, 0, 1, webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__["PictureImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPicture_Information(), _this.ecorePackage.getEChar(), "information", null, 0, -1, webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__["PictureImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPicture_Number(), _this.ecorePackage.getEInt(), "number", "0", 0, 1, webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__["PictureImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getPicture_Hash(), _this.ecorePackage.getEBoolean(), "hash", null, 0, -1, webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_12__["PictureImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.SourceEClass, webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__["SourceImpl"], "Source", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getSource_Title(), _this.ecorePackage.getEString(), "title", null, 0, 1, webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__["SourceImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getSource_Url(), _this.ecorePackage.getEString(), "url", null, 0, 1, webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__["SourceImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getSource_Page_no(), _this.ecorePackage.getEInt(), "page_no", null, 0, -1, webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__["SourceImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEAttribute_EClassifier(_this.getSource_Authors(), _this.ecorePackage.getEString(), "authors", null, 0, -1, webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_16__["SourceImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            _this.initEClass(_this.AnimatedPictureEClass, webpage_AnimatedPictureImpl__WEBPACK_IMPORTED_MODULE_8__["AnimatedPictureImpl"], "AnimatedPicture", !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ABSTRACT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_INTERFACE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_GENERATED_INSTANCE_CLASS);
            _this.initEAttribute_EClassifier(_this.getAnimatedPicture_Repeat(), _this.ecorePackage.getEBoolean(), "repeat", "false", 0, 1, webpage_AnimatedPictureImpl__WEBPACK_IMPORTED_MODULE_8__["AnimatedPictureImpl"], !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_TRANSIENT, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_VOLATILE, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_CHANGEABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNSETTABLE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ID, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_UNIQUE, !ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_DERIVED, ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"].IS_ORDERED);
            // this.initEDataType(this.ArticleTypeEDataType, null, "ArticleType", EPackageImpl.IS_SERIALIZABLE, !EPackageImpl.IS_GENERATED_INSTANCE_CLASS);
            _this.initEEnum(_this.ArticleTypeEEnum, null, "ArticleType");
        };
        _this.WebsiteEClass = null;
        _this.CategoryEClass = null;
        _this.ArticleEClass = null;
        _this.PersonEClass = null;
        _this.StudentEClass = null;
        _this.ChapterEClass = null;
        _this.PictureEClass = null;
        _this.SourceEClass = null;
        _this.AnimatedPictureEClass = null;
        _this.ArticleTypeEEnum = null;
        _this.getWebsite = function () { return _this.WebsiteEClass; };
        _this.getWebsite_Name = function () { return _this.WebsiteEClass.eStructuralFeatures.at(0); };
        _this.getWebsite_Title = function () { return _this.WebsiteEClass.eStructuralFeatures.at(1); };
        _this.getWebsite_Description = function () { return _this.WebsiteEClass.eStructuralFeatures.at(2); };
        _this.getWebsite_Categories = function () { return _this.WebsiteEClass.eStructuralFeatures.at(3); };
        _this.getWebsite_Pictures = function () { return _this.WebsiteEClass.eStructuralFeatures.at(4); };
        _this.getWebsite_Number = function () { return _this.WebsiteEClass.eStructuralFeatures.at(5); };
        _this.getWebsite_Links = function () { return _this.WebsiteEClass.eStructuralFeatures.at(6); };
        _this.getCategory = function () { return _this.CategoryEClass; };
        _this.getCategory_Name = function () { return _this.CategoryEClass.eStructuralFeatures.at(0); };
        _this.getCategory_Articles = function () { return _this.CategoryEClass.eStructuralFeatures.at(1); };
        _this.getCategory_Number = function () { return _this.CategoryEClass.eStructuralFeatures.at(2); };
        _this.getArticle = function () { return _this.ArticleEClass; };
        _this.getArticle_Name = function () { return _this.ArticleEClass.eStructuralFeatures.at(0); };
        _this.getArticle_Chapters = function () { return _this.ArticleEClass.eStructuralFeatures.at(1); };
        _this.getArticle_Authors = function () { return _this.ArticleEClass.eStructuralFeatures.at(2); };
        _this.getArticle_Picture = function () { return _this.ArticleEClass.eStructuralFeatures.at(3); };
        _this.getArticle_Articletype = function () { return _this.ArticleEClass.eStructuralFeatures.at(4); };
        _this.getArticle_Related = function () { return _this.ArticleEClass.eStructuralFeatures.at(5); };
        _this.getArticle_Sources = function () { return _this.ArticleEClass.eStructuralFeatures.at(6); };
        _this.getArticle_Flags = function () { return _this.ArticleEClass.eStructuralFeatures.at(7); };
        _this.getArticle_Number = function () { return _this.ArticleEClass.eStructuralFeatures.at(8); };
        _this.getPerson = function () { return _this.PersonEClass; };
        _this.getPerson_Name = function () { return _this.PersonEClass.eStructuralFeatures.at(0); };
        _this.getPerson_Articles = function () { return _this.PersonEClass.eStructuralFeatures.at(1); };
        _this.getPerson_Surname = function () { return _this.PersonEClass.eStructuralFeatures.at(2); };
        _this.getPerson_Age = function () { return _this.PersonEClass.eStructuralFeatures.at(3); };
        _this.getPerson_Access_key = function () { return _this.PersonEClass.eStructuralFeatures.at(4); };
        _this.getStudent = function () { return _this.StudentEClass; };
        _this.getStudent_Matrikelnr = function () { return _this.StudentEClass.eStructuralFeatures.at(0); };
        _this.getStudent_Grades = function () { return _this.StudentEClass.eStructuralFeatures.at(1); };
        _this.getChapter = function () { return _this.ChapterEClass; };
        _this.getChapter_Title = function () { return _this.ChapterEClass.eStructuralFeatures.at(0); };
        _this.getChapter_SubSection = function () { return _this.ChapterEClass.eStructuralFeatures.at(1); };
        _this.getChapter_Letters = function () { return _this.ChapterEClass.eStructuralFeatures.at(2); };
        _this.getPicture = function () { return _this.PictureEClass; };
        _this.getPicture_Name = function () { return _this.PictureEClass.eStructuralFeatures.at(0); };
        _this.getPicture_Information = function () { return _this.PictureEClass.eStructuralFeatures.at(1); };
        _this.getPicture_Number = function () { return _this.PictureEClass.eStructuralFeatures.at(2); };
        _this.getPicture_Hash = function () { return _this.PictureEClass.eStructuralFeatures.at(3); };
        _this.getSource = function () { return _this.SourceEClass; };
        _this.getSource_Title = function () { return _this.SourceEClass.eStructuralFeatures.at(0); };
        _this.getSource_Url = function () { return _this.SourceEClass.eStructuralFeatures.at(1); };
        _this.getSource_Page_no = function () { return _this.SourceEClass.eStructuralFeatures.at(2); };
        _this.getSource_Authors = function () { return _this.SourceEClass.eStructuralFeatures.at(3); };
        _this.getAnimatedPicture = function () { return _this.AnimatedPictureEClass; };
        _this.getAnimatedPicture_Repeat = function () { return _this.AnimatedPictureEClass.eStructuralFeatures.at(0); };
        _this.getArticleType = function () { return _this.ArticleTypeEEnum; };
        return _this;
        /*
        public static Literals = {
            WEBSITE: WebpagePackageImpl.eINSTANCE.getWebsite(),
            
            CATEGORY: WebpagePackageImpl.eINSTANCE.getCategory(),
            
            ARTICLE: WebpagePackageImpl.eINSTANCE.getArticle(),
            
            ARTICLETYPE: WebpagePackageImpl.eINSTANCE.getArticleType(),
            PERSON: WebpagePackageImpl.eINSTANCE.getPerson(),
            
            STUDENT: WebpagePackageImpl.eINSTANCE.getStudent(),
            
            CHAPTER: WebpagePackageImpl.eINSTANCE.getChapter(),
            
            PICTURE: WebpagePackageImpl.eINSTANCE.getPicture(),
            
            SOURCE: WebpagePackageImpl.eINSTANCE.getSource(),
            
            ANIMATEDPICTURE: WebpagePackageImpl.eINSTANCE.getAnimatedPicture(),
            
            WEBSITE__NAME: WebpagePackageImpl.eINSTANCE.getWebsite_Name(),
            WEBSITE__TITLE: WebpagePackageImpl.eINSTANCE.getWebsite_Title(),
            WEBSITE__DESCRIPTION: WebpagePackageImpl.eINSTANCE.getWebsite_Description(),
            WEBSITE__CATEGORIES: WebpagePackageImpl.eINSTANCE.getWebsite_Categories(),
            WEBSITE__PICTURES: WebpagePackageImpl.eINSTANCE.getWebsite_Pictures(),
            WEBSITE__NUMBER: WebpagePackageImpl.eINSTANCE.getWebsite_Number(),
            WEBSITE__LINKS: WebpagePackageImpl.eINSTANCE.getWebsite_Links(),
            CATEGORY__NAME: WebpagePackageImpl.eINSTANCE.getCategory_Name(),
            CATEGORY__ARTICLES: WebpagePackageImpl.eINSTANCE.getCategory_Articles(),
            CATEGORY__NUMBER: WebpagePackageImpl.eINSTANCE.getCategory_Number(),
            ARTICLE__NAME: WebpagePackageImpl.eINSTANCE.getArticle_Name(),
            ARTICLE__CHAPTERS: WebpagePackageImpl.eINSTANCE.getArticle_Chapters(),
            ARTICLE__AUTHORS: WebpagePackageImpl.eINSTANCE.getArticle_Authors(),
            ARTICLE__PICTURE: WebpagePackageImpl.eINSTANCE.getArticle_Picture(),
            ARTICLE__ARTICLETYPE: WebpagePackageImpl.eINSTANCE.getArticle_Articletype(),
            ARTICLE__RELATED: WebpagePackageImpl.eINSTANCE.getArticle_Related(),
            ARTICLE__SOURCES: WebpagePackageImpl.eINSTANCE.getArticle_Sources(),
            ARTICLE__FLAGS: WebpagePackageImpl.eINSTANCE.getArticle_Flags(),
            ARTICLE__NUMBER: WebpagePackageImpl.eINSTANCE.getArticle_Number(),
            PERSON__NAME: WebpagePackageImpl.eINSTANCE.getPerson_Name(),
            PERSON__ARTICLES: WebpagePackageImpl.eINSTANCE.getPerson_Articles(),
            PERSON__SURNAME: WebpagePackageImpl.eINSTANCE.getPerson_Surname(),
            PERSON__AGE: WebpagePackageImpl.eINSTANCE.getPerson_Age(),
            PERSON__ACCESS_KEY: WebpagePackageImpl.eINSTANCE.getPerson_Access_key(),
            STUDENT__MATRIKELNR: WebpagePackageImpl.eINSTANCE.getStudent_Matrikelnr(),
            STUDENT__GRADES: WebpagePackageImpl.eINSTANCE.getStudent_Grades(),
            CHAPTER__TITLE: WebpagePackageImpl.eINSTANCE.getChapter_Title(),
            CHAPTER__SUB_SECTION: WebpagePackageImpl.eINSTANCE.getChapter_SubSection(),
            CHAPTER__LETTERS: WebpagePackageImpl.eINSTANCE.getChapter_Letters(),
            PICTURE__NAME: WebpagePackageImpl.eINSTANCE.getPicture_Name(),
            PICTURE__INFORMATION: WebpagePackageImpl.eINSTANCE.getPicture_Information(),
            PICTURE__NUMBER: WebpagePackageImpl.eINSTANCE.getPicture_Number(),
            PICTURE__HASH: WebpagePackageImpl.eINSTANCE.getPicture_Hash(),
            SOURCE__TITLE: WebpagePackageImpl.eINSTANCE.getSource_Title(),
            SOURCE__URL: WebpagePackageImpl.eINSTANCE.getSource_Url(),
            SOURCE__PAGE_NO: WebpagePackageImpl.eINSTANCE.getSource_Page_no(),
            SOURCE__AUTHORS: WebpagePackageImpl.eINSTANCE.getSource_Authors(),
            ANIMATED_PICTURE__REPEAT: WebpagePackageImpl.eINSTANCE.getAnimatedPicture_Repeat(),
            ARTICLETYPE: WebpagePackageImpl.eINSTANCE.getArticleType()
        }
        */
    }
    /*
    constructor(){
        //no private constructors in TypeScript
        super(WebpagePackageImpl.eNS_URI, WebpageFactoryImpl.eINSTANCE as any as EFactory);
    }
    */
    WebpagePackageImpl.init = function () {
        // Obtain or create and register package
        var theWebpagePackage = new WebpagePackageImpl();
        theWebpagePackage.ecorePackage = ecore_EcorePackageImpl__WEBPACK_IMPORTED_MODULE_1__["EcorePackageImpl"].eINSTANCE;
        theWebpagePackage.ecoreFactory = ecore_EcoreFactoryImpl__WEBPACK_IMPORTED_MODULE_2__["EcoreFactoryImpl"].eINSTANCE;
        // Create package meta-data objects
        theWebpagePackage.createPackageContents();
        // Initialize created meta-data
        theWebpagePackage.initializePackageContents();
        return theWebpagePackage;
    };
    WebpagePackageImpl.eNAME = "webpage";
    WebpagePackageImpl.eNS_URI = "http://www.xmibypeterfollowingthetutoria.ls/webpage";
    WebpagePackageImpl.eNS_PREFIX = "webpage";
    WebpagePackageImpl.WEBSITE = 0;
    WebpagePackageImpl.WEBSITE_FEATURE_COUNT = 7;
    WebpagePackageImpl.WEBSITE_OPERATION_COUNT = 0;
    WebpagePackageImpl.WEBSITE__NAME = 0;
    WebpagePackageImpl.WEBSITE__TITLE = 1;
    WebpagePackageImpl.WEBSITE__DESCRIPTION = 2;
    WebpagePackageImpl.WEBSITE__CATEGORIES = 3;
    WebpagePackageImpl.WEBSITE__PICTURES = 4;
    WebpagePackageImpl.WEBSITE__NUMBER = 5;
    WebpagePackageImpl.WEBSITE__LINKS = 6;
    WebpagePackageImpl.CATEGORY = 1;
    WebpagePackageImpl.CATEGORY_FEATURE_COUNT = 3;
    WebpagePackageImpl.CATEGORY_OPERATION_COUNT = 0;
    WebpagePackageImpl.CATEGORY__NAME = 0;
    WebpagePackageImpl.CATEGORY__ARTICLES = 1;
    WebpagePackageImpl.CATEGORY__NUMBER = 2;
    WebpagePackageImpl.ARTICLE = 2;
    WebpagePackageImpl.ARTICLE_FEATURE_COUNT = 9;
    WebpagePackageImpl.ARTICLE_OPERATION_COUNT = 0;
    WebpagePackageImpl.ARTICLE__NAME = 0;
    WebpagePackageImpl.ARTICLE__CHAPTERS = 1;
    WebpagePackageImpl.ARTICLE__AUTHORS = 2;
    WebpagePackageImpl.ARTICLE__PICTURE = 3;
    WebpagePackageImpl.ARTICLE__ARTICLETYPE = 4;
    WebpagePackageImpl.ARTICLE__RELATED = 5;
    WebpagePackageImpl.ARTICLE__SOURCES = 6;
    WebpagePackageImpl.ARTICLE__FLAGS = 7;
    WebpagePackageImpl.ARTICLE__NUMBER = 8;
    WebpagePackageImpl.PERSON = 4;
    WebpagePackageImpl.PERSON_FEATURE_COUNT = 5;
    WebpagePackageImpl.PERSON_OPERATION_COUNT = 0;
    WebpagePackageImpl.PERSON__NAME = 0;
    WebpagePackageImpl.PERSON__ARTICLES = 1;
    WebpagePackageImpl.PERSON__SURNAME = 2;
    WebpagePackageImpl.PERSON__AGE = 3;
    WebpagePackageImpl.PERSON__ACCESS_KEY = 4;
    WebpagePackageImpl.STUDENT = 5;
    WebpagePackageImpl.STUDENT_FEATURE_COUNT = WebpagePackageImpl.PERSON_FEATURE_COUNT + 2;
    WebpagePackageImpl.STUDENT_OPERATION_COUNT = WebpagePackageImpl.PERSON_OPERATION_COUNT + 0;
    WebpagePackageImpl.STUDENT__NAME = 0;
    WebpagePackageImpl.STUDENT__ARTICLES = 1;
    WebpagePackageImpl.STUDENT__SURNAME = 2;
    WebpagePackageImpl.STUDENT__AGE = 3;
    WebpagePackageImpl.STUDENT__ACCESS_KEY = 4;
    WebpagePackageImpl.STUDENT__MATRIKELNR = 5;
    WebpagePackageImpl.STUDENT__GRADES = 6;
    WebpagePackageImpl.CHAPTER = 6;
    WebpagePackageImpl.CHAPTER_FEATURE_COUNT = 3;
    WebpagePackageImpl.CHAPTER_OPERATION_COUNT = 0;
    WebpagePackageImpl.CHAPTER__TITLE = 0;
    WebpagePackageImpl.CHAPTER__SUB_SECTION = 1;
    WebpagePackageImpl.CHAPTER__LETTERS = 2;
    WebpagePackageImpl.PICTURE = 7;
    WebpagePackageImpl.PICTURE_FEATURE_COUNT = 4;
    WebpagePackageImpl.PICTURE_OPERATION_COUNT = 0;
    WebpagePackageImpl.PICTURE__NAME = 0;
    WebpagePackageImpl.PICTURE__INFORMATION = 1;
    WebpagePackageImpl.PICTURE__NUMBER = 2;
    WebpagePackageImpl.PICTURE__HASH = 3;
    WebpagePackageImpl.SOURCE = 8;
    WebpagePackageImpl.SOURCE_FEATURE_COUNT = 4;
    WebpagePackageImpl.SOURCE_OPERATION_COUNT = 0;
    WebpagePackageImpl.SOURCE__TITLE = 0;
    WebpagePackageImpl.SOURCE__URL = 1;
    WebpagePackageImpl.SOURCE__PAGE_NO = 2;
    WebpagePackageImpl.SOURCE__AUTHORS = 3;
    WebpagePackageImpl.ANIMATEDPICTURE = 9;
    WebpagePackageImpl.ANIMATEDPICTURE_FEATURE_COUNT = WebpagePackageImpl.PICTURE_FEATURE_COUNT + 1;
    WebpagePackageImpl.ANIMATEDPICTURE_OPERATION_COUNT = WebpagePackageImpl.PICTURE_OPERATION_COUNT + 0;
    WebpagePackageImpl.ANIMATED_PICTURE__NAME = 0;
    WebpagePackageImpl.ANIMATED_PICTURE__INFORMATION = 1;
    WebpagePackageImpl.ANIMATED_PICTURE__NUMBER = 2;
    WebpagePackageImpl.ANIMATED_PICTURE__HASH = 3;
    WebpagePackageImpl.ANIMATED_PICTURE__REPEAT = 4;
    WebpagePackageImpl.ARTICLETYPE = 3;
    /*Important: Call init() AFTER metaobject ids have been assigned.*/
    WebpagePackageImpl.eINSTANCE = WebpagePackageImpl.init();
    return WebpagePackageImpl;
}(ecore_EPackageImpl__WEBPACK_IMPORTED_MODULE_0__["EPackageImpl"]));



/***/ }),

/***/ "./src/webpage/WebpagePackageLiterals.ts":
/*!***********************************************!*\
  !*** ./src/webpage/WebpagePackageLiterals.ts ***!
  \***********************************************/
/*! exports provided: WebpagePackageLiterals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebpagePackageLiterals", function() { return WebpagePackageLiterals; });
var WebpagePackageLiterals = /** @class */ (function () {
    function WebpagePackageLiterals() {
    }
    WebpagePackageLiterals.WEBSITE = 0;
    WebpagePackageLiterals.WEBSITE_FEATURE_COUNT = 7;
    WebpagePackageLiterals.WEBSITE_OPERATION_COUNT = 0;
    WebpagePackageLiterals.WEBSITE__NAME = 0;
    WebpagePackageLiterals.WEBSITE__TITLE = 1;
    WebpagePackageLiterals.WEBSITE__DESCRIPTION = 2;
    WebpagePackageLiterals.WEBSITE__CATEGORIES = 3;
    WebpagePackageLiterals.WEBSITE__PICTURES = 4;
    WebpagePackageLiterals.WEBSITE__NUMBER = 5;
    WebpagePackageLiterals.WEBSITE__LINKS = 6;
    WebpagePackageLiterals.CATEGORY = 1;
    WebpagePackageLiterals.CATEGORY_FEATURE_COUNT = 3;
    WebpagePackageLiterals.CATEGORY_OPERATION_COUNT = 0;
    WebpagePackageLiterals.CATEGORY__NAME = 0;
    WebpagePackageLiterals.CATEGORY__ARTICLES = 1;
    WebpagePackageLiterals.CATEGORY__NUMBER = 2;
    WebpagePackageLiterals.ARTICLE = 2;
    WebpagePackageLiterals.ARTICLE_FEATURE_COUNT = 9;
    WebpagePackageLiterals.ARTICLE_OPERATION_COUNT = 0;
    WebpagePackageLiterals.ARTICLE__NAME = 0;
    WebpagePackageLiterals.ARTICLE__CHAPTERS = 1;
    WebpagePackageLiterals.ARTICLE__AUTHORS = 2;
    WebpagePackageLiterals.ARTICLE__PICTURE = 3;
    WebpagePackageLiterals.ARTICLE__ARTICLETYPE = 4;
    WebpagePackageLiterals.ARTICLE__RELATED = 5;
    WebpagePackageLiterals.ARTICLE__SOURCES = 6;
    WebpagePackageLiterals.ARTICLE__FLAGS = 7;
    WebpagePackageLiterals.ARTICLE__NUMBER = 8;
    WebpagePackageLiterals.PERSON = 4;
    WebpagePackageLiterals.PERSON_FEATURE_COUNT = 5;
    WebpagePackageLiterals.PERSON_OPERATION_COUNT = 0;
    WebpagePackageLiterals.PERSON__NAME = 0;
    WebpagePackageLiterals.PERSON__ARTICLES = 1;
    WebpagePackageLiterals.PERSON__SURNAME = 2;
    WebpagePackageLiterals.PERSON__AGE = 3;
    WebpagePackageLiterals.PERSON__ACCESS_KEY = 4;
    WebpagePackageLiterals.STUDENT = 5;
    WebpagePackageLiterals.STUDENT_FEATURE_COUNT = WebpagePackageLiterals.PERSON_FEATURE_COUNT + 2;
    WebpagePackageLiterals.STUDENT_OPERATION_COUNT = WebpagePackageLiterals.PERSON_OPERATION_COUNT + 0;
    WebpagePackageLiterals.STUDENT__NAME = 0;
    WebpagePackageLiterals.STUDENT__ARTICLES = 1;
    WebpagePackageLiterals.STUDENT__SURNAME = 2;
    WebpagePackageLiterals.STUDENT__AGE = 3;
    WebpagePackageLiterals.STUDENT__ACCESS_KEY = 4;
    WebpagePackageLiterals.STUDENT__MATRIKELNR = 5;
    WebpagePackageLiterals.STUDENT__GRADES = 6;
    WebpagePackageLiterals.CHAPTER = 6;
    WebpagePackageLiterals.CHAPTER_FEATURE_COUNT = 3;
    WebpagePackageLiterals.CHAPTER_OPERATION_COUNT = 0;
    WebpagePackageLiterals.CHAPTER__TITLE = 0;
    WebpagePackageLiterals.CHAPTER__SUB_SECTION = 1;
    WebpagePackageLiterals.CHAPTER__LETTERS = 2;
    WebpagePackageLiterals.PICTURE = 7;
    WebpagePackageLiterals.PICTURE_FEATURE_COUNT = 4;
    WebpagePackageLiterals.PICTURE_OPERATION_COUNT = 0;
    WebpagePackageLiterals.PICTURE__NAME = 0;
    WebpagePackageLiterals.PICTURE__INFORMATION = 1;
    WebpagePackageLiterals.PICTURE__NUMBER = 2;
    WebpagePackageLiterals.PICTURE__HASH = 3;
    WebpagePackageLiterals.SOURCE = 8;
    WebpagePackageLiterals.SOURCE_FEATURE_COUNT = 4;
    WebpagePackageLiterals.SOURCE_OPERATION_COUNT = 0;
    WebpagePackageLiterals.SOURCE__TITLE = 0;
    WebpagePackageLiterals.SOURCE__URL = 1;
    WebpagePackageLiterals.SOURCE__PAGE_NO = 2;
    WebpagePackageLiterals.SOURCE__AUTHORS = 3;
    WebpagePackageLiterals.ANIMATEDPICTURE = 9;
    WebpagePackageLiterals.ANIMATEDPICTURE_FEATURE_COUNT = WebpagePackageLiterals.PICTURE_FEATURE_COUNT + 1;
    WebpagePackageLiterals.ANIMATEDPICTURE_OPERATION_COUNT = WebpagePackageLiterals.PICTURE_OPERATION_COUNT + 0;
    WebpagePackageLiterals.ANIMATED_PICTURE__NAME = 0;
    WebpagePackageLiterals.ANIMATED_PICTURE__INFORMATION = 1;
    WebpagePackageLiterals.ANIMATED_PICTURE__NUMBER = 2;
    WebpagePackageLiterals.ANIMATED_PICTURE__HASH = 3;
    WebpagePackageLiterals.ANIMATED_PICTURE__REPEAT = 4;
    WebpagePackageLiterals.ARTICLETYPE = 3;
    return WebpagePackageLiterals;
}());



/***/ }),

/***/ "./src/webpage/WebsiteBase.ts":
/*!************************************!*\
  !*** ./src/webpage/WebsiteBase.ts ***!
  \************************************/
/*! exports provided: WebsiteBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebsiteBase", function() { return WebsiteBase; });
/* harmony import */ var ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/OrderedSet */ "./node_modules/crossecore/src/OrderedSet.ts");
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecore/BasicEObjectImpl */ "./node_modules/crossecore/src/BasicEObjectImpl.ts");
/* harmony import */ var webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/WebpagePackageLiterals */ "./src/webpage/WebpagePackageLiterals.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var WebsiteBase = /** @class */ (function (_super) {
    __extends(WebsiteBase, _super);
    function WebsiteBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._name = '';
        _this._title = '';
        _this._description = '';
        _this._number = 0.0;
        _this._links = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
        _this._categories = null;
        _this._pictures = null;
        return _this;
    }
    Object.defineProperty(WebsiteBase.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (value) {
            this._title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (value) {
            this._description = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "number", {
        get: function () {
            return this._number;
        },
        set: function (value) {
            this._number = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "links", {
        get: function () {
            if (this._links === null) {
                this._links = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"]();
            }
            return this._links;
        },
        set: function (value) {
            this._links = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "categories", {
        get: function () {
            if (this._categories === null) {
                this._categories = new ecore_OrderedSet__WEBPACK_IMPORTED_MODULE_0__["OrderedSet"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__CATEGORIES, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__CATEGORIES);
            }
            return this._categories;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebsiteBase.prototype, "pictures", {
        get: function () {
            if (this._pictures === null) {
                this._pictures = new ecore_Set__WEBPACK_IMPORTED_MODULE_1__["Set"](this, webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__PICTURES, ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"].EOPPOSITE_FEATURE_BASE - webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__PICTURES);
            }
            return this._pictures;
        },
        enumerable: false,
        configurable: true
    });
    WebsiteBase.prototype.eStaticClass = function () {
        return WebsiteBase.eStaticClass;
    };
    WebsiteBase.prototype.eGet_number_boolean_boolean = function (featureID, resolve, coreType) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__NAME:
                return this.name;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__TITLE:
                return this.title;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__DESCRIPTION:
                return this.description;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__CATEGORIES:
                return this.categories;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__PICTURES:
                return this.pictures;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__NUMBER:
                return this.number;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__LINKS:
                return this.links;
        }
        //return this.eGetFromBasicEObjectImpl(featureID, resolve, coreType);
        return _super.prototype.eGet.call(this, featureID, resolve, coreType);
    };
    WebsiteBase.prototype.eSet_number_any = function (featureID, newValue) {
        switch (featureID) {
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__NAME:
                this.name = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__TITLE:
                this.title = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__DESCRIPTION:
                this.description = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__NUMBER:
                this.number = newValue;
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__LINKS:
                this.links.clear();
                this.links.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__CATEGORIES:
                this.categories.clear();
                this.categories.addAll(newValue);
                return;
            case webpage_WebpagePackageLiterals__WEBPACK_IMPORTED_MODULE_3__["WebpagePackageLiterals"].WEBSITE__PICTURES:
                this.pictures.clear();
                this.pictures.addAll(newValue);
                return;
        }
        _super.prototype.eSet_number_any.call(this, featureID, newValue);
    };
    return WebsiteBase;
}(ecore_BasicEObjectImpl__WEBPACK_IMPORTED_MODULE_2__["BasicEObjectImpl"]));



/***/ }),

/***/ "./src/webpage/WebsiteImpl.ts":
/*!************************************!*\
  !*** ./src/webpage/WebsiteImpl.ts ***!
  \************************************/
/*! exports provided: WebsiteImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebsiteImpl", function() { return WebsiteImpl; });
/* harmony import */ var ecore_Set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/Set */ "./node_modules/crossecore/src/Set.ts");
/* harmony import */ var webpage_WebsiteBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/WebsiteBase */ "./src/webpage/WebsiteBase.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/* import Ecore*/
var WebsiteImpl = /** @class */ (function (_super) {
    __extends(WebsiteImpl, _super);
    function WebsiteImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebsiteImpl.allInstances_ = new ecore_Set__WEBPACK_IMPORTED_MODULE_0__["Set"]();
    return WebsiteImpl;
}(webpage_WebsiteBase__WEBPACK_IMPORTED_MODULE_1__["WebsiteBase"]));



/***/ }),

/***/ "./tests/tests.ts":
/*!************************!*\
  !*** ./tests/tests.ts ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ecore_XmiResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ecore/XmiResource */ "./node_modules/crossecore/src/XmiResource.ts");
/* harmony import */ var webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! webpage/WebpagePackageImpl */ "./src/webpage/WebpagePackageImpl.ts");
/* harmony import */ var webpage_WebpageFactoryImpl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webpage/WebpageFactoryImpl */ "./src/webpage/WebpageFactoryImpl.ts");
/* harmony import */ var webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! webpage/ArticleType */ "./src/webpage/ArticleType.ts");
/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! chai */ "./node_modules/chai/index.js");
/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(chai__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webpage/PersonImpl */ "./src/webpage/PersonImpl.ts");
/* harmony import */ var webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! webpage/SourceImpl */ "./src/webpage/SourceImpl.ts");
/* harmony import */ var webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! webpage/StudentImpl */ "./src/webpage/StudentImpl.ts");
/* harmony import */ var webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! webpage/PictureImpl */ "./src/webpage/PictureImpl.ts");
/* harmony import */ var webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! webpage/ArticleImpl */ "./src/webpage/ArticleImpl.ts");
/* harmony import */ var webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! webpage/WebsiteImpl */ "./src/webpage/WebsiteImpl.ts");
/* harmony import */ var webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! webpage/ChapterImpl */ "./src/webpage/ChapterImpl.ts");












var webpage = webpage_WebpagePackageImpl__WEBPACK_IMPORTED_MODULE_1__["WebpagePackageImpl"].eINSTANCE;
var factory = webpage_WebpageFactoryImpl__WEBPACK_IMPORTED_MODULE_2__["WebpageFactoryImpl"].eINSTANCE;
var eobjects = [];
describe('XmiResource', function () {
    describe('save', function () {
        it('Can save an EObject to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            eobjects.push(person);
            var xmi1 = saveToXMI(eobjects);
            console.log("Save1");
            console.log(xmi1);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi1, "");
        });
        it('Can save an EObject with a single string attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.surname = "Surname";
            eobjects.push(person);
            var xmi2 = saveToXMI(eobjects);
            console.log("Save2");
            console.log(xmi2);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi2, "");
        });
        it('Can save an EOBject with a list of strings as an attribute to XMI', function () {
            eobjects = [];
            var source = factory.createSource();
            source.authors.add("Author1");
            source.authors.add("Author2");
            eobjects.push(source);
            var xmi3 = saveToXMI(eobjects);
            console.log("Save3");
            console.log(xmi3);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi3, "");
        });
        it('Can save an EOBject with a short attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.age = 27;
            eobjects.push(person);
            var xmi4 = saveToXMI(eobjects);
            console.log("Save4");
            console.log(xmi4);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi4, "");
        });
        it('Can save an EObject with a long attribute to XMI', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.matrikelnr = 123;
            eobjects.push(student);
            var xmi5 = saveToXMI(eobjects);
            console.log("Save5");
            console.log(xmi5);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi5, "");
        });
        it('Can save an EObject with an int attribute to XMI', function () {
            eobjects = [];
            var picture = factory.createPicture();
            picture.number = 123;
            eobjects.push(picture);
            var xmi6 = saveToXMI(eobjects);
            console.log("Save6");
            console.log(xmi6);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi6, "");
        });
        it('Can save an EObject with a list of int as an attribute to XMI', function () {
            eobjects = [];
            var source = factory.createSource();
            source.page_no.add(-1);
            source.page_no.add(2);
            eobjects.push(source);
            var xmi7 = saveToXMI(eobjects);
            console.log("Save7");
            console.log(xmi7);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi7, "");
        });
        it('Can save an EObject with a float attribute to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            article.number = 1.2;
            var picture = factory.createPicture();
            article.picture = picture;
            var person = factory.createPerson();
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi8 = saveToXMI(eobjects);
            console.log("Save8");
            console.log(xmi8);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi8, "");
        });
        it('Can save an EObject with a list of float as an attribute to XMI', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.grades.add(-2.0);
            student.grades.add(2.3);
            eobjects.push(student);
            var xmi9 = saveToXMI(eobjects);
            console.log("Save9");
            console.log(xmi9);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi9, "");
        });
        it('Can save an EObject with a double attribute to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            website.number = 1.0;
            var picture = factory.createPicture();
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi10 = saveToXMI(eobjects);
            console.log("Save10");
            console.log(xmi10);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi10, "");
        });
        it('Can save an EObject with a list of char as an attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.access_key.add('a');
            person.access_key.add('b');
            eobjects.push(person);
            var xmi11 = saveToXMI(eobjects);
            console.log("Save11");
            console.log(xmi11);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi11, "");
        });
        it('Can save an EObject with a boolean attribute to XMI', function () {
            eobjects = [];
            var chapter = factory.createChapter();
            chapter.subSection = true;
            eobjects.push(chapter);
            var xmi12 = saveToXMI(eobjects);
            console.log("Save12");
            console.log(xmi12);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi12, "");
        });
        it('Can save an EObject with a list of boolean as an attribute to XMI', function () {
            eobjects = [];
            var picture = factory.createPicture();
            picture.hash.add(true);
            picture.hash.add(false);
            eobjects.push(picture);
            var xmi13 = saveToXMI(eobjects);
            console.log("Save13");
            console.log(xmi13);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi13, "");
        });
        it('Can save an EObject with an enum attribute to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY;
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi14 = saveToXMI(eobjects);
            console.log("Save14");
            console.log(xmi14);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi14, "");
        });
        it('Can save an EObject with a single containment relationship to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi15 = saveToXMI(eobjects);
            console.log("Save15");
            console.log(xmi15);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi15, "");
        });
        it('Can save an EObject with multiple containment relationships to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            var category = factory.createCategory();
            var category2 = factory.createCategory();
            website.pictures.add(picture);
            website.categories.add(category);
            website.categories.add(category2);
            eobjects.push(website);
            var xmi16 = saveToXMI(eobjects);
            console.log("Save16");
            console.log(xmi16);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi16, "");
        });
        it('Can save an EObject with a single reference to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi17 = saveToXMI(eobjects);
            console.log("Save17");
            console.log(xmi17);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi17, "");
        });
        it('Can save an EObject with multiple references to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            var source = factory.createSource();
            var source2 = factory.createSource();
            article.picture = picture;
            article.authors.add(person);
            article.sources.add(source);
            article.sources.add(source2);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(source);
            eobjects.push(source2);
            var xmi18 = saveToXMI(eobjects);
            console.log("Save18");
            console.log(xmi18);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi18, "");
        });
        it('Can save an EObject with a single bidirectional reference to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var student = factory.createStudent();
            article.picture = picture;
            article.authors.add(student);
            student.articles.add(article);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(student);
            var xmi19 = saveToXMI(eobjects);
            console.log("Save19");
            console.log(xmi19);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi19, "");
        });
        it('Can save an EObject with multiple bidirectional references to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            var person = factory.createPerson();
            var student = factory.createStudent();
            article.authors.add(person);
            article.authors.add(student);
            article2.authors.add(student);
            person.articles.add(article);
            student.articles.add(article);
            student.articles.add(article2);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(student);
            var xmi20 = saveToXMI(eobjects);
            console.log("Save20");
            console.log(xmi20);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi20, "");
        });
        it('Can save an EObject with multiple references to objects of same class to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var person = factory.createPerson();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            article3.picture = picture;
            article.authors.add(person);
            article2.authors.add(person);
            article3.authors.add(person);
            article.related.add(article2);
            article.related.add(article3);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(article3);
            eobjects.push(person);
            eobjects.push(picture);
            var xmi21 = saveToXMI(eobjects);
            console.log("Save21");
            console.log(xmi21);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi21, "");
        });
        it('Can save an EObject with a reference to itself to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.related.add(article);
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi22 = saveToXMI(eobjects);
            console.log("Save22");
            console.log(xmi22);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi22, "");
        });
        it('Can detect an incorrect attribute multiplicity when saving', function () {
            eobjects = [];
            var person = factory.createPerson();
            for (var i = 0; i < 257; i++) {
                person.access_key.add(String.fromCharCode(i));
            }
            eobjects.push(person);
            var xmi23 = saveToXMI(eobjects);
            console.log("Save23");
            console.log(xmi23);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi23, "");
        });
        it('Can detect an incorrect reference multiplicity when saving', function () {
            eobjects = [];
            var article = factory.createArticle();
            eobjects.push(article);
            var xmi24 = saveToXMI(eobjects);
            console.log("Save24");
            console.log(xmi24);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi24, "");
        });
        it('Can detect an incorrect containment multiplicity when saving', function () {
            eobjects = [];
            var website = factory.createWebsite();
            eobjects.push(website);
            var xmi25 = saveToXMI(eobjects);
            console.log("Save25");
            console.log(xmi25);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi25, "");
        });
        it('Can detect and correct an incorrect bidirectional reference when saving', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var person = factory.createPerson();
            var person2 = factory.createPerson();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            article.authors.add(person);
            article2.authors.add(person2);
            person.articles.add(article2);
            person2.articles.add(article);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(person2);
            var xmi26 = saveToXMI(eobjects);
            console.log("Save26");
            console.log(xmi26);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi26, "");
        });
        it('Can detect a missing reference when saving', function () {
            eobjects = [];
            var person = factory.createPerson();
            var article = factory.createArticle();
            var picture = factory.createPicture();
            article.picture = picture;
            person.articles.add(article);
            article.authors.add(person);
            eobjects.push(person);
            eobjects.push(picture);
            var xmi27 = saveToXMI(eobjects);
            console.log("Save27");
            console.log(xmi27);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi27, "");
        });
        it('Can detect an EObject being within multiple containments when saving', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var website2 = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            website2.pictures.add(picture);
            eobjects.push(website);
            eobjects.push(website2);
            var xmi28 = saveToXMI(eobjects);
            console.log("Save28");
            console.log(xmi28);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi28, "");
        });
        it('Can detect an EObject being in a containment and outside of it when saving', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            eobjects.push(website);
            eobjects.push(picture);
            var xmi29 = saveToXMI(eobjects);
            console.log("Save29");
            console.log(xmi29);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].equal(xmi29, "");
        });
        it('Can detect the same EObject being serialized multiple times when saving', function () {
            eobjects = [];
            var student = factory.createStudent();
            eobjects.push(student);
            eobjects.push(student);
            var xmi30 = saveToXMI(eobjects);
            console.log("Save30");
            console.log(xmi30);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi30, "");
        });
        it('Can detect the same EObject being contained multiple times when saving', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi31 = saveToXMI(eobjects);
            console.log("Save31");
            console.log(xmi31);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi31, "");
        });
        it('Can detect the same EObject being referenced multiple times when saving', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.authors.add(person);
            var source = factory.createSource();
            article.sources.add(source);
            article.sources.add(source);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(source);
            eobjects.push(person);
            var xmi32 = saveToXMI(eobjects);
            console.log("Save32");
            console.log(xmi32);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi32, "");
        });
        it('Can save an inherited class', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.age = 29;
            eobjects.push(student);
            var xmi33 = saveToXMI(eobjects);
            console.log("Save33");
            console.log(xmi33);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi33, "");
        });
        it('Can save special float values', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.authors.add(person);
            article2.authors.add(person);
            article3.authors.add(person);
            article.picture = picture;
            article2.picture = picture;
            article3.picture = picture;
            article.number = Number.NaN;
            article2.number = Number.NEGATIVE_INFINITY;
            article3.number = Number.POSITIVE_INFINITY;
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(article3);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi35 = saveToXMI(eobjects);
            console.log("Save35");
            console.log(xmi35);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi35, "");
        });
        it('Can save special double values', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var website2 = factory.createWebsite();
            var website3 = factory.createWebsite();
            var picture = factory.createPicture();
            var picture2 = factory.createPicture();
            var picture3 = factory.createPicture();
            website.pictures.add(picture);
            website2.pictures.add(picture2);
            website3.pictures.add(picture3);
            website.number = Number.NaN;
            website2.number = Number.NEGATIVE_INFINITY;
            website3.number = Number.POSITIVE_INFINITY;
            eobjects.push(website);
            eobjects.push(website2);
            eobjects.push(website3);
            var xmi36 = saveToXMI(eobjects);
            console.log("Save36");
            console.log(xmi36);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].notEqual(xmi36, "");
        });
        /*
        it('', function() {
            eobjects = [];
            
        });
        */
    });
    describe('load', function () {
        it('Can load an EObject from XMI', function () {
            var t1 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OV7VADWJEeu78Z-yboWG0Q\"/>";
            var result1 = loadFromXMI(t1);
            console.log("Load1");
            console.log(result1);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result1);
        });
        it('Can load an EObject with a single string attribute from XMI', function () {
            var t2 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVda8DWJEeu78Z-yboWG0Q\" surname=\"Surname\"/>";
            var result2 = loadFromXMI(t2);
            console.log("Load2");
            console.log(result2);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result2);
        });
        it('Can load an EObject with a list of string as an attribute from XMI', function () {
            var t3 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Source xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OV-YUDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <authors>Author1</authors>\r\n" +
                "  <authors>Author2</authors>\r\n" +
                "</webpage:Source>";
            var result3 = loadFromXMI(t3);
            console.log("Load3");
            console.log(result3);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result3);
        });
        it('Can load an EObject with a single short attribute from XMI', function () {
            var t4 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVugsDWJEeu78Z-yboWG0Q\" age=\"27\"/>";
            var result4 = loadFromXMI(t4);
            console.log("Load4");
            console.log(result4);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result4);
        });
        it('Can load an EObject with a single long attribute from XMI', function () {
            var t5 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OU1v4DWJEeu78Z-yboWG0Q\" matrikelnr=\"123\"/>";
            var result5 = loadFromXMI(t5);
            console.log("Load5");
            console.log(result5);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result5);
        });
        it('Can load an EObject with single int attribute from XMI', function () {
            var t6 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Picture xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVcM0DWJEeu78Z-yboWG0Q\" number=\"123\"/>";
            var result6 = loadFromXMI(t6);
            console.log("Load6");
            console.log(result6);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result6);
        });
        it('Can load an EObject with a list of int as an attribute from XMI', function () {
            var t7 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Source xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OWTIcDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <page_no>-1</page_no>\r\n" +
                "  <page_no>2</page_no>\r\n" +
                "</webpage:Source>";
            var result7 = loadFromXMI(t7);
            console.log("Load7");
            console.log(result7);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result7);
        });
        it('Can load an EObject with a single float attribute from XMI', function () {
            var t8 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OV8jIDWJEeu78Z-yboWG0Q\" authors=\"_OV8jIjWJEeu78Z-yboWG0Q\" picture=\"_OV8jITWJEeu78Z-yboWG0Q\" number=\"1.2\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OV8jITWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OV8jIjWJEeu78Z-yboWG0Q\" articles=\"_OV8jIDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result8 = loadFromXMI(t8);
            console.log("Load8");
            console.log(result8);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result8);
        });
        it('Can load an EObject with a list of float as an attribute from XMI', function () {
            var t9 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVHcsDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <grades>-2.0</grades>\r\n" +
                "  <grades>2.3</grades>\r\n" +
                "</webpage:Student>";
            var result9 = loadFromXMI(t9);
            console.log("Load9");
            console.log(result9);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result9);
        });
        it('Can load an EObject with a single double attribute from XMI', function () {
            var t10 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OWDQ0DWJEeu78Z-yboWG0Q\" number=\"1.0\">\r\n" +
                "  <pictures xmi:id=\"_OWDQ0TWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</webpage:Website>";
            var result10 = loadFromXMI(t10);
            console.log("Load10");
            console.log(result10);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result10);
        });
        it('Can load an EObject with a list of char as an attribute from XMI', function () {
            var t11 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVsrgDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <access_key>97</access_key>\r\n" +
                "  <access_key>98</access_key>\r\n" +
                "</webpage:Person>";
            var result11 = loadFromXMI(t11);
            console.log("Load11");
            console.log(result11);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result11);
        });
        it('Can load an EObject with a single boolean attribute from XMI', function () {
            var t12 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Chapter xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVJ48DWJEeu78Z-yboWG0Q\" subSection=\"true\"/>";
            var result12 = loadFromXMI(t12);
            console.log("Load12");
            console.log(result12);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result12);
        });
        it('Can load an EObject with a list of boolean as an attribute from XMI', function () {
            var t13 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Picture xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVepEDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <hash>true</hash>\r\n" +
                "  <hash>false</hash>\r\n" +
                "</webpage:Picture>";
            var result13 = loadFromXMI(t13);
            console.log("Load13");
            console.log(result13);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result13);
        });
        it('Can load an EObject with an enum attribute from XMI', function () {
            var t14 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OWQsMDWJEeu78Z-yboWG0Q\" authors=\"_OWQsMjWJEeu78Z-yboWG0Q\" picture=\"_OWQsMTWJEeu78Z-yboWG0Q\" articletype=\"STUDY\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OWQsMTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OWQsMjWJEeu78Z-yboWG0Q\" articles=\"_OWQsMDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result14 = loadFromXMI(t14);
            console.log("Load14");
            console.log(result14);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result14);
        });
        it('Can load an EObject with a single containment from XMI', function () {
            var t15 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVq2UDWJEeu78Z-yboWG0Q\">\r\n" +
                "  <pictures xmi:id=\"_OVq2UTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</webpage:Website>";
            var result15 = loadFromXMI(t15);
            console.log("Load15");
            console.log(result15);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result15);
        });
        it('Can load an EObject with multiple containments from XMI', function () {
            var t16 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_OVw88DWJEeu78Z-yboWG0Q\">\r\n" +
                "  <categories xmi:id=\"_OVw88TWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <categories xmi:id=\"_OVw88jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <pictures xmi:id=\"_OVw88zWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</webpage:Website>";
            var result16 = loadFromXMI(t16);
            console.log("Load16");
            console.log(result16);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result16);
        });
        it('Can load an EObject with a single reference from XMI', function () {
            var t17 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OVWtQDWJEeu78Z-yboWG0Q\" authors=\"_OVWtQjWJEeu78Z-yboWG0Q\" picture=\"_OVWtQTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OVWtQTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OVWtQjWJEeu78Z-yboWG0Q\" articles=\"_OVWtQDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result17 = loadFromXMI(t17);
            console.log("Load17");
            console.log(result17);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result17);
        });
        it('Can load an EObject with multiple references from XMI', function () {
            var t18 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OWIwYDWJEeu78Z-yboWG0Q\" authors=\"_OWIwYjWJEeu78Z-yboWG0Q\" picture=\"_OWIwYTWJEeu78Z-yboWG0Q\" sources=\"_OWIwYzWJEeu78Z-yboWG0Q _OWIwZDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OWIwYTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OWIwYjWJEeu78Z-yboWG0Q\" articles=\"_OWIwYDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Source xmi:id=\"_OWIwYzWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Source xmi:id=\"_OWIwZDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result18 = loadFromXMI(t18);
            console.log("Load18");
            console.log(result18);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result18);
        });
        it('Can load an EObject with a single bidirectional reference from XMI', function () {
            var t19 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OWG7MDWJEeu78Z-yboWG0Q\" authors=\"_OWG7MjWJEeu78Z-yboWG0Q\" picture=\"_OWG7MTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OWG7MTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Student xmi:id=\"_OWG7MjWJEeu78Z-yboWG0Q\" articles=\"_OWG7MDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result19 = loadFromXMI(t19);
            console.log("Load19");
            console.log(result19);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result19);
        });
        it('Can load an EObject with multiple bidirectional references from XMI', function () {
            var t20 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OWLMoDWJEeu78Z-yboWG0Q\" authors=\"_OWLMozWJEeu78Z-yboWG0Q _OWLMpDWJEeu78Z-yboWG0Q\" picture=\"_OWLMojWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OWLMoTWJEeu78Z-yboWG0Q\" authors=\"_OWLMpDWJEeu78Z-yboWG0Q\" picture=\"_OWLMojWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OWLMojWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OWLMozWJEeu78Z-yboWG0Q\" articles=\"_OWLMoDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Student xmi:id=\"_OWLMpDWJEeu78Z-yboWG0Q\" articles=\"_OWLMoDWJEeu78Z-yboWG0Q _OWLMoTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result20 = loadFromXMI(t20);
            console.log("Load20");
            console.log(result20);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result20);
        });
        it('Can load an EObject with several references to the same object type from XMI', function () {
            var t21 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OV5f0DWJEeu78Z-yboWG0Q\" authors=\"_OV5f1DWJEeu78Z-yboWG0Q\" picture=\"_OV5f0zWJEeu78Z-yboWG0Q\" related=\"_OV5f0TWJEeu78Z-yboWG0Q _OV5f0jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OV5f0TWJEeu78Z-yboWG0Q\" authors=\"_OV5f1DWJEeu78Z-yboWG0Q\" picture=\"_OV5f0zWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OV5f0jWJEeu78Z-yboWG0Q\" authors=\"_OV5f1DWJEeu78Z-yboWG0Q\" picture=\"_OV5f0zWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OV5f0zWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OV5f1DWJEeu78Z-yboWG0Q\" articles=\"_OV5f0DWJEeu78Z-yboWG0Q _OV5f0TWJEeu78Z-yboWG0Q _OV5f0jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result21 = loadFromXMI(t21);
            console.log("Load21");
            console.log(result21);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result21);
        });
        it('Can load an EObject with a reference to iself from XMI', function () {
            var t22 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OV_mcDWJEeu78Z-yboWG0Q\" authors=\"_OV_mcjWJEeu78Z-yboWG0Q\" picture=\"_OV_mcTWJEeu78Z-yboWG0Q\" related=\"_OV_mcDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OV_mcTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OV_mcjWJEeu78Z-yboWG0Q\" articles=\"_OV_mcDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result22 = loadFromXMI(t22);
            console.log("Load22");
            console.log(result22);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result22);
        });
        it('Can detect an incorrect attribute multiplicity when loading from XMI', function () {
            var t23 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_7pU58DTuEeuvNaUlYvhjsA\">\r\n" +
                "<access_key>0</access_key><access_key>1</access_key><access_key>2</access_key><access_key>3</access_key><access_key>4</access_key><access_key>5</access_key><access_key>6</access_key><access_key>7</access_key><access_key>8</access_key><access_key>9</access_key><access_key>10</access_key><access_key>11</access_key><access_key>12</access_key><access_key>13</access_key><access_key>14</access_key><access_key>15</access_key><access_key>16</access_key><access_key>17</access_key><access_key>18</access_key><access_key>19</access_key><access_key>20</access_key><access_key>21</access_key><access_key>22</access_key><access_key>23</access_key><access_key>24</access_key><access_key>25</access_key><access_key>26</access_key><access_key>27</access_key><access_key>28</access_key><access_key>29</access_key><access_key>30</access_key><access_key>31</access_key><access_key>32</access_key><access_key>33</access_key><access_key>34</access_key><access_key>35</access_key><access_key>36</access_key><access_key>37</access_key><access_key>38</access_key><access_key>39</access_key><access_key>40</access_key><access_key>41</access_key><access_key>42</access_key><access_key>43</access_key><access_key>44</access_key><access_key>45</access_key><access_key>46</access_key><access_key>47</access_key><access_key>48</access_key><access_key>49</access_key><access_key>50</access_key><access_key>51</access_key><access_key>52</access_key><access_key>53</access_key><access_key>54</access_key><access_key>55</access_key><access_key>56</access_key><access_key>57</access_key><access_key>58</access_key><access_key>59</access_key><access_key>60</access_key><access_key>61</access_key><access_key>62</access_key><access_key>63</access_key><access_key>64</access_key><access_key>65</access_key><access_key>66</access_key><access_key>67</access_key><access_key>68</access_key><access_key>69</access_key><access_key>70</access_key><access_key>71</access_key><access_key>72</access_key><access_key>73</access_key><access_key>74</access_key><access_key>75</access_key><access_key>76</access_key><access_key>77</access_key><access_key>78</access_key><access_key>79</access_key><access_key>80</access_key><access_key>81</access_key><access_key>82</access_key><access_key>83</access_key><access_key>84</access_key><access_key>85</access_key><access_key>86</access_key><access_key>87</access_key><access_key>88</access_key><access_key>89</access_key><access_key>90</access_key><access_key>91</access_key><access_key>92</access_key><access_key>93</access_key><access_key>94</access_key><access_key>95</access_key><access_key>96</access_key><access_key>97</access_key><access_key>98</access_key><access_key>99</access_key><access_key>100</access_key><access_key>101</access_key><access_key>102</access_key><access_key>103</access_key><access_key>104</access_key><access_key>105</access_key><access_key>106</access_key><access_key>107</access_key><access_key>108</access_key><access_key>109</access_key><access_key>110</access_key><access_key>111</access_key><access_key>112</access_key><access_key>113</access_key><access_key>114</access_key><access_key>115</access_key><access_key>116</access_key><access_key>117</access_key><access_key>118</access_key><access_key>119</access_key><access_key>120</access_key><access_key>121</access_key><access_key>122</access_key><access_key>123</access_key><access_key>124</access_key><access_key>125</access_key><access_key>126</access_key><access_key>127</access_key><access_key>128</access_key><access_key>129</access_key><access_key>130</access_key><access_key>131</access_key><access_key>132</access_key><access_key>133</access_key><access_key>134</access_key><access_key>135</access_key><access_key>136</access_key><access_key>137</access_key><access_key>138</access_key><access_key>139</access_key><access_key>140</access_key><access_key>141</access_key><access_key>142</access_key><access_key>143</access_key><access_key>144</access_key><access_key>145</access_key><access_key>146</access_key><access_key>147</access_key><access_key>148</access_key><access_key>149</access_key><access_key>150</access_key><access_key>151</access_key><access_key>152</access_key><access_key>153</access_key><access_key>154</access_key><access_key>155</access_key><access_key>156</access_key><access_key>157</access_key><access_key>158</access_key><access_key>159</access_key><access_key>160</access_key><access_key>161</access_key><access_key>162</access_key><access_key>163</access_key><access_key>164</access_key><access_key>165</access_key><access_key>166</access_key><access_key>167</access_key><access_key>168</access_key><access_key>169</access_key><access_key>170</access_key><access_key>171</access_key><access_key>172</access_key><access_key>173</access_key><access_key>174</access_key><access_key>175</access_key><access_key>176</access_key><access_key>177</access_key><access_key>178</access_key><access_key>179</access_key><access_key>180</access_key><access_key>181</access_key><access_key>182</access_key><access_key>183</access_key><access_key>184</access_key><access_key>185</access_key><access_key>186</access_key><access_key>187</access_key><access_key>188</access_key><access_key>189</access_key><access_key>190</access_key><access_key>191</access_key><access_key>192</access_key><access_key>193</access_key><access_key>194</access_key><access_key>195</access_key><access_key>196</access_key><access_key>197</access_key><access_key>198</access_key><access_key>199</access_key><access_key>200</access_key><access_key>201</access_key><access_key>202</access_key><access_key>203</access_key><access_key>204</access_key><access_key>205</access_key><access_key>206</access_key><access_key>207</access_key><access_key>208</access_key><access_key>209</access_key><access_key>210</access_key><access_key>211</access_key><access_key>212</access_key><access_key>213</access_key><access_key>214</access_key><access_key>215</access_key><access_key>216</access_key><access_key>217</access_key><access_key>218</access_key><access_key>219</access_key><access_key>220</access_key><access_key>221</access_key><access_key>222</access_key><access_key>223</access_key><access_key>224</access_key><access_key>225</access_key><access_key>226</access_key><access_key>227</access_key><access_key>228</access_key><access_key>229</access_key><access_key>230</access_key><access_key>231</access_key><access_key>232</access_key><access_key>233</access_key><access_key>234</access_key><access_key>235</access_key><access_key>236</access_key><access_key>237</access_key><access_key>238</access_key><access_key>239</access_key><access_key>240</access_key><access_key>241</access_key><access_key>242</access_key><access_key>243</access_key><access_key>244</access_key><access_key>245</access_key><access_key>246</access_key><access_key>247</access_key><access_key>248</access_key><access_key>249</access_key><access_key>250</access_key><access_key>251</access_key><access_key>252</access_key><access_key>253</access_key><access_key>254</access_key><access_key>255</access_key><access_key>256</access_key>\r\n" +
                "</webpage:Person>";
            var result23 = loadFromXMI(t23);
            console.log("Load23");
            console.log(result23);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result23);
        });
        it('Can detect an incorrect reference multiplicity when loading from XMI', function () {
            var t24 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Article xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_r8XHQDTtEeuSVPhUdMjQ3Q\"/>";
            var result24 = loadFromXMI(t24);
            console.log("Load24");
            console.log(result24);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result24);
        });
        it('Can detect an incorrect containment multiplicity when loading from XMI', function () {
            var t25 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_X4UNUDTxEeuFys6VEc4WOg\"/>";
            var result25 = loadFromXMI(t25);
            console.log("Load25");
            console.log(result25);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result25);
        });
        it('Can detect an incorrect bidirectional reference when loading from XMI', function () {
            var t26 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OVmk4DWJEeu78Z-yboWG0Q\" authors=\"_OVmk4zWJEeu78Z-yboWG0Q\" picture=\"_OVmk4jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OVmk4TWJEeu78Z-yboWG0Q\" picture=\"_OVmk4jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OVmk4jWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OVmk4zWJEeu78Z-yboWG0Q\" articles=\"_OVmk4TWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OVmk5DWJEeu78Z-yboWG0Q\" articles=\"_OVmk4DWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result26 = loadFromXMI(t26);
            console.log("Load26");
            console.log(result26);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result26);
        });
        it('Can detect a missing reference when loading from XMI', function () {
            var t27 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Person xmi:id=\"_CI7L4DT1EeuJqahhVh2ivw\" articles=\"_TEST4jT1EeuJqahhVh2ivw\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_CI7L4TT1EeuJqahhVh2ivw\"/>\r\n" +
                "</xmi:XMI>";
            var result27 = loadFromXMI(t27);
            console.log("Load27");
            console.log(result27);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result27);
        });
        it('Can detect the same EObject being contained in several other EObjects when loading from XMI', function () {
            var t28 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Website xmi:id=\"_Ea1OADT-Eeuy-6z-kXSK-w\">\r\n" +
                "    <pictures xmi:id=\"_Ea1OATT-Eeuy-6z-kXSK-w\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Website xmi:id=\"_Ea1OAjT-Eeuy-6z-kXSK-w\">\r\n" +
                "    <pictures xmi:id=\"_Ea1OATT-Eeuy-6z-kXSK-w\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "</xmi:XMI>";
            var result28 = loadFromXMI(t28);
            console.log("Load28");
            console.log(result28);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result28);
        });
        it('Can detect an EObject being both contained and separate when loading from XMI', function () {
            var t29 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Website xmi:id=\"_YEcKQDWgEeuiRLkt8tJQnA\">\r\n" +
                "      <pictures xmi:id=\"_YEcKQTWgEeuiRLkt8tJQnA\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Picture xmi:id=\"_YEcKQTWgEeuiRLkt8tJQnA\"/>\r\n" +
                "</xmi:XMI>";
            var result29 = loadFromXMI(t29);
            console.log("Load29");
            console.log(result29);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result29);
        });
        it('Can detect an EObject being loaded multiple times when loading from XMI', function () {
            var t30 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Student xmi:id=\"_tPFc8DT5EeuAP8PgtQG7XA\"/>\r\n" +
                "  <webpage:Student xmi:id=\"_tPFc8DT5EeuAP8PgtQG7XA\"/>\r\n" +
                "</xmi:XMI>";
            var result30 = loadFromXMI(t30);
            console.log("Load30");
            console.log(result30);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result30);
        });
        it('Can detect the same EObject being contained multiple times when loading from XMI', function () {
            var t31 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_BumjMDT8EeuC0ILVHZfbng\">\r\n" +
                "  <pictures xmi:id=\"_BunKQDT8EeuC0ILVHZfbng\"/>\r\n" +
                "  <pictures xmi:id=\"_BunKQDT8EeuC0ILVHZfbng\"/>\r\n" +
                "</webpage:Website>";
            var result31 = loadFromXMI(t31);
            console.log("Load31");
            console.log(result31);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result31);
        });
        it('Can detect the same EObject being referenced multiple times when loading from XMI', function () {
            var t32 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_2Yq9kDV7EeulSerH-1v9sA\" authors=\"_2Yq9kzV7EeulSerH-1v9sA\" picture=\"_2Yq9kTV7EeulSerH-1v9sA _2Yq9kTV7EeulSerH-1v9sA _2Yq9kTV7EeulSerH-1v9sA\" sources=\"_2Yq9kjV7EeulSerH-1v9sA _2Yq9kjV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_2Yq9kTV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Source xmi:id=\"_2Yq9kjV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_2Yq9kzV7EeulSerH-1v9sA\" articles=\"_2Yq9kDV7EeulSerH-1v9sA\"/>\r\n" +
                "</xmi:XMI>";
            var result32 = loadFromXMI(t32);
            console.log("Load32");
            console.log(result32);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result32);
        });
        it('Can load an inherited EObject from XMI', function () {
            var t33 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_NnTn0DUCEeur7KrFr2pF2A\" age=\"29\" matrikelnr=\"123\"/>";
            var result33 = loadFromXMI(t33);
            console.log("Load33");
            console.log(result33);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result33);
        });
        it('Can detect non existent attributes being loaded from XMI', function () {
            var t34 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_NnTn0DUCEeur7KrFr2pF2A\" age=\"29\" memes=\"1\" matrikelnr=\"123\"/>";
            var result34 = loadFromXMI(t34);
            console.log("Load34");
            console.log(result34);
            // nicht-existierende Attribute werden einfach ignoriert, ist okay
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result34);
        });
        it('Can load special float values from XMI', function () {
            var t35 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OWfVsDWJEeu78Z-yboWG0Q\" authors=\"_OWfVtDWJEeu78Z-yboWG0Q\" picture=\"_OWfVszWJEeu78Z-yboWG0Q\" number=\"NaN\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OWfVsTWJEeu78Z-yboWG0Q\" authors=\"_OWfVtDWJEeu78Z-yboWG0Q\" picture=\"_OWfVszWJEeu78Z-yboWG0Q\" number=\"-Infinity\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_OWfVsjWJEeu78Z-yboWG0Q\" authors=\"_OWfVtDWJEeu78Z-yboWG0Q\" picture=\"_OWfVszWJEeu78Z-yboWG0Q\" number=\"Infinity\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OWfVszWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OWfVtDWJEeu78Z-yboWG0Q\" articles=\"_OWfVsDWJEeu78Z-yboWG0Q _OWfVsTWJEeu78Z-yboWG0Q _OWfVsjWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result35 = loadFromXMI(t35);
            console.log("Load35");
            console.log(result35);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result35);
        });
        it('Can load special double values from XMI', function () {
            var t36 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Website xmi:id=\"_OWEe8DWJEeu78Z-yboWG0Q\" number=\"NaN\">\r\n" +
                "    <pictures xmi:id=\"_OWEe8TWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Website xmi:id=\"_OWEe8jWJEeu78Z-yboWG0Q\" number=\"-Infinity\">\r\n" +
                "    <pictures xmi:id=\"_OWEe8zWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Website xmi:id=\"_OWEe9DWJEeu78Z-yboWG0Q\" number=\"Infinity\">\r\n" +
                "    <pictures xmi:id=\"_OWEe9TWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "</xmi:XMI>";
            var result36 = loadFromXMI(t36);
            console.log("Load36");
            console.log(result36);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNotNull(result36);
        });
        it('Can detect the wrong EObject reference type when loading from XMI', function () {
            var t37 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OVWtQDWJEeu78Z-yboWG0Q\" authors=\"_OVWtQjWJEeu78Z-yboWG0Q _OVWtQTWJEeu78Z-yboWG0Q\" picture=\"_OVWtQTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OVWtQTWJEeu78Z-yboWG0Q\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OVWtQjWJEeu78Z-yboWG0Q\" articles=\"_OVWtQDWJEeu78Z-yboWG0Q\"/>\r\n" +
                "</xmi:XMI>";
            var result37 = loadFromXMI(t37);
            console.log("Load37");
            console.log(result37);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result37);
        });
        it('Can detect the wrong EObject containment type when loading from XMI', function () {
            var t38 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_tPRqMDT5EeuAP8PgtQG7XA\">\r\n" +
                "  <pictures xmi:id=\"_tPRqMTT5EeuAP8PgtQG7XA\"/>\r\n" +
                "  <memes xmi:id=\"_memeMTT5EeuAP8PgtQG7XA\"/>\r\n" +
                "</webpage:Website>";
            var result38 = loadFromXMI(t38);
            console.log("Load38");
            console.log(result38);
            // ist okay, da Attribut memes nicht beachtet wird
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result38);
        });
        it('Can detect the wrong attribute type when loading from XMI', function () {
            var t39 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Chapter xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_tPBykDT5EeuAP8PgtQG7XA\" subSection=\"yes\"/>";
            var result39 = loadFromXMI(t39);
            console.log("Load39");
            console.log(result39);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result39);
        });
        it('Can detect the wrong containment inheritance type when loading from XMI', function () {
            var t42 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_BumjMDT8EeuC0ILVHZfbng\">\r\n" +
                "  <pictures xmi:type=\"webpage:Picture\" xmi:id=\"_BunKQDT8EeuC0ILVHZfbng\" repeat=\"true\"/>\r\n" +
                "  <pictures xmi:type=\"webpage:AnimatedPicture\" xmi:id=\"_CunDQDT8EeuC0ILVHZfbng\" repeat=\"true\"/>\r\n" +
                "</webpage:Website>";
            var result42 = loadFromXMI(t42);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isNull(result42);
        });
    });
    describe('save/load and compare', function () {
        it('Can save/load and compare an EObject to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            eobjects.push(person);
            var xmi1 = saveToXMI(eobjects);
            var instance1 = loadFromXMI(xmi1);
            var test = instance1[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"];
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a single string attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.surname = "Surname";
            eobjects.push(person);
            var xmi2 = saveToXMI(eobjects);
            var instance2 = loadFromXMI(xmi2);
            var test = instance2[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance2[0].surname === "Surname";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EOBject with a list of strings as an attribute to XMI', function () {
            eobjects = [];
            var source = factory.createSource();
            source.authors.add("Author1");
            source.authors.add("Author2");
            eobjects.push(source);
            var xmi3 = saveToXMI(eobjects);
            var instance3 = loadFromXMI(xmi3);
            var test = instance3[0] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
                && instance3[0].authors.containsX("Author1")
                && instance3[0].authors.containsX("Author2");
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EOBject with a short attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.age = 27;
            eobjects.push(person);
            var xmi4 = saveToXMI(eobjects);
            var instance4 = loadFromXMI(xmi4);
            var test = instance4[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance4[0].age === 27;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a long attribute to XMI', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.matrikelnr = 123;
            eobjects.push(student);
            var xmi5 = saveToXMI(eobjects);
            var instance5 = loadFromXMI(xmi5);
            var test = instance5[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance5[0].matrikelnr === 123;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with an int attribute to XMI', function () {
            eobjects = [];
            var picture = factory.createPicture();
            picture.number = 123;
            eobjects.push(picture);
            var xmi6 = saveToXMI(eobjects);
            var instance6 = loadFromXMI(xmi6);
            var test = instance6[0] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance6[0].number === 123;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a list of int as an attribute to XMI', function () {
            eobjects = [];
            var source = factory.createSource();
            source.page_no.add(-1);
            source.page_no.add(2);
            eobjects.push(source);
            var xmi7 = saveToXMI(eobjects);
            var instance7 = loadFromXMI(xmi7);
            var test = instance7[0] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
                && instance7[0].page_no.containsX(-1)
                && instance7[0].page_no.containsX(2);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a float attribute to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            article.number = 1.2;
            var picture = factory.createPicture();
            article.picture = picture;
            var person = factory.createPerson();
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi8 = saveToXMI(eobjects);
            var instance8 = loadFromXMI(xmi8);
            var test = instance8[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance8[0].number === 1.2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a list of float as an attribute to XMI', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.grades.add(-2.0);
            student.grades.add(2.3);
            eobjects.push(student);
            var xmi9 = saveToXMI(eobjects);
            var instance9 = loadFromXMI(xmi9);
            var test = instance9[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance9[0].grades.containsX(-2.0)
                && instance9[0].grades.containsX(2.3);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a double attribute to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            website.number = 1.0;
            var picture = factory.createPicture();
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi10 = saveToXMI(eobjects);
            var instance10 = loadFromXMI(xmi10);
            var test = instance10[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance10[0].number === 1.0;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a list of char as an attribute to XMI', function () {
            eobjects = [];
            var person = factory.createPerson();
            person.access_key.add('a');
            person.access_key.add('b');
            eobjects.push(person);
            var xmi11 = saveToXMI(eobjects);
            var instance11 = loadFromXMI(xmi11);
            var test = instance11[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance11[0].access_key.containsX('a')
                && instance11[0].access_key.containsX('b');
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a boolean attribute to XMI', function () {
            eobjects = [];
            var chapter = factory.createChapter();
            chapter.subSection = true;
            eobjects.push(chapter);
            var xmi12 = saveToXMI(eobjects);
            var instance12 = loadFromXMI(xmi12);
            var test = instance12[0] instanceof webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_11__["ChapterImpl"]
                && instance12[0].subSection === true;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a list of boolean as an attribute to XMI', function () {
            eobjects = [];
            var picture = factory.createPicture();
            picture.hash.add(true);
            picture.hash.add(false);
            eobjects.push(picture);
            var xmi13 = saveToXMI(eobjects);
            var instance13 = loadFromXMI(xmi13);
            var test = instance13[0] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance13[0].hash.containsX(true)
                && instance13[0].hash.containsX(false);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with an enum attribute to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY;
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi14 = saveToXMI(eobjects);
            var instance14 = loadFromXMI(xmi14);
            var test = instance14[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance14[0].articletype === webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a single containment relationship to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi15 = saveToXMI(eobjects);
            var instance15 = loadFromXMI(xmi15);
            var test = instance15[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance15[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with multiple containment relationships to XMI', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            var category = factory.createCategory();
            var category2 = factory.createCategory();
            website.pictures.add(picture);
            website.categories.add(category);
            website.categories.add(category2);
            eobjects.push(website);
            var xmi16 = saveToXMI(eobjects);
            var instance16 = loadFromXMI(xmi16);
            var test = instance16[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance16[0].categories.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a single reference to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi17 = saveToXMI(eobjects);
            var instance17 = loadFromXMI(xmi17);
            var test = instance17[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance17[0].authors.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with multiple references to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            var source = factory.createSource();
            var source2 = factory.createSource();
            article.picture = picture;
            article.authors.add(person);
            article.sources.add(source);
            article.sources.add(source2);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(source);
            eobjects.push(source2);
            var xmi18 = saveToXMI(eobjects);
            var instance18 = loadFromXMI(xmi18);
            var test = instance18[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance18[0].sources.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a single bidirectional reference to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var student = factory.createStudent();
            article.picture = picture;
            article.authors.add(student);
            student.articles.add(article);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(student);
            var xmi19 = saveToXMI(eobjects);
            var instance19 = loadFromXMI(xmi19);
            var test = instance19[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance19[0].authors.size() == 1
                && instance19[2] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance19[2].articles.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with multiple bidirectional references to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            var person = factory.createPerson();
            var student = factory.createStudent();
            article.authors.add(person);
            article.authors.add(student);
            article2.authors.add(student);
            person.articles.add(article);
            student.articles.add(article);
            student.articles.add(article2);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(student);
            var xmi20 = saveToXMI(eobjects);
            var instance20 = loadFromXMI(xmi20);
            var test = instance20[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance20[0].authors.size() == 2
                && instance20[4] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance20[4].articles.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with multiple references to objects of same class to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var person = factory.createPerson();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            article3.picture = picture;
            article.authors.add(person);
            article2.authors.add(person);
            article3.authors.add(person);
            article.related.add(article2);
            article.related.add(article3);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(article3);
            eobjects.push(person);
            eobjects.push(picture);
            var xmi21 = saveToXMI(eobjects);
            var instance21 = loadFromXMI(xmi21);
            var test = instance21[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance21[0].related.size() == 2
                && instance21[0].related[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance21[0].related[1] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"];
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an EObject with a reference to itself to XMI', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.name = "test";
            article.picture = picture;
            article.related.add(article);
            article.authors.add(person);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi22 = saveToXMI(eobjects);
            var instance22 = loadFromXMI(xmi22);
            var test = instance22[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance22[0].related.size() == 1
                && instance22[0].related[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance22[0].related[0].name === "test";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can detect and correct an incorrect bidirectional reference when saving/loading and comparing', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var person = factory.createPerson();
            var person2 = factory.createPerson();
            var picture = factory.createPicture();
            article.picture = picture;
            article2.picture = picture;
            article.authors.add(person);
            article2.authors.add(person2);
            person.articles.add(article2);
            person2.articles.add(article);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(picture);
            eobjects.push(person);
            eobjects.push(person2);
            var xmi26 = saveToXMI(eobjects);
            var instance26 = loadFromXMI(xmi26);
            var test = instance26[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance26[0].authors.size() == 2
                && instance26[1] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance26[1].authors.size() == 2
                && instance26[3] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance26[3].articles.size() == 2
                && instance26[4] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance26[4].articles.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can detect the same EObject being serialized multiple times when saving/loading and comparing', function () {
            eobjects = [];
            var student = factory.createStudent();
            eobjects.push(student);
            eobjects.push(student);
            var xmi30 = saveToXMI(eobjects);
            var instance30 = loadFromXMI(xmi30);
            var test = instance30.length == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can detect the same EObject being contained multiple times when saving/loading', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            website.pictures.add(picture);
            website.pictures.add(picture);
            eobjects.push(website);
            var xmi31 = saveToXMI(eobjects);
            var instance31 = loadFromXMI(xmi31);
            var test = instance31[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance31[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can detect the same EObject being referenced multiple times when saving/loading', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.picture = picture;
            article.authors.add(person);
            var source = factory.createSource();
            article.sources.add(source);
            article.sources.add(source);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(source);
            eobjects.push(person);
            var xmi32 = saveToXMI(eobjects);
            var instance32 = loadFromXMI(xmi32);
            var test = instance32[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance32[0].sources.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare an inherited class', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.age = 29;
            eobjects.push(student);
            var xmi33 = saveToXMI(eobjects);
            var instance33 = loadFromXMI(xmi33);
            var test = instance33[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance33[0].age === 29;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare special float values', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var picture = factory.createPicture();
            var person = factory.createPerson();
            article.authors.add(person);
            article2.authors.add(person);
            article3.authors.add(person);
            article.picture = picture;
            article2.picture = picture;
            article3.picture = picture;
            article.number = Number.NaN;
            article2.number = Number.NEGATIVE_INFINITY;
            article3.number = Number.POSITIVE_INFINITY;
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(article3);
            eobjects.push(picture);
            eobjects.push(person);
            var xmi35 = saveToXMI(eobjects);
            var instance35 = loadFromXMI(xmi35);
            var test = instance35[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && Number.isNaN(instance35[0].number)
                && instance35[1] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && !Number.isFinite(instance35[1].number)
                && instance35[2] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && !Number.isFinite(instance35[2].number);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare special double values', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var website2 = factory.createWebsite();
            var website3 = factory.createWebsite();
            var picture = factory.createPicture();
            var picture2 = factory.createPicture();
            var picture3 = factory.createPicture();
            website.pictures.add(picture);
            website2.pictures.add(picture2);
            website3.pictures.add(picture3);
            website.number = Number.NaN;
            website2.number = Number.NEGATIVE_INFINITY;
            website3.number = Number.POSITIVE_INFINITY;
            eobjects.push(website);
            eobjects.push(website2);
            eobjects.push(website3);
            var xmi36 = saveToXMI(eobjects);
            var instance36 = loadFromXMI(xmi36);
            var test = instance36[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && Number.isNaN(instance36[0].number)
                && instance36[1] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && !Number.isFinite(instance36[1].number)
                && instance36[2] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && !Number.isFinite(instance36[2].number);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare the ordering of a list as an attribute', function () {
            eobjects = [];
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var article4 = factory.createArticle();
            var person = factory.createPerson();
            var picture = factory.createPicture();
            article.authors.add(person);
            article2.authors.add(person);
            article3.authors.add(person);
            article4.authors.add(person);
            article.picture = picture;
            article2.picture = picture;
            article3.picture = picture;
            article4.picture = picture;
            article.name = "a1";
            article2.name = "a2";
            article3.name = "a3";
            article4.name = "a4";
            article.related.add(article2);
            article.related.add(article3);
            article.related.add(article4);
            eobjects.push(article);
            eobjects.push(article2);
            eobjects.push(article3);
            eobjects.push(article4);
            eobjects.push(person);
            eobjects.push(picture);
            var xmi40 = saveToXMI(eobjects);
            var instance = loadFromXMI(xmi40);
            var test = instance[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance[0].related.at(0).name === "a2"
                && instance[0].related.at(1).name === "a3"
                && instance[0].related.at(2).name === "a4";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare a large long number', function () {
            eobjects = [];
            var student = factory.createStudent();
            student.matrikelnr = 435510489098620210;
            eobjects.push(student);
            var xmi41 = saveToXMI(eobjects);
            var instance = loadFromXMI(xmi41);
            var test = instance[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance[0].matrikelnr === 435510489098620210;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare the ordering of a list of references', function () {
            eobjects = [];
            var article = factory.createArticle();
            var picture = factory.createPicture();
            article.picture = picture;
            article.name = "x";
            var person = factory.createPerson();
            var person2 = factory.createPerson();
            var person3 = factory.createPerson();
            person.surname = "a";
            person2.surname = "b";
            person3.surname = "c";
            article.authors.add(person);
            article.authors.add(person2);
            article.authors.add(person3);
            person.articles.add(article);
            person2.articles.add(article);
            person3.articles.add(article);
            eobjects.push(article);
            eobjects.push(picture);
            eobjects.push(person3);
            eobjects.push(person);
            eobjects.push(person2);
            var xmi43 = saveToXMI(eobjects);
            var instance = loadFromXMI(xmi43);
            var test = instance[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance[1] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance[2] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance[3] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance[4] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance[0].authors[0].surname === "a"
                && instance[0].authors[1].surname === "b"
                && instance[0].authors[2].surname === "c"
                && instance[2].articles[0].name === "x"
                && instance[3].articles[0].name === "x"
                && instance[4].articles[0].name === "x";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can save/load and compare the ordering of containments', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var picture = factory.createPicture();
            var picture2 = factory.createPicture();
            var picture3 = factory.createPicture();
            picture.name = "a";
            picture2.name = "b";
            picture3.name = "c";
            website.pictures.add(picture);
            website.pictures.add(picture2);
            website.pictures.add(picture3);
            eobjects.push(website);
            var xmi44 = saveToXMI(eobjects);
            var instance = loadFromXMI(xmi44);
            var test = instance[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance[0].pictures[0].name === "a"
                && instance[0].pictures[1].name === "b"
                && instance[0].pictures[2].name === "c";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
    });
    describe('load/save and compare', function () {
        it('test load/save and compare single EObject', function () {
            var t1 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:id=\"1cf6b631-cac9-4d39-a08f-300ecf2f361d\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t1);
            var xmi = saveToXMI(instance);
            var instance1 = loadFromXMI(xmi);
            var test = instance1[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"];
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single string attribute', function () {
            var t2 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:id=\"09664bdb-d6e0-494e-b2ab-044797b61604\" surname=\"Surname\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t2);
            var xmi = saveToXMI(instance);
            var instance2 = loadFromXMI(xmi);
            var test = instance2[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance2[0].surname === "Surname";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare list of string as attribute', function () {
            var t3 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Source xmi:id=\"647c11b6-2132-4f6f-e69b-d88aa7d03f8d\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <authors>Author1</authors>\r\n" +
                "    <authors>Author2</authors>\r\n" +
                "</webpage:Source>";
            var instance = loadFromXMI(t3);
            var xmi = saveToXMI(instance);
            var instance3 = loadFromXMI(xmi);
            var test = instance3[0] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
                && instance3[0].authors.containsX("Author1")
                && instance3[0].authors.containsX("Author2");
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single short attribute', function () {
            var t4 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:id=\"3da2fc8d-a0cd-4f17-b691-6c2a8922e941\" age=\"27\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t4);
            var xmi = saveToXMI(instance);
            var instance4 = loadFromXMI(xmi);
            var test = instance4[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance4[0].age === 27;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single long attribute', function () {
            var t5 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:id=\"06fe7e6d-4109-4c9d-9c10-34b1812e301a\" matrikelnr=\"123\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t5);
            var xmi = saveToXMI(instance);
            var instance5 = loadFromXMI(xmi);
            var test = instance5[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance5[0].matrikelnr === 123;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single int attribute', function () {
            var t6 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Picture xmi:id=\"a35104bb-65f8-4129-a057-c78b09d481a7\" number=\"123\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t6);
            var xmi = saveToXMI(instance);
            var instance6 = loadFromXMI(xmi);
            var test = instance6[0] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance6[0].number === 123;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare list of int as an attribute', function () {
            var t7 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Source xmi:id=\"d9c206d0-2cf4-44f2-a9a1-54357d398c18\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <page_no>-1</page_no>\r\n" +
                "    <page_no>2</page_no>\r\n" +
                "</webpage:Source>";
            var instance = loadFromXMI(t7);
            var xmi = saveToXMI(instance);
            var instance7 = loadFromXMI(xmi);
            var test = instance7[0] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
                && instance7[0].page_no.containsX(-1)
                && instance7[0].page_no.containsX(2);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single float attribute', function () {
            var t8 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"333ba83c-3a58-466d-b443-7130fda04462\" number=\"1.2\" authors=\"1ec56f4e-0108-4de1-ae79-6ec4706e8916\" picture=\"64926fe7-fbdb-48dd-f399-51516d5e0391\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"64926fe7-fbdb-48dd-f399-51516d5e0391\"/>\r\n" +
                "    <webpage:Person xmi:id=\"1ec56f4e-0108-4de1-ae79-6ec4706e8916\" articles=\"333ba83c-3a58-466d-b443-7130fda04462\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t8);
            var xmi = saveToXMI(instance);
            var instance8 = loadFromXMI(xmi);
            var test = instance8[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance8[0].number === 1.2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare list of float as an attribute', function () {
            var t9 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:id=\"26d956b3-90c5-4f67-e9ee-b7f399142aef\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <grades>-2</grades>\r\n" +
                "    <grades>2.3</grades>\r\n" +
                "</webpage:Student>";
            var instance = loadFromXMI(t9);
            var xmi = saveToXMI(instance);
            var instance9 = loadFromXMI(xmi);
            var test = instance9[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance9[0].grades.containsX(-2.0)
                && instance9[0].grades.containsX(2.3);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single double attribute', function () {
            var t10 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:id=\"ff8309dc-8c76-4c8d-e4fc-f09a05e24631\" number=\"1\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <pictures xmi:id=\"1ffd1279-8862-459c-9661-890419bd1aff\"/>\r\n" +
                "</webpage:Website>";
            var instance = loadFromXMI(t10);
            var xmi = saveToXMI(instance);
            var instance10 = loadFromXMI(xmi);
            var test = instance10[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance10[0].number === 1.0;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare list of char as an atrribute', function () {
            var t11 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Person xmi:id=\"0bc874d8-28c5-48a3-ba5d-3b569547399e\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <access_key>97</access_key>\r\n" +
                "    <access_key>98</access_key>\r\n" +
                "</webpage:Person>";
            var instance = loadFromXMI(t11);
            var xmi = saveToXMI(instance);
            var instance11 = loadFromXMI(xmi);
            var test = instance11[0] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance11[0].access_key.containsX('a')
                && instance11[0].access_key.containsX('b');
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare boolean attribute', function () {
            var t12 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Chapter xmi:id=\"676a9b23-44e9-4d9e-fe8f-d7d814bbff92\" subSection=\"true\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t12);
            var xmi = saveToXMI(instance);
            var instance12 = loadFromXMI(xmi);
            var test = instance12[0] instanceof webpage_ChapterImpl__WEBPACK_IMPORTED_MODULE_11__["ChapterImpl"]
                && instance12[0].subSection === true;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare list of boolean as an attribute', function () {
            var t13 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Picture xmi:id=\"ecff830e-d343-4bce-ab6c-2b3dc0c473db\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <hash>true</hash>\r\n" +
                "    <hash>false</hash>\r\n" +
                "</webpage:Picture>";
            var instance = loadFromXMI(t13);
            var xmi = saveToXMI(instance);
            var instance13 = loadFromXMI(xmi);
            var test = instance13[0] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance13[0].hash.containsX(true)
                && instance13[0].hash.containsX(false);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare enum attribute', function () {
            var t14 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"1421bb6d-f18e-4268-da06-e8bf346856d2\" articletype=\"STUDY\" authors=\"7c0e6673-2bf2-430a-e8b0-05a1cb29c0ad\" picture=\"c6cb7159-b814-470c-aea4-ec1bc1694a4d\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"c6cb7159-b814-470c-aea4-ec1bc1694a4d\"/>\r\n" +
                "    <webpage:Person xmi:id=\"7c0e6673-2bf2-430a-e8b0-05a1cb29c0ad\" articles=\"1421bb6d-f18e-4268-da06-e8bf346856d2\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t14);
            var xmi = saveToXMI(instance);
            var instance14 = loadFromXMI(xmi);
            var test = instance14[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance14[0].articletype === webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single containment', function () {
            var t15 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:id=\"fd6e2095-2115-464c-d629-433533965348\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <pictures xmi:id=\"c002f044-3bdf-47cf-c309-13a7a5a9e40e\"/>\r\n" +
                "</webpage:Website>";
            var instance = loadFromXMI(t15);
            var xmi = saveToXMI(instance);
            var instance15 = loadFromXMI(xmi);
            var test = instance15[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance15[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple containments', function () {
            var t16 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:id=\"bbb65d82-d73d-4609-8d27-866d22ed196d\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <categories xmi:id=\"704fc979-7ea8-4e52-ed28-0c49a21118bf\"/>\r\n" +
                "    <categories xmi:id=\"387f83a6-342c-46ed-afff-9efc985f2b3a\"/>\r\n" +
                "    <pictures xmi:id=\"545cb65a-ebd4-44f3-f27b-97cfcef963c4\"/>\r\n" +
                "</webpage:Website>";
            var instance = loadFromXMI(t16);
            var xmi = saveToXMI(instance);
            var instance16 = loadFromXMI(xmi);
            var test = instance16[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance16[0].categories.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single reference', function () {
            var t17 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"9e407b40-ba5d-45a6-8047-68cb69068113\" authors=\"fd610df5-4962-4014-d21c-dc68df97f583\" picture=\"e7e4e6a1-7e93-4bf1-f2f5-6a6b3f52c553\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"e7e4e6a1-7e93-4bf1-f2f5-6a6b3f52c553\"/>\r\n" +
                "    <webpage:Person xmi:id=\"fd610df5-4962-4014-d21c-dc68df97f583\" articles=\"9e407b40-ba5d-45a6-8047-68cb69068113\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t17);
            var xmi = saveToXMI(instance);
            var instance17 = loadFromXMI(xmi);
            var test = instance17[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance17[0].authors.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple references', function () {
            var t18 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"cc39a545-0ec1-46ce-f61f-44ed189c3990\" authors=\"715f5cbc-0cb6-4cf6-bb5e-857a0daab469\" picture=\"5fd076af-fba3-4f06-d3ef-94ea79a7fbe3\" sources=\"de196a6f-74b4-49c1-f710-18ff8a47e293 989b1f83-4fb6-418e-9b88-b74bd60d6939\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"5fd076af-fba3-4f06-d3ef-94ea79a7fbe3\"/>\r\n" +
                "    <webpage:Person xmi:id=\"715f5cbc-0cb6-4cf6-bb5e-857a0daab469\" articles=\"cc39a545-0ec1-46ce-f61f-44ed189c3990\"/>\r\n" +
                "    <webpage:Source xmi:id=\"de196a6f-74b4-49c1-f710-18ff8a47e293\"/>\r\n" +
                "    <webpage:Source xmi:id=\"989b1f83-4fb6-418e-9b88-b74bd60d6939\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t18);
            var xmi = saveToXMI(instance);
            var instance18 = loadFromXMI(xmi);
            var test = instance18[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance18[0].sources.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare single bidirectional reference', function () {
            var t19 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"ff5066f8-9f96-4e15-debb-c19c71d9aa39\" authors=\"1810fd44-1644-4a6e-8534-0f547c01e30b\" picture=\"84570dc3-28e7-4667-d8d8-02e4fb2e9bc6\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"84570dc3-28e7-4667-d8d8-02e4fb2e9bc6\"/>\r\n" +
                "    <webpage:Student xmi:id=\"1810fd44-1644-4a6e-8534-0f547c01e30b\" articles=\"ff5066f8-9f96-4e15-debb-c19c71d9aa39\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t19);
            var xmi = saveToXMI(instance);
            var instance19 = loadFromXMI(xmi);
            var test = instance19[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance19[0].authors.size() == 1
                && instance19[2] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance19[2].articles.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple bidirectional references', function () {
            var t20 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"7dae9211-3a7e-4b52-af74-9203505a3844\" authors=\"d33d5859-cdb2-490a-cfef-068b2dcf47d2 991bab0f-8c72-4a55-ca3f-45449141dd4a\" picture=\"2d831061-11fa-4c55-b88b-eed339cfa15d\"/>\r\n" +
                "    <webpage:Article xmi:id=\"2334bf2b-e1b9-4113-aa3e-e6a38f98b39d\" authors=\"991bab0f-8c72-4a55-ca3f-45449141dd4a\" picture=\"2d831061-11fa-4c55-b88b-eed339cfa15d\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"2d831061-11fa-4c55-b88b-eed339cfa15d\"/>\r\n" +
                "    <webpage:Person xmi:id=\"d33d5859-cdb2-490a-cfef-068b2dcf47d2\" articles=\"7dae9211-3a7e-4b52-af74-9203505a3844\"/>\r\n" +
                "    <webpage:Student xmi:id=\"991bab0f-8c72-4a55-ca3f-45449141dd4a\" articles=\"7dae9211-3a7e-4b52-af74-9203505a3844 2334bf2b-e1b9-4113-aa3e-e6a38f98b39d\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t20);
            var xmi = saveToXMI(instance);
            var instance20 = loadFromXMI(xmi);
            var test = instance20[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance20[0].authors.size() == 2
                && instance20[4] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance20[4].articles.size() == 2;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple reference to EObjects of same type', function () {
            var t21 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"8f418e8d-5f61-47af-d954-b2e7b3796276\" authors=\"126dec12-fab8-4065-9967-0cc86f16547a\" picture=\"3c31c2f1-f0bb-42ab-a882-079b7ec82377\" related=\"02cd90b2-b4d1-4b6f-9ee4-8c68dbaae362 95b21118-320c-4272-c831-422799917568\"/>\r\n" +
                "    <webpage:Article xmi:id=\"02cd90b2-b4d1-4b6f-9ee4-8c68dbaae362\" authors=\"126dec12-fab8-4065-9967-0cc86f16547a\" picture=\"3c31c2f1-f0bb-42ab-a882-079b7ec82377\"/>\r\n" +
                "    <webpage:Article xmi:id=\"95b21118-320c-4272-c831-422799917568\" authors=\"126dec12-fab8-4065-9967-0cc86f16547a\" picture=\"3c31c2f1-f0bb-42ab-a882-079b7ec82377\"/>\r\n" +
                "    <webpage:Person xmi:id=\"126dec12-fab8-4065-9967-0cc86f16547a\" articles=\"8f418e8d-5f61-47af-d954-b2e7b3796276 02cd90b2-b4d1-4b6f-9ee4-8c68dbaae362 95b21118-320c-4272-c831-422799917568\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"3c31c2f1-f0bb-42ab-a882-079b7ec82377\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t21);
            var xmi = saveToXMI(instance);
            var instance21 = loadFromXMI(xmi);
            var test = instance21[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance21[0].related.size() == 2
                && instance21[0].related[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance21[0].related[1] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"];
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare self reference', function () {
            var t22 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"9bcf1685-cf81-4709-a19b-8768241c0a70\" name =\"test\" authors=\"9c4323ef-2ee9-4157-ca39-ed8f70e505f9\" picture=\"90cf7c3a-37aa-4d2f-af0a-d8b55349c9e0\" related=\"9bcf1685-cf81-4709-a19b-8768241c0a70\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"90cf7c3a-37aa-4d2f-af0a-d8b55349c9e0\"/>\r\n" +
                "    <webpage:Person xmi:id=\"9c4323ef-2ee9-4157-ca39-ed8f70e505f9\" articles=\"9bcf1685-cf81-4709-a19b-8768241c0a70\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t22);
            var xmi = saveToXMI(instance);
            var instance22 = loadFromXMI(xmi);
            var test = instance22[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance22[0].related.size() == 1
                && instance22[0].related[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance22[0].related[0].name === "test";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple EObject containment', function () {
            var t28 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Website xmi:id=\"_Ea1OADT-Eeuy-6z-kXSK-w\">\r\n" +
                "    <pictures xmi:id=\"_Ea1OATT-Eeuy-6z-kXSK-w\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Website xmi:id=\"_Ea1OAjT-Eeuy-6z-kXSK-w\">\r\n" +
                "    <pictures xmi:id=\"_Ea1OATT-Eeuy-6z-kXSK-w\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t28);
            var xmi = saveToXMI(instance);
            var instance28 = loadFromXMI(xmi);
            var test = instance28[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance28[0].pictures.size() == 1
                && instance28[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare containment and separate', function () {
            var t29 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Website xmi:id=\"_YEcKQDWgEeuiRLkt8tJQnA\">\r\n" +
                "      <pictures xmi:id=\"_YEcKQTWgEeuiRLkt8tJQnA\"/>\r\n" +
                "  </webpage:Website>\r\n" +
                "  <webpage:Picture xmi:id=\"_YEcKQTWgEeuiRLkt8tJQnA\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t29);
            var xmi = saveToXMI(instance);
            var instance29 = loadFromXMI(xmi);
            var test = instance29[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance29[1] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance29[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare multiple same EObject', function () {
            var t30 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Student xmi:id=\"_tPFc8DT5EeuAP8PgtQG7XA\"/>\r\n" +
                "  <webpage:Student xmi:id=\"_tPFc8DT5EeuAP8PgtQG7XA\"/>\r\n" +
                "</xmi:XMI>";
            ;
            var instance = loadFromXMI(t30);
            var xmi = saveToXMI(instance);
            var instance30 = loadFromXMI(xmi);
            var test = instance30.length == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isFalse(test);
        });
        it('test load/save and compare multiple same containment', function () {
            var t31 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_BumjMDT8EeuC0ILVHZfbng\">\r\n" +
                "  <pictures xmi:id=\"_BunKQDT8EeuC0ILVHZfbng\"/>\r\n" +
                "  <pictures xmi:id=\"_BunKQDT8EeuC0ILVHZfbng\"/>\r\n" +
                "</webpage:Website>";
            var instance = loadFromXMI(t31);
            var xmi = saveToXMI(instance);
            var instance31 = loadFromXMI(xmi);
            var test = instance31[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance31[0].pictures.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isFalse(test);
        });
        it('test load/save and compare multiple same reference', function () {
            var t32 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_2Yq9kDV7EeulSerH-1v9sA\" authors=\"_2Yq9kzV7EeulSerH-1v9sA\" picture=\"_2Yq9kTV7EeulSerH-1v9sA _2Yq9kTV7EeulSerH-1v9sA _2Yq9kTV7EeulSerH-1v9sA\" sources=\"_2Yq9kjV7EeulSerH-1v9sA _2Yq9kjV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_2Yq9kTV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Source xmi:id=\"_2Yq9kjV7EeulSerH-1v9sA\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_2Yq9kzV7EeulSerH-1v9sA\" articles=\"_2Yq9kDV7EeulSerH-1v9sA\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t32);
            var xmi = saveToXMI(instance);
            var instance32 = loadFromXMI(xmi);
            var test = instance32[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance32[0].sources.size() == 1;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isFalse(test);
        });
        it('test load/save and compare inheritance', function () {
            var t33 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Student xmi:id=\"56250b3e-41b1-44af-cf0d-94af281da067\" age=\"29\" xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\"/>";
            var instance = loadFromXMI(t33);
            var xmi = saveToXMI(instance);
            var instance33 = loadFromXMI(xmi);
            var test = instance33[0] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
                && instance33[0].age === 29;
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare special values float', function () {
            var t35 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Article xmi:id=\"5243dba2-9e25-4ae1-9623-c3f844704928\" number=\"NaN\" authors=\"327e47c5-dad2-4e5b-8650-f41954ffb2b8\" picture=\"bc9d3114-32c1-4040-8657-7762f1c9e6f9\"/>\r\n" +
                "    <webpage:Article xmi:id=\"c90d6531-ad68-4b3c-f763-3b3b704611ec\" number=\"-Infinity\" authors=\"327e47c5-dad2-4e5b-8650-f41954ffb2b8\" picture=\"bc9d3114-32c1-4040-8657-7762f1c9e6f9\"/>\r\n" +
                "    <webpage:Article xmi:id=\"fa7c127f-7291-40c5-9cf3-a0dbf40987a1\" number=\"Infinity\" authors=\"327e47c5-dad2-4e5b-8650-f41954ffb2b8\" picture=\"bc9d3114-32c1-4040-8657-7762f1c9e6f9\"/>\r\n" +
                "    <webpage:Picture xmi:id=\"bc9d3114-32c1-4040-8657-7762f1c9e6f9\"/>\r\n" +
                "    <webpage:Person xmi:id=\"327e47c5-dad2-4e5b-8650-f41954ffb2b8\" articles=\"5243dba2-9e25-4ae1-9623-c3f844704928 c90d6531-ad68-4b3c-f763-3b3b704611ec fa7c127f-7291-40c5-9cf3-a0dbf40987a1\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t35);
            var xmi = saveToXMI(instance);
            var instance35 = loadFromXMI(xmi);
            var test = instance35[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && Number.isNaN(instance35[0].number)
                && instance35[1] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && !Number.isFinite(instance35[1].number)
                && instance35[2] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && !Number.isFinite(instance35[2].number);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('test load/save and compare special values double', function () {
            var t36 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "    <webpage:Website xmi:id=\"17c35e46-a28e-4271-ffb6-bc2fd63a3983\" number=\"NaN\">\r\n" +
                "        <pictures xmi:id=\"8e29074e-ea39-4252-f2d0-810c7fad6c17\"/>\r\n" +
                "    </webpage:Website>\r\n" +
                "    <webpage:Website xmi:id=\"8cacf1ac-257b-4ff2-b261-5f1dc987effe\" number=\"-Infinity\">\r\n" +
                "        <pictures xmi:id=\"2e0452f6-14ed-4631-8df3-1275aedd28f0\"/>\r\n" +
                "    </webpage:Website>\r\n" +
                "    <webpage:Website xmi:id=\"69ca85a0-8ef2-41c0-ee21-2c914b4bf606\" number=\"Infinity\">\r\n" +
                "        <pictures xmi:id=\"69c4a0d5-f3b5-4cf0-988b-fd660df0122a\"/>\r\n" +
                "    </webpage:Website>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t36);
            var xmi = saveToXMI(instance);
            var instance36 = loadFromXMI(xmi);
            var test = instance36[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && Number.isNaN(instance36[0].number)
                && instance36[1] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && !Number.isFinite(instance36[1].number)
                && instance36[2] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && !Number.isFinite(instance36[2].number);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can load/save and compare the ordering of a list as an attribute', function () {
            var t40 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_4WuC0DflEeufmvup1OnXvg\" name=\"a1\" authors=\"_4WuC1DflEeufmvup1OnXvg\" picture=\"_4WuC1TflEeufmvup1OnXvg\" related=\"_4WuC0TflEeufmvup1OnXvg _4WuC0jflEeufmvup1OnXvg _4WuC0zflEeufmvup1OnXvg\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_4WuC0TflEeufmvup1OnXvg\" name=\"a2\" authors=\"_4WuC1DflEeufmvup1OnXvg\" picture=\"_4WuC1TflEeufmvup1OnXvg\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_4WuC0jflEeufmvup1OnXvg\" name=\"a3\" authors=\"_4WuC1DflEeufmvup1OnXvg\" picture=\"_4WuC1TflEeufmvup1OnXvg\"/>\r\n" +
                "  <webpage:Article xmi:id=\"_4WuC0zflEeufmvup1OnXvg\" name=\"a4\" authors=\"_4WuC1DflEeufmvup1OnXvg\" picture=\"_4WuC1TflEeufmvup1OnXvg\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_4WuC1DflEeufmvup1OnXvg\" articles=\"_4WuC0DflEeufmvup1OnXvg _4WuC0TflEeufmvup1OnXvg _4WuC0jflEeufmvup1OnXvg _4WuC0zflEeufmvup1OnXvg\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_4WuC1TflEeufmvup1OnXvg\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t40);
            var xmi = saveToXMI(instance);
            var instance40 = loadFromXMI(xmi);
            var test = instance40[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance40[0].related.at(0).name === "a2"
                && instance40[0].related.at(1).name === "a3"
                && instance40[0].related.at(2).name === "a4";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can load/save and compare the ordering of a list of references', function () {
            var t43 = "<xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\r\n" +
                "  <webpage:Article xmi:id=\"_OkKS8EI6EeuEic2tK4l2WA\" name=\"x\" authors=\"_OkKS80I6EeuEic2tK4l2WA _OkKS9EI6EeuEic2tK4l2WA _OkKS8kI6EeuEic2tK4l2WA\" picture=\"_OkKS8UI6EeuEic2tK4l2WA\"/>\r\n" +
                "  <webpage:Picture xmi:id=\"_OkKS8UI6EeuEic2tK4l2WA\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OkKS8kI6EeuEic2tK4l2WA\" articles=\"_OkKS8EI6EeuEic2tK4l2WA\" surname=\"c\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OkKS80I6EeuEic2tK4l2WA\" articles=\"_OkKS8EI6EeuEic2tK4l2WA\" surname=\"a\"/>\r\n" +
                "  <webpage:Person xmi:id=\"_OkKS9EI6EeuEic2tK4l2WA\" articles=\"_OkKS8EI6EeuEic2tK4l2WA\" surname=\"b\"/>\r\n" +
                "</xmi:XMI>";
            var instance = loadFromXMI(t43);
            var xmi = saveToXMI(instance);
            var instance43 = loadFromXMI(xmi);
            var test = instance43[0] instanceof webpage_ArticleImpl__WEBPACK_IMPORTED_MODULE_9__["ArticleImpl"]
                && instance43[1] instanceof webpage_PictureImpl__WEBPACK_IMPORTED_MODULE_8__["PictureImpl"]
                && instance43[2] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance43[3] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance43[4] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
                && instance43[0].authors[0].surname === "a"
                && instance43[0].authors[1].surname === "b"
                && instance43[0].authors[2].surname === "c"
                && instance43[2].articles[0].name === "x"
                && instance43[3].articles[0].name === "x"
                && instance43[4].articles[0].name === "x";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Can load/save and compare the ordering of containments', function () {
            var t44 = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\r\n" +
                "<webpage:Website xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\" xmi:id=\"_4mb6kEI9EeuUBrV7JMdYJA\">\r\n" +
                "  <pictures xmi:type=\"webpage:Picture\" xmi:id=\"_4mb6kUI9EeuUBrV7JMdYJA\" name=\"a\"/>\r\n" +
                "  <pictures xmi:type=\"webpage:Picture\" xmi:id=\"_4mb6kkI9EeuUBrV7JMdYJA\" name=\"b\"/>\r\n" +
                "  <pictures xmi:type=\"webpage:Picture\" xmi:id=\"_4mb6k0I9EeuUBrV7JMdYJA\" name=\"c\"/>\r\n" +
                "</webpage:Website>";
            var instance = loadFromXMI(t44);
            var xmi = saveToXMI(instance);
            var instance44 = loadFromXMI(xmi);
            var test = instance44[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
                && instance44[0].pictures[0].name === "a"
                && instance44[0].pictures[1].name === "b"
                && instance44[0].pictures[2].name === "c";
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
    });
    describe('Test complex Ecore instance saving', function () {
        it('Test complex instance', function () {
            eobjects = [];
            var website = factory.createWebsite();
            var website2 = factory.createWebsite();
            var category = factory.createCategory();
            var category2 = factory.createCategory();
            var article = factory.createArticle();
            var article2 = factory.createArticle();
            var article3 = factory.createArticle();
            var picture = factory.createPicture();
            var picture2 = factory.createPicture();
            var picture3 = factory.createPicture();
            var chapter = factory.createChapter();
            var chapter2 = factory.createChapter();
            var chapter3 = factory.createChapter();
            var source1 = factory.createSource();
            var source2 = factory.createSource();
            var source3 = factory.createSource();
            var person = factory.createPerson();
            var student = factory.createStudent();
            website.name = "website";
            website.title = "website title";
            website.description = "website description";
            website.number = 1.0;
            website.links.add("www.google.de");
            website.links.add("www.kit.edu");
            website2.name = "website2";
            website2.title = "website title2";
            website2.description = "website description2";
            website2.number = 2.0;
            website2.links.add("www.facebook.de");
            category.name = "category";
            category.number = 1;
            category2.name = "category2";
            category2.number = 2;
            article.name = "article";
            article.articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY;
            article.flags.add(true);
            article.flags.add(false);
            article.number = 1.0;
            article2.name = "article2";
            article2.articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].REVIEW;
            article2.flags.add(true);
            article2.number = 2.0;
            article3.name = "article3";
            article3.articletype = webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].REVIEW;
            picture.name = "picture";
            picture.information.add('a');
            picture.information.add('b');
            picture.information.add('c');
            picture.number = 1;
            picture.hash.add(true);
            picture.hash.add(false);
            picture2.name = "picture2";
            picture2.information.add('x');
            picture2.information.add('y');
            picture2.information.add('z');
            picture2.number = 2;
            picture2.hash.add(true);
            picture3.name = "picture3";
            picture3.information.add('w');
            picture3.number = 3;
            chapter.title.add("Title");
            chapter.title.add("Subtitle");
            chapter.subSection = false;
            chapter.letters.add('l');
            chapter.letters.add('e');
            chapter.letters.add('t');
            chapter2.title.add("Title2");
            chapter2.title.add("Subtitle2");
            chapter2.subSection = false;
            chapter2.letters.add('w');
            chapter2.letters.add('o');
            chapter2.letters.add('r');
            chapter2.letters.add('d');
            chapter3.title.add("Title3");
            chapter3.letters.add('y');
            source1.title = "source";
            source1.url = "source url";
            source1.authors.add("This was once");
            source1.authors.add("revealed to me");
            source1.authors.add("in a dream");
            source1.page_no.add(1);
            source1.page_no.add(2);
            source2.title = "source2";
            source2.url = "source url2";
            source2.authors.add("I was there");
            source2.authors.add("3000 years ago");
            source2.page_no.add(3);
            source3.title = "source3";
            source3.url = "source url3";
            source3.authors.add("Dude trust me");
            source3.page_no.add(7);
            person.name.add("Erster Vorname");
            person.name.add("Zweiter Vorname");
            person.surname = "Nachname";
            person.age = 28;
            person.access_key.add('a');
            person.access_key.add('e');
            person.access_key.add('s');
            student.name.add("Peter");
            student.name.add("Christos");
            student.surname = "Digas";
            student.age = 24;
            student.access_key.add('t');
            student.access_key.add('f');
            student.matrikelnr = 1780794;
            student.grades.add(2.0);
            student.grades.add(2.3);
            student.grades.add(2.7);
            article.authors.add(person);
            article.authors.add(student);
            article.sources.add(source1);
            article.chapters.add(chapter);
            article.picture = picture;
            article.related.add(article2);
            article2.authors.add(student);
            article2.sources.add(source2);
            article2.sources.add(source3);
            article2.chapters.add(chapter2);
            article2.picture = picture2;
            article2.related.add(article);
            article3.authors.add(student);
            article3.sources.add(source2);
            article3.chapters.add(chapter3);
            article3.picture = picture3;
            article3.related.add(article2);
            person.articles.add(article);
            student.articles.add(article);
            student.articles.add(article2);
            student.articles.add(article3);
            category.articles.add(article);
            category.articles.add(article2);
            category2.articles.add(article3);
            website.pictures.add(picture);
            website.pictures.add(picture2);
            website.categories.add(category);
            website2.pictures.add(picture3);
            website2.categories.add(category2);
            eobjects.push(website2);
            eobjects.push(person);
            eobjects.push(website);
            eobjects.push(student);
            eobjects.push(source1);
            eobjects.push(source2);
            eobjects.push(source3);
            var xmi_full = saveToXMI(eobjects);
            console.log(xmi_full);
            var instance = loadFromXMI(xmi_full);
            var test = testInstance(instance);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
        it('Test complex ecore instance loading', function () {
            var xmi_emf = "<?xml version=\"1.0\" encoding=\"ASCII\"?>\n            <xmi:XMI xmi:version=\"2.0\" xmlns:xmi=\"http://www.omg.org/XMI\" xmlns:webpage=\"http://www.xmibypeterfollowingthetutoria.ls/webpage\">\n              <webpage:Website xmi:id=\"_NnUR8DQdEeuIrKb3NleqKQ\" name=\"website2\" title=\"website title2\" description=\"website description2\" number=\"2.0\">\n                <categories xmi:id=\"_NnU5ADQdEeuIrKb3NleqKQ\" name=\"category2\" number=\"2\">\n                  <articles xmi:id=\"_NnU5ATQdEeuIrKb3NleqKQ\" name=\"article3\" authors=\"_NnU5DTQdEeuIrKb3NleqKQ\" picture=\"_NnU5AzQdEeuIrKb3NleqKQ\" related=\"_NnU5CTQdEeuIrKb3NleqKQ\" sources=\"_NnU5DzQdEeuIrKb3NleqKQ\">\n                    <chapters xmi:id=\"_NnU5AjQdEeuIrKb3NleqKQ\">\n                      <title>Title3</title>\n                      <letters>121</letters>\n                    </chapters>\n                  </articles>\n                </categories>\n                <pictures xmi:id=\"_NnU5AzQdEeuIrKb3NleqKQ\" name=\"picture3\" number=\"3\">\n                  <information>119</information>\n                </pictures>\n                <links>www.facebook.de</links>\n              </webpage:Website>\n              <webpage:Person xmi:id=\"_NnU5BDQdEeuIrKb3NleqKQ\" articles=\"_NnU5BzQdEeuIrKb3NleqKQ\" surname=\"Nachname\" age=\"28\">\n                <name>Erster Vorname</name>\n                <name>Zweiter Vorname</name>\n                <access_key>97</access_key>\n                <access_key>101</access_key>\n                <access_key>115</access_key>\n              </webpage:Person>\n              <webpage:Website xmi:id=\"_NnU5BTQdEeuIrKb3NleqKQ\" name=\"website\" title=\"website title\" description=\"website description\" number=\"1.0\">\n                <categories xmi:id=\"_NnU5BjQdEeuIrKb3NleqKQ\" name=\"category\" number=\"1\">\n                  <articles xmi:id=\"_NnU5BzQdEeuIrKb3NleqKQ\" name=\"article\" authors=\"_NnU5BDQdEeuIrKb3NleqKQ _NnU5DTQdEeuIrKb3NleqKQ\" picture=\"_NnU5CzQdEeuIrKb3NleqKQ\" articletype=\"STUDY\" related=\"_NnU5CTQdEeuIrKb3NleqKQ\" sources=\"_NnU5DjQdEeuIrKb3NleqKQ\" number=\"1.0\">\n                    <chapters xmi:id=\"_NnU5CDQdEeuIrKb3NleqKQ\">\n                      <title>Title</title>\n                      <title>Subtitle</title>\n                      <letters>108</letters>\n                      <letters>101</letters>\n                      <letters>116</letters>\n                    </chapters>\n                    <flags>true</flags>\n                    <flags>false</flags>\n                  </articles>\n                  <articles xmi:id=\"_NnU5CTQdEeuIrKb3NleqKQ\" name=\"article2\" authors=\"_NnU5DTQdEeuIrKb3NleqKQ\" picture=\"_NnU5DDQdEeuIrKb3NleqKQ\" related=\"_NnU5BzQdEeuIrKb3NleqKQ\" sources=\"_NnU5DzQdEeuIrKb3NleqKQ _NnU5EDQdEeuIrKb3NleqKQ\" number=\"2.0\">\n                    <chapters xmi:id=\"_NnU5CjQdEeuIrKb3NleqKQ\">\n                      <title>Title2</title>\n                      <title>Subtitle2</title>\n                      <letters>119</letters>\n                      <letters>111</letters>\n                      <letters>114</letters>\n                      <letters>100</letters>\n                    </chapters>\n                    <flags>true</flags>\n                  </articles>\n                </categories>\n                <pictures xmi:id=\"_NnU5CzQdEeuIrKb3NleqKQ\" name=\"picture\" number=\"1\">\n                  <information>97</information>\n                  <information>98</information>\n                  <information>99</information>\n                  <hash>true</hash>\n                  <hash>false</hash>\n                </pictures>\n                <pictures xmi:id=\"_NnU5DDQdEeuIrKb3NleqKQ\" name=\"picture2\" number=\"2\">\n                  <information>120</information>\n                  <information>121</information>\n                  <information>122</information>\n                  <hash>true</hash>\n                </pictures>\n                <links>www.google.de</links>\n                <links>www.kit.edu</links>\n              </webpage:Website>\n              <webpage:Student xmi:id=\"_NnU5DTQdEeuIrKb3NleqKQ\" articles=\"_NnU5BzQdEeuIrKb3NleqKQ _NnU5CTQdEeuIrKb3NleqKQ _NnU5ATQdEeuIrKb3NleqKQ\" surname=\"Digas\" age=\"24\" matrikelnr=\"1780794\">\n                <name>Peter</name>\n                <name>Christos</name>\n                <access_key>116</access_key>\n                <access_key>102</access_key>\n                <grades>2.0</grades>\n                <grades>2.3</grades>\n                <grades>2.7</grades>\n              </webpage:Student>\n              <webpage:Source xmi:id=\"_NnU5DjQdEeuIrKb3NleqKQ\" title=\"source\" url=\"source url\">\n                <page_no>1</page_no>\n                <page_no>2</page_no>\n                <authors>This was once</authors>\n                <authors>revealed to me</authors>\n                <authors>in a dream</authors>\n              </webpage:Source>\n              <webpage:Source xmi:id=\"_NnU5DzQdEeuIrKb3NleqKQ\" title=\"source2\" url=\"source url2\">\n                <page_no>3</page_no>\n                <authors>I was there</authors>\n                <authors>3000 years ago</authors>\n              </webpage:Source>\n              <webpage:Source xmi:id=\"_NnU5EDQdEeuIrKb3NleqKQ\" title=\"source3\" url=\"source url3\">\n                <page_no>7</page_no>\n                <authors>Dude trust me</authors>\n              </webpage:Source>\n            </xmi:XMI>";
            var instance = loadFromXMI(xmi_emf);
            console.log(instance);
            var test = testInstance(instance);
            chai__WEBPACK_IMPORTED_MODULE_4__["assert"].isTrue(test);
        });
    });
});
function saveToXMI(ecore_instance_to_serialize /*, URL: string*/) {
    var xmiResource = new ecore_XmiResource__WEBPACK_IMPORTED_MODULE_0__["XmiResource"](webpage, factory, new DOMParser());
    return xmiResource.save(ecore_instance_to_serialize);
}
function loadFromXMI(xmi /*URL: string*/) {
    var xmiResource = new ecore_XmiResource__WEBPACK_IMPORTED_MODULE_0__["XmiResource"](webpage, factory, new DOMParser());
    return xmiResource.load(xmi);
}
;
function testInstance(instance) {
    return instance[0] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
        && instance[1] instanceof webpage_PersonImpl__WEBPACK_IMPORTED_MODULE_5__["PersonImpl"]
        && instance[2] instanceof webpage_WebsiteImpl__WEBPACK_IMPORTED_MODULE_10__["WebsiteImpl"]
        && instance[3] instanceof webpage_StudentImpl__WEBPACK_IMPORTED_MODULE_7__["StudentImpl"]
        && instance[4] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
        && instance[5] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
        && instance[6] instanceof webpage_SourceImpl__WEBPACK_IMPORTED_MODULE_6__["SourceImpl"]
        && instance[0].name === "website2"
        && instance[0].title === "website title2"
        && instance[0].description === "website description2"
        && instance[0].number === 2.0
        && instance[0].links.containsX("www.facebook.de")
        && instance[1].name.containsX("Erster Vorname")
        && instance[1].name.containsX("Zweiter Vorname")
        && instance[1].surname === "Nachname"
        && instance[1].age === 28
        && instance[1].access_key.containsX('a')
        && instance[1].access_key.containsX('e')
        && instance[1].access_key.containsX('s')
        && instance[2].name === "website"
        && instance[2].title === "website title"
        && instance[2].description === "website description"
        && instance[2].number === 1.0
        && instance[2].links.containsX("www.google.de")
        && instance[2].links.containsX("www.kit.edu")
        && instance[3].name.containsX("Peter")
        && instance[3].name.containsX("Christos")
        && instance[3].surname === "Digas"
        && instance[3].age === 24
        && instance[3].access_key.containsX('t')
        && instance[3].access_key.containsX('f')
        && instance[3].matrikelnr === 1780794
        && instance[3].grades.containsX(2.0)
        && instance[3].grades.containsX(2.3)
        && instance[3].grades.containsX(2.7)
        && instance[4].title === "source"
        && instance[4].url === "source url"
        && instance[4].authors.containsX("This was once")
        && instance[4].authors.containsX("revealed to me")
        && instance[4].authors.containsX("in a dream")
        && instance[4].page_no.containsX(1)
        && instance[4].page_no.containsX(2)
        && instance[5].title === "source2"
        && instance[5].url === "source url2"
        && instance[5].authors.containsX("I was there")
        && instance[5].authors.containsX("3000 years ago")
        && instance[5].page_no.containsX(3)
        && instance[6].title === "source3"
        && instance[6].url === "source url3"
        && instance[6].authors.containsX("Dude trust me")
        && instance[6].page_no.containsX(7)
        && instance[0].categories[0].name === "category2"
        && instance[0].categories[0].number === 2
        && instance[0].pictures[0].name === "picture3"
        && instance[0].pictures[0].information.containsX('w')
        && instance[0].pictures[0].number === 3
        && instance[2].categories[0].name === "category"
        && instance[2].categories[0].number === 1
        && instance[2].pictures[0].name === "picture"
        && instance[2].pictures[0].information.containsX('a')
        && instance[2].pictures[0].information.containsX('b')
        && instance[2].pictures[0].information.containsX('c')
        && instance[2].pictures[0].number === 1
        && instance[2].pictures[0].hash.containsX(true)
        && instance[2].pictures[0].hash.containsX(false)
        && instance[2].pictures[1].name === "picture2"
        && instance[2].pictures[1].information.containsX('x')
        && instance[2].pictures[1].information.containsX('y')
        && instance[2].pictures[1].information.containsX('z')
        && instance[2].pictures[1].number === 2
        && instance[2].pictures[1].hash.containsX(true)
        && instance[0].categories[0].articles[0].name === "article3"
        && instance[0].categories[0].articles[0].articletype === webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].REVIEW
        && instance[2].categories[0].articles[0].name === "article"
        && instance[2].categories[0].articles[0].articletype === webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].STUDY
        && instance[2].categories[0].articles[0].flags.containsX(true)
        && instance[2].categories[0].articles[0].flags.containsX(false)
        && instance[2].categories[0].articles[0].number === 1.0
        && instance[2].categories[0].articles[1].name === "article2"
        && instance[2].categories[0].articles[1].articletype === webpage_ArticleType__WEBPACK_IMPORTED_MODULE_3__["ArticleType"].REVIEW
        && instance[2].categories[0].articles[1].flags.containsX(true)
        && instance[2].categories[0].articles[1].number === 2.0
        && instance[0].categories[0].articles[0].chapters[0].title.containsX("Title3")
        && instance[0].categories[0].articles[0].chapters[0].letters.containsX('y')
        && instance[2].categories[0].articles[0].chapters[0].title.containsX("Title")
        && instance[2].categories[0].articles[0].chapters[0].title.containsX("Subtitle")
        && instance[2].categories[0].articles[0].chapters[0].subSection === false
        && instance[2].categories[0].articles[0].chapters[0].letters.containsX('l')
        && instance[2].categories[0].articles[0].chapters[0].letters.containsX('e')
        && instance[2].categories[0].articles[0].chapters[0].letters.containsX('t')
        && instance[2].categories[0].articles[1].chapters[0].title.containsX("Title2")
        && instance[2].categories[0].articles[1].chapters[0].title.containsX("Subtitle2")
        && instance[2].categories[0].articles[1].chapters[0].subSection === false
        && instance[2].categories[0].articles[1].chapters[0].letters.containsX('w')
        && instance[2].categories[0].articles[1].chapters[0].letters.containsX('o')
        && instance[2].categories[0].articles[1].chapters[0].letters.containsX('r')
        && instance[2].categories[0].articles[1].chapters[0].letters.containsX('d')
        && instance[0].categories[0].articles[0].authors[0].surname === "Digas"
        && instance[0].categories[0].articles[0].sources[0].title === "source2"
        && instance[0].categories[0].articles[0].picture.name === "picture3"
        && instance[0].categories[0].articles[0].related[0].name === "article2"
        && instance[2].categories[0].articles[0].authors[0].surname === "Nachname"
        && instance[2].categories[0].articles[0].authors[1].surname === "Digas"
        && instance[2].categories[0].articles[0].sources[0].title === "source"
        && instance[2].categories[0].articles[0].picture.name === "picture"
        && instance[2].categories[0].articles[0].related[0].name === "article2"
        && instance[2].categories[0].articles[1].authors[0].surname === "Digas"
        && instance[2].categories[0].articles[1].sources[0].title === "source2"
        && instance[2].categories[0].articles[1].sources[1].title === "source3"
        && instance[2].categories[0].articles[1].picture.name === "picture2"
        && instance[2].categories[0].articles[1].related[0].name === "article"
        && instance[1].articles.filter(function (e) { return e.name === "article"; }).length === 1
        && instance[3].articles.filter(function (e) { return e.name === "article"; }).length === 1
        && instance[3].articles.filter(function (e) { return e.name === "article2"; }).length === 1
        && instance[3].articles.filter(function (e) { return e.name === "article3"; }).length === 1;
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,