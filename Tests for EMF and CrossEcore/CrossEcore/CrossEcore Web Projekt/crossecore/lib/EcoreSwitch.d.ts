import { EAttribute } from "./EAttribute";
import { EAnnotation } from "./EAnnotation";
import { EGenericType } from "./EGenericType";
import { EEnumLiteral } from "./EEnumLiteral";
import { ETypedElement } from "./ETypedElement";
import { EReference } from "./EReference";
import { EClassifier } from "./EClassifier";
import { Switch } from "./Switch";
import { ENamedElement } from "./ENamedElement";
import { EClass } from "./EClass";
import { EStringToStringMapEntry } from "./EStringToStringMapEntry";
import { EPackage } from "./EPackage";
import { EEnum } from "./EEnum";
import { EObject } from "./EObject";
import { EcorePackage } from "./EcorePackage";
import { EModelElement } from "./EModelElement";
import { EParameter } from "./EParameter";
import { EOperation } from "./EOperation";
import { ETypeParameter } from "./ETypeParameter";
import { EDataType } from "./EDataType";
import { EFactory } from "./EFactory";
import { EStructuralFeature } from "./EStructuralFeature";
export declare class EcoreSwitch<T> extends Switch<T> {
    protected static modelPackage: EcorePackage;
    constructor();
    isSwitchFor(ePackage: EPackage): boolean;
    doSwitch(classifierID: number, theEObject: EObject): T;
    caseEAttribute(object: EAttribute): T;
    caseEAnnotation(object: EAnnotation): T;
    caseEClass(object: EClass): T;
    caseEClassifier(object: EClassifier): T;
    caseEDataType(object: EDataType): T;
    caseEEnum(object: EEnum): T;
    caseEEnumLiteral(object: EEnumLiteral): T;
    caseEFactory(object: EFactory): T;
    caseEModelElement(object: EModelElement): T;
    caseENamedElement(object: ENamedElement): T;
    caseEObject(object: EObject): T;
    caseEOperation(object: EOperation): T;
    caseEPackage(object: EPackage): T;
    caseEParameter(object: EParameter): T;
    caseEReference(object: EReference): T;
    caseEStructuralFeature(object: EStructuralFeature): T;
    caseETypedElement(object: ETypedElement): T;
    caseEStringToStringMapEntry(object: EStringToStringMapEntry): T;
    caseEGenericType(object: EGenericType): T;
    caseETypeParameter(object: ETypeParameter): T;
}
